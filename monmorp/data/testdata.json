{"_id":{"$oid":"51e4d391c507ed1f43d1f13f"},"body":"封筒出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索郵便番号5桁時代の封筒現在の7桁郵便番号対応の封筒エアメール用封筒封筒（ふうとう）とは、手紙・文書（もんじょ、ぶんしょ）・書付（かきつけ）などを封入する袋のこと。状袋（じょうぶくろ）ともいう[1]。英語ではenvelope。主に紙類を移送、受け渡し、保存する際に用いる袋である。郵便で手紙を送る際に便箋をこれに入れて封書とするほか、金融機関の現金封筒や給料袋や月謝袋として貨幣を入れたり、書類の受け渡しや保存に多く使われる。数え方としては、何も入っていなければ「枚」、中身が入っていると「封」になる。目次1 形態2 郵便物としての利用3 歴史4 種類4.1 大きさによる封筒の種類4.2 色5 書式6 脚注7 関連項目8 外部リンク形態[編集]通常は紙で製造された袋であるが、軟質プラスチック製のもの（いわゆるビニール袋の封筒）も広く用いられている。「封筒」という字に現れているがごとく、一枚の紙の両端を貼り合わせ筒状にしたものを平たくして折り目をつけ、筒の底にあたる一辺を閉じて貼りつけた状態で販売されている。このような、筒形態を基本として作られた封筒は、次に述べる洋封筒に対して和封筒と呼ぶことがある。和封筒には長形と角形があり、英語ではサイド部分を先に貼り合わせて先と底とが空いている筒状の基本形態から、an end‐opening envelopeと呼ぶ。欧米などで一般的な形式である洋封筒（洋形）と呼ばれるものは、一枚の紙の四隅を中央に向かって折って作るもので、長辺のうちの一辺を残して三辺を貼りつけた状態で販売されている。英語では、サイド部分の一辺が空いている基本形態から、a side‐opening envelopeと呼ぶ。なお、封筒のうち閉じている側の部位を底（ボトム）、閉じていない側をベロ（フラップ）という。封筒は裏側の貼り合せ位置によって、和封筒では大きく中貼りと隅貼り（横貼り）の二種類に分かれ、洋封筒ではカマス貼りやダイヤモンド貼りなどの種類がある。郵便物としての利用[編集]日本では短い要件の場合は封書（便箋を封筒に入れたもの。手紙の形式のひとつ）ではなくはがき（封筒を用いず、用件を書いた厚紙一枚をそのまま送る。手紙の形式のひとつ）で済ませることが多いが、ヨーロッパやアメリカ合衆国などでは通常、post card（はがき）といえば観光地の絵はがき・写真はがきを指し、それ以外は短い用件であっても封書が使用される。たとえば、日本でいう年賀状に相当する欧米のクリスマス・カードなどのグリーティングカードは封筒に入れて送られる。このため、欧米の多くの国々では予め料額印面を刷り込んだ封筒が郵便局で販売されている。日本でもかつて一時期、料額印面を刷り込んだ切手付き封筒が販売されていたが、需要が少ないためごく短期間の発行に終わり、現在は「ものが入れられる便せん」であるミニレター（郵便書簡）のみの扱いとなっている。封筒には中身の情報を保護をできるという利点があるが、近年ではシールを貼って通信面を覆うはがき（いわゆる圧着はがき）で代替されることも増えている。歴史[編集]ヨーロッパでは16世紀から17世紀にかけて封筒が使われはじめたと考えられているが、一般的に普及しはじめたのは1840年のイギリスの郵便制度改革によって重量0.5オンス（約13グラム）までの郵便料金が1ペニーと定められたころからと考えられている。それ以前は、枚数や距離によって料金が決められる方式であり、封筒も1枚と換算されたため、手紙は便箋むき出しのままこれを折りたたみ封蝋をした形で郵送されていた。しかし、枚数ではなく重量で料金が決められるようになると、封筒が急速に普及した。日本では中世以前から書簡を送る際、今でいう便箋にあたる文字を書いた紙を何も書いていない白い紙（懸紙）で包む習慣があり、江戸時代には絵入りの便箋である絵半切を絵封筒と呼ばれる縦長の袋に入れる事例が既にあった[2]。種類[編集]大きさは日本工業規格で決まっており10種類以上が存在するが、最もよく使われるのは長形3号（120mm×235mm）と長形4号（90mm×205mm）の2種類である。これら2種類は、日本の書類でよく使用されるA4とB5の用紙に合うことと、料金の比較的安い定形郵便物で送ることができることにより普及している。紙の重量によっても分けられて販売されている。紙の重量は薄さ厚さを意味し、一般的な封筒サイズの長形3号の場合、85g/m²以下の封筒を使用すると内容物が透ける物もあるのでプライバシーに関する書類を送る場合は注意が必要である。郵便局は封筒の内側がそのまま便箋になっているミニレターを販売している。同様の形式で、海外宛航空郵便用のエアログラムもある。国際的に航空郵便に使用する封筒は、4辺の端に赤と白と青の縞模様の入った封筒を使うことになっている。しかし強制ではなくあくまで任意であるため、国際航空郵便にも一般の封筒を使用することは可能である。また投函前に「PAR AVION」と書いたステッカーを貼り、航空郵便である事をはっきりさせる事が一般である。封筒は中身を入れたのちにのりまたは粘着テープ等で封をするのが一般的であるが、それらが手元になくても簡単に封をできるように加工された「口糊付封筒」もある。ダイレクトメール用や業務用には、中身の印刷物に印字された宛先を封筒の宛先として利用するために「窓付き封筒」もある。書類の保存用には、開閉を繰り返すことができるよう、フラップ部分を留めるための玉紐（ひも）が付いた封筒もある。厚みのある書類等を入れるための封筒として側面にマチの付いた封筒もある。CDやビデオテープなどを輸送するために、内側に緩衝材を貼ったものも存在する。大きさによる封筒の種類[編集]大きく角形（K: かくがた）・長形（N: なががた）・洋形（Y: ようがた）・その他に分かれる。角形: 縦サイズが横サイズの2倍より短い封筒角形0号（K0） 287×382 - JIS B4判がそのまま入る角形1号（K1） 270×382 - B4判がそのまま入る角形2号（K2） 240×332 - JIS A4判がそのまま入る角形3号（K3） 216×277 - JIS B5判がそのまま入る角形4号（K4） 197×267 - JIS B5判がそのまま入る角形5号（K5） 190×240 - JIS A5判がそのまま入る角形6号（K6） 162×229 - JIS A5判がそのまま入る角形7号（K7） 142×205 - JIS B6判がそのまま入る角形8号（K8） 119×197 - JIS 定型郵便。給料袋、月謝袋に使われる角形20号（K20） 229×324 - JIS A4判がそのまま入る角形A3号 335×490 - A3判がそのまま入る角形A4号 228×312角形B3号 375×525角形0号マチ付 290×382角形2号マチ付 250×335角形3号マチ付 218×277角形A3号マチ付 320×440角形ジャンボ 435×510長形: 縦サイズが横サイズの2倍程度ある封筒長形1号（N1） 142×332 - A4たて2つ折・B4判ヨコ3つ折りが入る長形2号（N2） 119×277 - JIS A4ヨコ3つ折・B5判タテ2つ折りが入る長形3号（N3） 120×235 - JIS 定形郵便。A4判ヨコ3つ折りが入る長形4号（N4） 90×205 - JIS 定形郵便。B5判ヨコ4つ折りが入る長形6号（N6） 110×220 - JIS 定形郵便。A4判ヨコ3つ折りが入る。フタを折ると封筒本体を折らずに長形3号封筒に入る。長形8号（N8） 119×197 - 定形郵便、角型8号と同じ長形13号（N13） 105×235 - 定形郵便。A4ヨコ4つ折りが入る長形14号（N14） 95×217 - 定形郵便。A4ヨコ4つ折りが入る長形30号（N30） 92×235 - 定形郵便長形40号（N40） 90×225 - JIS 定形郵便。A4判ヨコ4つ折りが入る洋形: 長辺に封入口がある封筒洋形0号（Y0） 235×120 - 定形郵便。A4判ヨコ3つ折が入る洋形1号（Y1） 120×176 - JIS 定形郵便。主に招待状などのカードを入れる洋形2号（Y2） 114×162 - JIS 定形郵便。郵政はがきが入る洋形3号（Y3） 98×148 - 定形郵便。B5判ヨコ・タテ4つ折が入る洋形4号（Y4） 105×235 - JIS 定形郵便。A4判ヨコ3つ折が入る洋形5号（Y5） 95×217 - 定形郵便。A5判タテ2つ折が入る洋形6号（Y6） 98×190 - JIS 定形郵便。B5判ヨコ3つ折が入る洋形7号（Y7） 92×165 - 定形郵便。A5判ヨコ3つ折が入る洋形8号（Y8） 235×120 - 洋形0号と同じ洋形2号タテ形 162×114 - 定形郵便。A4横・縦4つ折が入る洋形4号タテ形 235×105 - 定形郵便。A4横3つ折が入る洋形5号タテ形 217×95 - 定形郵便。A5縦2つ折が入る洋形6号タテ形 190×98 - 定形郵便。B5横3つ折が入る洋形特1号 198×138洋形長3号（洋長3号） 235×120 - 洋形0号と同じ洋形長4号 205×90 - 定形郵便。B5横4つ折が入る洋形東京3号 170×120 - 定形郵便国際規格B4 259×353 - ISOB5 176×250 - ISOB6 125×176 - ISOC3 324×458 - ISOC4 229×324 - 角形20号と同じ。ISO A4判がそのまま入るC5 162×229 - 角形6号と同じ。ISO A5判がそのまま入るC6 162×114 - 洋形2号と同じ。ISO 定形郵便。郵政はがきが入るDL 220×110 - 長形6号と同じ。ISO 定形郵便。フタを折ると長形3号封筒に入るB6/C4 125×324 - ISOその他東京3号 定形 170×120東京型 定形 170×120国際A4 229×324 - 角形20号と同じビッグ1 440×570ビッグ2 385×450 - A3判用ビッグ3 385×400 - レントゲン大角判用名刺入封筒9 65×105名刺入封筒13 71×109名刺入封筒16 86×120プリペイド封筒（L） 115×80プリペイド封筒（S） 100×68JISは日本工業規格JIS S5502-1997にあるもので、ISOは国際規格ISO 269:1985にあるものである。その他のものは業界の標準であったりメーカーが独自に定めたものであり、これらは名称が同じでもサイズが多少異なることもある。定形郵便は定形郵便物として送ることが出来る大きさのものである。色[編集]日本では白、薄茶、水色、黄色、グレー、ピンク、グリーンその他さまざまな色の封筒が文具店やコンビニエンスストアなどの小売店で一般に売られている。そのほか、企業や団体組織の住所やロゴマークを印刷し自社専用に作成して用いることも多い。特によく売られているものに白と薄茶のものがある。白封筒は中身が透けて見えやすいため、紫色の紙を内側に重ねて中が透けないようわざわざ二重の構造にして作ってあることもあり、比較的あらたまった手紙のために用いられることが多い。薄茶のものは「茶封筒（ちゃぶうとう）」と呼ばれており、クラフト紙を材料としており、事務的な用途などに極めて広く用いられる。ちなみに、この「茶封筒」の薄茶色は、英語圏ではbrown（茶）ではなくyellow（黄）を用いて言い表す。イギリスの小説などでもクラフト紙の色はyellowとして捉えられている[3]し、フランス語では日本の茶封筒と同じ色味の封筒を「enveloppe jaune」（黄色の封筒）という[4]。これは、yellowやjauneの指す範囲が日本語のいう黄色の範囲にとどまらず、キツネ色や犬の色、乾いた土の色をも含むためである。それらの例とは別に、ドイツでは郵便ポストが黄色であるように、郵便に関するものはすべて日本語でいうところの鮮やかな黄色で統一されており、郵便用の梱包材は実際に鮮やかな黄色をしている。書式[編集]和封筒の場合にも洋封筒（横置き）の場合にも裏側をみて開封部がある側が上になる。洋封筒を縦置きに用いる場合には通常は右封じとする（左封じは弔事に用いられる）。和封筒や洋封筒（縦置き）の場合には表面右側から宛先の住所と氏名を記し、裏側の中央から左部に発信人の住所と氏名を記す。洋封筒（横置き）の場合には表面に宛先の住所と氏名、裏側下部に発信人の住所と氏名を記す。封筒に用いられる脇付は外脇付と呼ばれ「親展」や「至急」などがある。封緘部には「封」「緘」「〆」などを記す。切手を貼る位置は内国郵便約款によって定められている。脚注[編集]^ 日本国語大辞典「ふうとう（封筒）　手紙・文書・書付などを封入する紙袋のこと。状袋（じょうぶくろ）ともいう。」^ 逓信総合博物館 http://www.japanpost.jp/teipark/display/museum_shozou/museum_shozou_21.html^ Virginia Woolf, Mrs. Dalloway, The Hogarth Press, London, 1990「a large square piece of yellow cardboard」^ 鈴木孝夫「日本語と外国語」1990岩波新書関連項目[編集]ウィキメディア・コモンズには、封筒に関連するカテゴリがあります。郵便メール便郵便書簡（ミニレター）航空書簡（エログラム）航空扱い手紙便箋封書グリーティングカード年賀状クリスマス・カード金封（御祝儀袋・不祝儀袋など）絵封筒：切手のデザインを生かしてアレンジした封筒のこと。外部リンク[編集]封筒サイズ一覧絵封筒「http://ja.wikipedia.org/w/index.php?title=封筒&oldid=48053646」から取得 カテゴリ: 郵便文房具袋紙の寸法\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f13e"},"body":"電子ペーパー出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索iLiad電子ペーパー（でんしペーパー）とは、紙の長所とされる視認性や携帯性を保った表示媒体のうち、表示内容を電気的に書き換えることができるものをいう。1970年代に米国ゼロックス社のパロアルト研究所に所属していたニック・シェリドンがGyriconと呼ばれる最初の電子ペーパーを開発した[1]。Gyriconの構造は、半球を白、別の半球を黒に塗り分けた微小な球をディスプレイに多数埋め込んだものである。球の一部は静電気を帯びており、電界によって球を回転させることで白地に黒い文字を浮かび上がらせることができ、数千回の書き換えにも耐えた。現在では電子ペーパーを利用した製品が一般的に販売されるまでに至り、今後は低価格化が普及の鍵とされる。目次1 特徴2 種類3 電気泳動方式3.1 構造3.2 特性4 実用例5 開発組織6 注記7 出典8 関連項目9 外部リンク特徴[編集]低消費電力表示中に電力を消費しないか、又は極小で済む。書き換え時の消費電力も非常に少ない。応答速度電気泳動方式では非常に遅く動画用途には向かなかったが、電子粉流体では液晶よりも高速になっている。高い視認性紙と同じように反射光を利用して表示を行うため、視野角が広く直射日光に当たっても見易く、目に対する負担が少ない。暗所では別に照明が必要になる。薄くフレキシブル紙のように薄く作ることができる。表示基板にプラスチック・フィルムを使えば曲げても品質を損なわずに表示できるが、製品としては未発売。種類[編集]マイクロカプセル方式 - Gyriconと同じ方式電子粉流体方式液晶方式 - 異なる波長の光を選択的に反射するコレステリック液晶層を使用して多色カラー表示を行う。2008年末現在、富士通、旭ガラス、富士ゼロックスが開発中エレクトロウェッティング方式 - Electrowetting電気泳動方式化学変化方式 - 有機物や無機物の酸化還元反応を利用したもの。2008年末現在、船井電機が開発中[出典 1]電気泳動方式[編集]電気泳動方式の構造模式図1.表面層 2.透明電極(ITO) 3.マイクロカプセル 4.正に帯電した白色顔料 5.負に帯電した黒色顔料 6.透明分散媒(オイル) 7.下部電極 8.支持層 9.外光 10.白色 11.黒色電子ペーパーの代表的な表示技術に電気泳動方式がある。この方式は米E Ink社が開発したもので、白色と黒色の粒子を流体を収めたマイクロカプセル中で電界によって移動させることで白と黒の表示を行なうものである。粒子移動型などとも呼ばれる。同様の技術は米SiPix Imaging社も開発しており、類似の技術では、流体ではなく空中で白色と黒色の粒子を電界によって移動させるブリヂストン社の方式もある[出典 1]。構造[編集]直径40μm程度の透明なマイクロカプセル中に正と負に帯電した白色と黒色の顔料粒子がオイルと共に収められ、カプセルは1層のみ薄く2枚の狭い電極板の間に隙間なく並べられる。表示面となる電極の片側はITOのような透明電極で作られ、反対側の電極は必要な表示解像度の大きさの微小な矩形電極で構成される。外部の制御回路からの電圧印加によって2枚の電極間に電界が生じ、正と負に帯電した白色と黒色の顔料粒子がオイル中を泳動して、いずれか電圧によって選ばれた色の顔料粒子がカプセルの表示面側に集まることで、白黒の表示を行い、微小な電極によって作られる各画素ごとに白黒の表示が選ばれる。電圧を切っても顔料粒子は簡単には動かないため、印刷物のように読み取ることが出来る[出典 1]。特性[編集]他の多くの電子ペーパー同様に、画像保持の為の電気は全く必要とせず、画像の書き換え時にも少しの消費電力で済む。2008年末現在の技術でも、電気泳動方式では、新聞紙やレーザープリンターによって印刷出力されたコピー紙と比べても遜色ない表示品質が得られる。表示特性の比較表示媒体反射率コントラスト比電子ペーパー(電気泳動方式)40%10対1新聞紙65%7対1コピー用紙80%20対12008年末で単純な白黒画像の更新時間は0.3-0.7秒である。2008年春にセイコーエプソンが電気泳動方式専用の駆動ICを開発し、最大では16個の領域に対して同時に書き換え動作が行なえるので、応答性の良い電子ペーパーが実現出来る。広い視野角を持ち、白黒の活字印刷のようなコントラストの強いモノクローム表示には最適であるが、白黒の中間調では一度白黒を反転させて以前の残像を消す必要から画像更新時間は単純な白黒画像に比べて2倍以上の時間が掛かりスクロール表示には向かない。中間調はパルス幅変調などで実現される。カラー化は液晶パネルと同様に、画素ごとに色の異なるカラーフィルタを重ねることで実現されるが、白黒では反射光を利用しているために40%だった白色の反射率が、赤・緑・青の3つのカラーフィルタからの反射光の合成によって白色を作るために13%程度にまで落ちて、暗い画面になるのが欠点である。電子ペーパーは液晶ディスプレイや有機ELほど水蒸気の侵入に対して敏感ではないことや、反射型なので背面は不透明で良い点、元々視野角が広い事、バックライトが必要無い事、などの理由により、こういった薄型表示パネルの中では最も早い時期に、実用的な曲げても使えるディスプレイを実現出来ると考えられている。ただ、2009年1月現在、どの方式のものも商品化までには至っていない。また、将来量産されれば、同じ大きさの液晶ディスプレイと比べても、偏光板がいらない分だけ低コストで製造できると考えられる[出典 1]。実用例[編集]各種携帯電話MOTOFONE - Motorola社製の40米ドルと廉価な携帯電話で、新興国向けに1,000万台が販売された。メイン画面に電子ペーパーを使用W61H、W62CA、CA002、SH002、URBANO AFFARE（SOY05）- auブランドを展開するKDDI社、および沖縄セルラー電話社が2008年、2009年、2011年に販売した。このうちW62CA、CA002、SH002、URBANO AFFAREはいずれもサブ・ディスプレイに使用し時刻表示が常に行える。W62CAでは液晶のガラスが外部に露出しないので頑丈とされた。W61Hはセグメントマトリクス方式のため時計は表示出来ない。電子書籍リーダーAmazon Kindle （Amazon.com社、携帯無線端末型、6型画面、800×600画素、4階調）LIBRIe （Sony、6型画面、800×600画素、4階調　※現在は生産終了）Sony Reader （Sony、6型画面（PRS-350のみ5型画面）、600×800画素、16階調　※PRS-T1はWi-Fi対応、PRS-G1は3G＆Wi-Fi対応）biblio leaf SP02 （au（KDDI／沖縄セルラー電話）、6型画面、600×800画素）iLiad （8.1型画面、768×1024画素、16階調）[出典 2]楽天 kobo Touch （Kobo社、6型画面、600×800画素、16階調）[出典 3]デジタルサイネージJR飯田橋駅構内（東口改札口）で748mm×520mmのデジタルサイネージが2004年11月から2005年9月まで使用（凸版印刷、NECネッツエスアイ株式会社）[出典 4]愛知万博では133型のデジタルサイネージの見本が展示された（凸版印刷、読売新聞社）仙台駅の仙台市地下鉄南北線のホームで、72型のデジタルサイネージ「まちコミ」の運用実験が2007年12月から2008年8月まで行われた。（凸版印刷）。[出典 1]試験終了後、勾当台公園駅、長町駅でも「まちコミ」の運用が開始された[出典 5]ICカードワンタイムパスワード・カード(OTP カード)の量産化と認証ソリューションの提供開始（トッパンフォームズ、SiPix）[出典 6]電池非搭載電子ペーパーICカードの量産化（IBテック、AniCa）[出典 7]POPPROJECT VIVIT・POPや遠隔コントロール （VIVIT社、太陽セルで動作するPOPや無線モジュール搭載の遠隔表示コントロール）開発組織[編集]E Ink社（イーインク（英語版）社）凸版印刷ゼロックス社 - パロアルト研究所富士通 - 富士通研究所ブリヂストン社(2012年撤退)[出典 8]ポリマービジョン社セイコーエプソン社日立製作所ブラザー工業Liquavista B.V.（英語版）リコーSiPix Imaging 社PROJECT VIVIT注記[編集]^ 日本で最初に電子ペーパーが開発されたのは1969年である。（nikki electronics 2008.12.29）出典[編集]^ a b c d e 檀上英利著　『書き換え可能な紙として進化する電子ペーパー』　日経エレクトロニクス2008年12月29日号　66-71頁^ [1] - EAST社Webページ^ [2] - 【PC Watch】 楽天「kobo Touch」試用レポート(前編)^ [3] - 凸版印刷Webページ^ [4] - 仙台市交通局 地下鉄駅に「電子ペーパー」広告を設置しています^ [5] - トッパンフォームズWebページ^ [6] - IBテックWebページ^ [7] - ブリヂストン社ニュースリリース関連項目[編集]電子書籍外部リンク[編集]ゼロックス社パロアルト研が開発した電子ペーパー電子ペーパーコンソーシアム電子ペーパーの遠隔コントロールソリューション表・話・編・歴映像出力機器発光体ニキシー管 - EL - LED静止画電子ペーパー動画VFD - CRT - PDP - OLED - ILED - レーザーTV - LCD - プロジェクタ - DLP - LCOS - SED - FED - Crystal LED Display - NED - 映写機 - 自由空間映像3Dステレオスコープ - ホログラフィー「http://ja.wikipedia.org/w/index.php?title=電子ペーパー&oldid=47801984」から取得 カテゴリ: ディスプレイ技術紙電子書籍\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f141"},"body":"Apache HTTP Server出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索「Apache」はこの項目へ転送されています。そのほかの用法については「アパッチ (曖昧さ回避)」をご覧ください。Apache HTTP Server開発元Apacheソフトウェア財団初版1995年（18年前） （1995）[1]最新版2.4.4 - 2013年2月25日（4か月前） （2013-02-25）2.2.24 - 2013年2月26日（4か月前） （2013-02-26）2.0.64 - 2010年10月19日（2年前） （2010-10-19）[±]最新評価版[±]プラットフォームクロスプラットフォーム種別WebサーバライセンスApache License公式サイトhttps://httpd.apache.org/テンプレートを表示Apache HTTP Server（アパッチ エイチティーティーピー サーバ）は、世界中でもっとも使われているWebサーバソフトウェアであり、大規模な商用サイトから自宅サーバまで幅広く利用されている。単にApacheとも称されている。開発は、Apacheソフトウェア財団のApache HTTPサーバプロジェクトで行われている。Apache Licenseの下でソースコードが公開および配布されており、代表的なオープンソース・ソフトウェアの一つである。目次1 特徴1.1 複数のバージョンのサポート1.2 複数のOSに最適化 (MPM)1.3 モジュールによる機能追加1.4 プロセスの挙動2 利用形態2.1 特殊な形態3 歴史4 関連項目5 脚注6 外部リンク特徴[編集]複数のバージョンのサポート[編集]2012年2月現在、Apacheは以下の3バージョンをサポートしている。2.0系 ほぼセキュリティ関係の修正のみであり、2.2系への移行が推奨されている。2.2系 安定志向のユーザーに利用されている。2.4系 最新の機能を搭載している。複数のOSに最適化 (MPM)[編集]Apacheは数多くのOSをサポートするために、MPM（マルチ プロセッシング モジュール）という仕組みをとっている。これにより、利用するOSに最適化されたApacheを容易に組み込むことができる。モジュールによる機能追加[編集]Apacheの機能はモジュールを追加することで拡張できる。Apacheの核となる「Core」がまずあり、そこへモジュールを追加して機能を拡張する。モジュール名は慣習的に「mod_XXX」と付けられる。XXXは機能の概要名である。例えば「mod_dir」「mod_alias」「mod_setenvif」などとなる。モジュールは「静的リンク」または「動的リンク」により追加できる。静的リンクとは、Apacheの実行ファイルそのものにモジュールを組み込む方式である。つまりApacheとモジュールはバイナリ的に一体化して動作する。動的リンクとは、モジュールを別ファイルとして作成し、必要に応じてモジュールのファイルから機能を呼び出す方式である。この機能を「DSO（Dynamic Shared Object＝動的共有オブジェクト）」と呼ぶ。動的リンクの機能を利用するためには、あらかじめ「mod_so」モジュールを静的リンクしておく必要がある。動的リンクはモジュール機能の呼び出しで静的リンクよりも負荷が高くなる（オーバーヘッドがかかる）デメリットがあるが、再起動のみでモジュールを組み入れたり外したりできるメリットがある。 逆に静的リンクは高速にモジュール機能を呼び出せるが、モジュールを入れたり外すためにはApache本体を再コンパイルする必要がある。プロセスの挙動[編集]Apacheはプロセスの挙動として3つの方式を持っている。preforkpreforkは「スレッドを使わず、先行して fork を行なうウェブサーバ」である。Apacheは伝統的に親プロセスを1つ持ち、クライアントからリクエストが来ると自分自身をコピーして子プロセスを起動する（これをforkという）。実際の通信は子プロセスが受け持つ。そのため、通信している数だけ子プロセスが起動することになる。この時、クライアントからリクエストを受けたあとでforkするとfork完了までに待ち時間が出来て通信のパフォーマンスが遅くなる。そのため、あらかじめいくつかの子プロセスをforkしておき、forkの待ち時間をなくす方式をとっている。この方式が「prefork」である。すなわち“pre（＝前もって・先行して）”forkしておく、という意味である。preforkのメリットは、forkされた子プロセス1つ1つが対応する通信を受け持つため、ある子プロセスが何らかの原因でフリーズしたとしても、他の子プロセスには影響を及ぼすことが無く通信を継続できる。このため安定した通信を行うことが出来る。一方、クライアントが多くなればなるほど子プロセスの数も増えるため、使用メモリ量やCPU負荷が比例的に増大していく。preforkで多数のクライアントをさばくには、それに応じた大量のメモリと高速なCPUが必要となる。workerworkerは「マルチスレッドとマルチプロセスのハイブリッド型サーバ」である。Apacheの子プロセス1つ1つがマルチスレッドで動作し、スレッド1つが1つのクライアントを受け持つ方式である。すなわち、1つのプロセスがマルチスレッドを利用して複数の通信の面倒を見る。この点で1つのプロセスが1つの通信をみるpreforkとは異なる。また多くの子プロセスを起動せずに済むため、メモリの使用量も減らすことが出来る。eventeventはworkerの一種でマルチスレッドで動作する。workerとの違いはKeep-Alive（持続的接続）の処理方法である。workerやpreforkは、Keep-Aliveの持続性を保つために一度利用したスレッド・プロセスをそのまま待機させている。しかしクライアントからの接続が持続的に行われる可能性は保証されているわけではないから、待機していること自体が無駄になる可能性もある。そこで、Keep-Aliveの処理を別のスレッドに割り振って通信を処理する。この方式は長らく実験的サポートであったが、2.4.1にて正式に採用された[2]。利用形態[編集]Apacheは、主にワールドワイドウェブ上で静的または動的なコンテンツを公開するために使われる。多くのウェブアプリケーションは、Apacheが提供する環境と機能を想定して設計されている。また、ApacheはLAMP (Linux、Apache、MySQL、PHP/Perl/Python) や LAPP (Linux、Apache、PostgreSQL、PHP/Perl/Python) と呼ばれる非常に人気のあるウェブサーバコンポーネントの一つでもある。さらに、Apacheはいろいろな商用パッケージ、例えばOracle DatabaseやIBM WebSphere Application Serverに組み込まれており、Mac OS XやNetWare 6.5の標準Webサーバにもなっている。Yahooは1996年よりApacheを利用しており、現在ではカスタマイズしたApacheを数千台のWebサーバに導入して、一日数十億のアクセスを処理していることでもその信頼性の高さがわかる。特殊な形態[編集]Apacheでは、FreeBSDのカーネルと連動し、最高の性能を引き出す特殊な動作形態をサポートしている[3]。 これはFreeBSDをHTTPサーバに特化するという運用形態を想定したもので、FreeBSD及びApacheの両者に設定が必要であり、共にインストール直後の標準設定ではサポートされない。基本的な動作は、LinuxのTUX web serverやWindowsのInternet Information Servicesなどに近い実装であり、通信バッファのカーネルからの直接的な読込やkqueueなど多岐にわたり、一部のみ利用ということも可能になっている。同形態はLinuxにおけるサポートも検討されたが、あまりに特殊であるため未実装となっている。[独自研究?]歴史[編集]1995年当時Webサーバソフトウェアは欧州原子核研究機構(CERN)のティム・バーナーズ＝リーが開発したCERN HTTPdと米国立スーパーコンピュータ応用研究所(NCSA)が開発したNCSA HTTPdの2種類があった。NCSA HTTPdは初めてCGIを採用するなど、非常に普及していたが、その後ほとんどメンテナンスが行われなくなり、放置されていた。そこで、何人かの有志が改良とサポートを行うためのグループを作り、自分たちをApache Groupと名付けた。しかし、彼等もその後プロジェクトに興味を失ってしまい、再度放置されかけた。そのため、1999年にユーザーの一人だったBrian Behlendorfが自分のサーバを使ってユーザーのためのメーリングリストを立ち上げた。これが現在のApacheソフトウェア財団の母体になっている。ただし、現在のApacheのソースコードはApacheソフトウェア財団によって完全に書き換えられており、NCSA HTTPdのコードは残っていない。関連項目[編集]WebサーバIBM HTTP Servernginx脚注[編集][ヘルプ]^ “About the Apache HTTP Server Project”.  Apacheソフトウェア財団. 2013年5月30日閲覧。^ “Apache HTTP Server、6年ぶりのメジャーアップデート版「2.4.1」リリース”.  SourceForge.JP (2012年2月22日). 2012年2月23日閲覧。^ “accf_http”. 2013年6月5日閲覧。外部リンク[編集]ポータル FLOSSウィキメディア・コモンズには、Apache HTTP Serverに関連するカテゴリがあります。公式サイト（英語）日本Apacheユーザ会（日本語）Apache News Online（英語）表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org表・話・編・歴Webインターフェイス（Web API（英語版））サーバーサイド（英語版）プロトコルCGISCGI（英語版）FCGIAJP（英語版）APIsC NSAPI（英語版）C ASAPIC ISAPI（英語版）Java ServletCIL System.Web.IHttpHandler（英語版）Python WSGIRuby Rack（英語版）JavaScript JSGI（英語版）Perl PSGILua WSAPI（英語版）Apacheモジュールmod_jk（英語版）mod_lisp（英語版）mod_mono（英語版）mod_parrot（英語版）mod_perl（英語版）mod_phpmod_pythonmod_wsgimod_ruby（英語版）Phusion PassengerトピックスWeb resource（英語版） vs. Web service（英語版）Application server（英語版）comparison（英語版）クライアントサイドW3CAudio（英語版）CanvasCORS（英語版）File API（英語版）Geolocation（英語版）IndexedDBMicrodata（英語版）SVGVideo（英語版）WebSocketWeb messaging（英語版）Web storage（英語版）Web worker（英語版）XMLHttpRequestクロノス（英語版）WebCLWebGLウェブユーザーインターフェース「http://ja.wikipedia.org/w/index.php?title=Apache_HTTP_Server&oldid=48283809」から取得 カテゴリ: オープンソースWebサーバApacheソフトウェア財団隠しカテゴリ: 独自研究の除去が必要な記述のある記事/2013年\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f140"},"body":"宇宙開発競争出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索宇宙開発競争（うちゅうかいはつきょうそう、Space Race、宇宙開発レース、スペースレース）とは、冷戦中にアメリカ合衆国とソビエト連邦との間で宇宙開発をめぐって戦われた、非公式の競争である。目次1 概説2 歴史的背景2.1 初期のロケットと軍事2.2 ロケットに対するドイツの貢献2.3 宇宙開発競争の萌芽3 人工衛星開発競争3.1 スプートニク3.2 衛星通信3.3 その他特筆すべき衛星4 さらなるソビエトの成功：宇宙に動物と人間を送る4.1 動物を宇宙へ4.2 人類を宇宙へ5 月着陸競争5.1 無人探査機5.2 月面に人類を送る5.3 アポロ11号、月に一番乗り6 他の宇宙技術競争6.1 惑星へのミッション6.2 ランデブー、ドッキング、ステーション7 宇宙の軍事利用競争8 米ソによる「宇宙開発競争」の変化8.1 デタント8.2 アポロ・ソユーズテスト計画、競争の終結8.3 SDI構想とソ連崩壊9 競争にかかわった組織、予算、経済効果9.1 アメリカのNASA創設9.2 ソ連の予算不足と組織乱立10 宇宙開発での犠牲10.1 飛行士10.2 その他の人的被害10.3 両国財政・経済11 宇宙開発競争の遺産・技術と教育の進歩12 宇宙開発競争の再来12.1 日本12.2 欧州・ロシアの挑戦12.3 中国、インドなどの台頭12.4 ブラジル、韓国、イランなど12.5 民間宇宙開発競争12.6 人工衛星打ち上げ実績13 脚注14 参考文献15 関連項目15.1 アメリカ15.2 ソ連16 外部リンク概説[編集]「宇宙開発競争の年表」および「1957年 - 1969年の宇宙開発の重大事項」も参照おおよそ1957年から1975年までの間続いたこの競争のもと、それぞれが人工衛星を打ち上げ、人間を宇宙空間へ送り、月に人間を立たせるための計画を並行して行った。この競争の発端は、初期のロケット技術の競争や、第二次世界大戦後の国際的な緊張の中に既にあったが、実際に始まったといえるのは1957年10月4日のソビエト連邦によるスプートニク1号の打ち上げの後であった。宇宙開発競争 (Space Race) という用語は公式な用語ではなく、軍備拡張競争 (Arms race) から類推して生まれた言葉である。宇宙開発競争は、冷戦中のソ連とアメリカによる文化と科学技術の競争の中で決定的な役割を果たした。宇宙技術は、ミサイルなど軍事技術への応用が可能なことと、国民の誇りやモラル、世界の人々へのイメージ向上に与える影響が大きく心理学的な利益があると考えられたことから、両国の競争と摩擦の主戦場となった。緒戦ではソ連が宇宙開発史上初の成果をことごとく独占したが、アメリカは最も印象的な月面着陸を成功させた。アメリカの一応の勝利と双方の疲弊によって、巨額の費用がかかる有人月探査は政治的使命を終えたため行われなくなり、宇宙開発競争は一段落したが、21世紀に入るとアジアやヨーロッパの様々な国が宇宙開発に参入して相互の競争が始まるようになり、様相は変わってきている。歴史的背景[編集]初期のロケットと軍事[編集]ロケットは長年に渡り、科学者やアマチュア科学者らを魅了してきた。中国人は早くも11世紀に、これを兵器として利用している。19世紀末、ロシアのアマチュア科学者、コンスタンチン・ツィオルコフスキーは宇宙に到達できる多段式の液体燃料ロケットを理論化している。実際に液体燃料ロケットを打ち上げたのは1926年、アメリカ人のロバート・ゴダードであったが、2人とも世間から注がれる目は冷ややかなものがあった。ゴダードはロケット打ち上げ研究を辺鄙な場所で続けていたが、科学者のコミュニティからも、大衆からも、ニューヨーク・タイムズ紙からさえも彼は嘲笑された。ロケット技術の評価が高まるのは、結局は第二次世界大戦という戦争を通してであった。これは、いかに「ロケット研究は政治や軍事とは関係のない純粋に科学的な研究であり、平和のためでもある」というレトリックを駆使しようと、あらゆる宇宙開発競争は国家の軍事に対する野望と避けがたく結びついてしまうという未来への先触れであった。ロケットに対するドイツの貢献[編集]詳細は「V2ロケット」を参照1920年代半ばにドイツ人科学者たちは、液体推進燃料で作動する、高空や遠距離に届くロケットの実験を開始した。1932年、ヴァイマル共和政下の共和国国防軍（ライヒスヴェーア、後のナチス時代のヴェーアマハト・ドイツ国防軍）は長距離砲としてのロケットに強い関心を持つようになった。熱意のあるロケット科学者、ヴェルナー・フォン・ブラウンはロケット研究に加わり、苦心の末、ナチス・ドイツが第二次大戦で使用することとなる長距離砲撃兵器の開発に成功した。牽引式発射装置上のV21942年に打ち上げられたドイツのA-4ロケットは、人類が初めて宇宙空間に到達させた人工物体となった。1943年、ドイツはA-4をV-2（報復兵器2号）の名で大量生産した。射程距離300km、積載可能な弾頭の重さ1トンというV-2を国防軍は数千発もイギリスなど連合国側の国土に打ち込み、多大な損害と多くの犠牲者を出した。第二次大戦が終わりに近づくにつれ、ソビエト、イギリス、アメリカの軍や科学者の間で、バルト海沿岸のペーネミュンデ（現在のドイツ連邦共和国北東端、メクレンブルク＝フォアポンメルン州内）にあったドイツのロケット開発計画の施設や研究者や技術の奪い合いが始まった。その結果、「ペーパークリップ作戦」によって、多数の科学者（その多くは、フォン・ブラウンも含めナチス党員であり、このためソ連に拘束された後の身の危険を恐れた）がドイツからアメリカに移送された。アメリカで、ドイツ人科学者たちはドイツ製ロケットを、イギリスなどへの爆撃の代わりに、アメリカのための科学研究や軍事研究などの目的で使用するため研究を続けることとなる。また、イギリスもV-2の実機や研究者を捕らえるなどいくらかの成功を収めた。赤軍はフォン・ブラウンなどの主な研究者が去った後のペーネミュンデを占領し（その後ペーネミュンデはドイツ民主共和国（東ドイツ）へ編入）、多くのV-2の実機や研究者を捕らえた上で、ソ連国内へ連行してロケット開発に当たらせた。ただし、その後ソ連は、ドイツの技術の継承ではなく、晩年はソ連科学アカデミーに所属していたツィオルコフスキーの研究、およびその死後（1937年）も続けていた独自の技術研究を基にした開発に進んだ。戦後の科学者はロケットを上層大気の観測（気温や気圧など）、宇宙線の観測など科学目的で使うようになった。これらはアメリカの研究機関の一員となったフォン・ブラウンとその同僚たちにより細々と続けられた。宇宙開発競争の萌芽[編集]第二次大戦の後、アメリカとソ連はスパイやプロパガンダを通じた苦い冷戦の時代に入ってゆく。宇宙探査と人工衛星技術は、両方の陣営で最もシンボリックな冷戦の尖兵となっていった。衛星技術が発達すれば偵察機を飛ばすことなく他国をスパイすることが可能となり、宇宙旅行が成功すれば国家の科学分野における勇気と軍事的な潜在能力を喧伝できるプロパガンダになる、と考えられたからである。人類を軌道上や月の特定地点に運ぶロケットと同じものが、敵国の特定都市の特定地点に原子爆弾を運ぶ核兵器運搬手段となる可能性があり、宇宙旅行のために開発された技術が、大陸間弾道ミサイル (ICBM) など戦時のロケットのためにも同様に適用できる可能性もあった。また冷戦下では政治、経済、技術、文化、娯楽、スポーツなど、直接の戦火以外のあらゆる分野で両陣営が優劣を競って熾烈な戦いを繰り広げていた。軍備拡張競争のもつ軍事以外の側面と同様、宇宙での前進は単に相手国に先駆けたというだけにとどまらず、その国の技術や経済での大胆さの指標とみなされ、そのような成果を達成できる国家のイデオロギーの正しさや優秀さともみなされた。宇宙開発には二つの目的があった。平和的な科学的成果を収めることと、軍事的・心理的な成果も収めることである。特にソ連の場合、通常の航空戦力ではアメリカに劣り、自国領空を侵犯して行われるアメリカ空軍の偵察活動に対してほぼ無力であった上（1960年のU-2撃墜事件も参照）、自国及び東ヨーロッパ諸国での勢力圏が「封じ込め政策」により世界各地へ展開するアメリカ軍に包囲されていたため、これに対抗するために超高速でアメリカ本土を直接攻撃できるICBMの重要性がより高かった。従って、その重要性を認識した後のソ連指導部は、他の軍需産業や民生部門に比してロケット産業における資源の配分や従事者の生活を優遇した。その代償として、技術や人員の多くは厚い国家機密の中に閉じこめられ、研究拠点の一部は公式地図にも記載されない秘密都市となり、ロケットの基本設計者に関してはソ連崩壊までその名前すら明さなかった。二大国は、どちらが先にブレイクスルーを果たすかお互いに知りえない状況の中、それぞれ宇宙開発の先端の成果を得ようと努力していた。実際には、宇宙開発の分野に、中でも技術的に可能な部分に傾斜して資源を投資していたソ連がアメリカに対し密かに先行していた。どちらも宇宙への競争の地ならしは済んでおり、後は号砲が鳴るのを待つだけだった。人工衛星開発競争[編集]スプートニク[編集]スプートニク1号ソ連でスプートニク打ち上げ成功を記念して発行された切手1957年10月4日、ソ連は「スプートニク1号」を搭載したR-7型ロケットを打ち上げ、世界で初めて人工衛星を地球周回軌道に送り込むことに成功した。これが宇宙開発競争の始まりであり[1]、その後、米国、フランス、日本と続いた。2001年現在、国別の衛星打上げ個数は、旧ソ連を含めたロシアが2,500個、米国1,600個で、日本は94個で3位に付けている。スプートニク1号以前、平均的なアメリカ人は合衆国が科学技術のあらゆる分野で世界に優越していると信じていたが、人工衛星技術は経済活動や軍事用途に応用できるため、先を越されたアメリカの国内ではパニックが発生し、政治論争も引き起こした。一方、スプートニクの成功はソ連において、自国の科学力や技術力を国民に示す重要な機会となり、大いに国威が発揚された。ソ連において、スプートニク打ち上げとそれに続く宇宙開発計画は大衆の非常な関心を巻き起こした。壊滅的な独ソ戦から復興したばかりのソ連にとって、スプートニクは新しい時代における技術力の挑戦の成果として国民を勇気付ける重要な意味を持っていた[2]。フォン・ブラウンのライバルで、R.7ロケットの設計者・開発責任者であり後にA1ロケットも設計したセルゲイ・コロリョフは、人工衛星にとどまらず月にコスモノートを送り込むことを目標としていた。スプートニクに対抗して、アメリカは技術的優位性を取り戻すためのあらゆる努力をすることになる。フォン・ブラウンを超える人材を生み出すため、数学など初等科学教育を充実させたことなどがその一環である[3]。アメリカの蒙ったショックやそれに対する一連の政策は、現在[いつ?]ではスプートニク・ショック（スプートニク危機）と呼ばれている。 ジョン・F・ケネディの副大統領、リンドン・ジョンソンはこれらのアメリカの政策努力のための動機をこう表現した。世界の目から見れば、宇宙での1番乗りは全てにおいて1番ということだ。宇宙での2番乗りは、何事においても2番手ということなのだ[4]。ソ連のスプートニク成功に落ち込み、恐怖におびえたアメリカの大衆は、次第にアメリカの宇宙開発計画に重大な関心を示すようになった。児童や学生はロケット打ち上げが続くのを見守り、ロケットの模型作りは人気のある娯楽になり、テレビ番組やファッション、デザイン、ロードサイドの広告看板などにもロケットブームや宇宙ブームが波及した。1960年代には「スペースエイジ」を反映した銀色のメタリックな商品やデザインが席巻した。一方巨額の宇宙開発を不安視する声も起こったが、ケネディ大統領は国民を勇気付けるため、「宇宙開発を国として支援し、数百万ドルから数千万ドルの巨費を既存兵器の増産や貧困対策に充てた方がいいのではないか、という全米に広がる懐疑論に対し勝利するつもりだ」と演説した。ウィリアム・ヘイワード・ピカリング、ジェームズ・ヴァン・アレン、ヴェルナー・フォン・ブラウンがNASAの記者会見でエクスプローラー1号の模型を掲げているスプートニク1号の打ち上げから4ヶ月後、1958年、アメリカは陸軍弾道ミサイル局により最初の人工衛星、エクスプローラー1号を打ち上げた。しかし同じころ、フロリダ半島のケープカナベラル空軍基地では衛星ヴァンガードTV3を搭載した海軍のヴァンガードが爆発し続く打ち上げも失敗するなど、相次ぐロケット打ち上げの失敗という深刻な事態が起こっていた。これら最初期の人工衛星は、すでに科学探査目的で打ち上げられていた。スプートニク1号もエクスプローラー1号も、国際地球観測年（1957年 - 1958年）のそれぞれの国の観測事業の一環として行われた。スプートニクは大気圏上層部の空気密度を測定し、エクスプローラー1号の飛行観測データからジェームズ・ヴァン・アレンは地球を取り囲むヴァン・アレン帯を発見した。衛星通信[編集]エコー2号史上初の通信衛星、プロジェクト・スコア (Project SCORE、Signal Communications Orbit Relay Equipment) は1958年12月18日に打ち上げられ、アイゼンハワー大統領のクリスマス・メッセージを全世界に中継した。その他の特筆すべき、宇宙開発競争から派生した衛星通信の例には以下のようなものがある。1960年、エコー：世界初の受動型通信衛星1962年、テルスター衛星 (Telstar)：世界最初の能動型通信衛星1972年、アニク1号 (Anik 1)：カナダ初の国内用通信衛星1974年、WESTAR：アメリカ初の国内用通信衛星1976年、MARISAT：最初の携帯端末用通信衛星その他特筆すべき衛星[編集]アメリカは初の静止衛星、シンコム3号 (Syncom-3) を1964年8月19日に打ち上げた。地表に対し相対的に静止した静止軌道に通信衛星が投入されたことは、アンテナがもはや衛星を追って向きを変える必要がなくなったことを意味した。また一般市民にとっても、いったんアンテナを固定するだけでテレビ放送など衛星通信を利用したサービスが可能になった。さらなるソビエトの成功：宇宙に動物と人間を送る[編集]動物を宇宙へ[編集]初めて周回軌道に乗った動物。ロシアのライカ犬詳細は「ライカ (犬)」および「ソ連の宇宙犬」を参照厳密に言えば、科学的研究のために意図して宇宙へ送られた最初の生物は、1946年にアメリカがドイツから捕獲したV2ロケットで大気圏外に打ち上げた果実蝿（fruit fly、ショウジョウバエの一種）であったが、これはあまり知られていない。宇宙に送られた最初の哺乳類は、1957年に人工衛星スプートニク2号で地球周回軌道を回った犬、ライカであった（ライカは、米ソによってロケットで打ち上げられ大気圏外に出ただけの蝿などの生き物と違い、はじめて軌道を回った生き物でもある）。当時、宇宙を飛行した犬を回収する技術はなく、当初はカプセルが大気圏に再突入する前にライカを薬物で安楽死させる事になっていたが、2002年に明らかになったところに拠れば、ライカはストレスとカプセル内の過熱で軌道到達後すぐに死んだという。来るべき有人宇宙飛行に向けて多くの犬を打ち上げたソ連は1960年9月18日、スプートニク5号でベルカとストレルカの二匹の犬ほかラット多数を地球周回軌道に載せ、すべて無事地球に帰還させることに成功した。ソビエトは1968年9月、月へ向かうゾンド5号に亀を載せたが、これがはじめて月周回軌道を回った生物となった。一方、アメリカの宇宙開発機関もアフリカからチンパンジーたちを輸入し、有人宇宙飛行の前に少なくとも二匹を宇宙に送り込んだ。[5]人類を宇宙へ[編集]打ち上げロケット最上段と結合した状態のボストーク宇宙船。ユーリイ・ガガーリンフリーダム7で地球に戻ったアラン・シェパード詳細は「ボストーク」および「マーキュリー計画」を参照ソ連はベルカとストレルカの2匹の犬を帰還させた1960年9月のスプートニク5号の成功を受け、同年12月までに人間を軌道上に送り込むことを計画した。しかし試験用ロケットが爆発する惨事もあり、性急な計画は数ヵ月の遅れをきたすこととなる。明けて1961年4月12日、ボストーク1号に乗ったユーリイ・ガガーリンは人類ではじめて地球軌道を周回した宇宙飛行士となった。これを記念して4月12日はロシアほか様々な国で祝日（宇宙飛行士の日）となっている。彼は社交的で労働者階級出身と体制側にとって申し分がない人物であり、ソ連の宇宙開発がまたも世界に先駆けたこと、これを可能にした共産主義体制が優越していることの広告塔となって世界各国を歴訪した。アメリカはスプートニク計画に対抗して1958年に有人宇宙飛行計画マーキュリー計画を開始、それまでの陸海空各軍個別の宇宙開発をアメリカ航空宇宙局 (NASA) に一本化させて総力を挙げて有人飛行でソ連に先行する構えだったが、またしてもソ連に先を越される結果となった。ガガーリンの飛行から23日後の1961年5月5日、フリーダム7でアラン・シェパードを宇宙へ送り込んだが、これはわずか十数分間の弾道飛行に過ぎなかった。1962年2月20日、ジョン・グレンはフレンドシップ7で地球周回軌道を3周し、最初に地球を回ったアメリカ人となった。ソビエトはさらに1962年8月11日から15日にかけてボストーク3号と4号を同時に打ち上げ、両機のランデブーのテストを行い、史上初の2人同時宇宙飛行を成功させた。1963年6月16日のボストーク6号で地球を周回したワレンチナ・テレシコワは、女性として史上初の宇宙飛行士となった。コロリョフは当初、ボストーク計画のミッションは長期にわたり少しずつ、持続的に実行する計画であったが、ニキータ・フルシチョフ第一書記はアメリカのアポロ計画の公表を知り、さらにケネディ大統領が1961年5月25日に行なわれたアメリカ連邦議会特別両院合同会議の席上、10年以内の月着陸を言明した[6] ためアポロ計画の目標が月へと変わったことを聞いて、コロリョフに速度を上げるよう命じた。ボストーク宇宙船を改良し、それまでの1人乗りではなく3人乗りにしたボスホート1号 (Voskhod 1) は1964年10月12日に打ち上げられ、ウラジーミル・コマロフ、コンスタンティン・フェオクティストフ、ボリス・イェゴロフの3人を宇宙へ運んだ。彼らは折から開催中だった東京オリンピックにメッセージを送った。また、プロパガンダのため、1871年のパリ・コミューンの旗も持参したといわれている。ボスホート1号はスペース不足もあり、乗組員が宇宙服を着なかった最初の宇宙飛行でもある。だが、この飛行よりも世界を驚かせたのは、その直後に起こったフルシチョフの突然の解任であったろう。1965年3月18日に打ち上げられたボスホート2号は2人乗りで、その一人アレクセイ・レオーノフ飛行士は人類最初の宇宙遊泳（船外活動、EVA）を実現した。しかしこのミッションは寸前のところで大惨事に終わるところだった。レオーノフはもう少しでカプセルに帰れなくなるところであり、さらに姿勢制御装置の故障と手動点火した逆推進ロケットの火力不足により、目標降下地点を1,600kmも離れて着地した。しかしフルシチョフは1964年10月に失脚、新しい指導者レオニード・ブレジネフらは宇宙開発に全力を注がないようになっていった。アメリカのジェミニ計画のため、タイタンII GLVロケットは1960年代に12機の宇宙船を打ち上げた一方、次々と人類初の成果を先取され、1962年から開始し1964年4月には無人試験飛行を行った2人乗り宇宙船「ジェミニ計画」がかすんでしまったアメリカだったが、1965年から1966年までの12機に及ぶジェミニ計画で、軌道飛行と生命維持以上の技術、すなわち月着陸に必要な長期宇宙滞在の実施、2機でのランデブーやドッキング、燃料電池や姿勢制御の実験、船外活動、帰還予定地点への確実な着陸技術などを着実に積み重ね、ソ連の次世代宇宙船ソユーズの搭載する技術をすでに実現していた。アメリカがソ連を追い抜く準備はできていた。月着陸競争[編集]アメリカとソ連双方がここまでに達成した宇宙開発の成果はそれぞれの国民に大きな誇りを与えたが、双方のイデオロギー対立が依然激しいため、少なくともどちらかの飛行士が月面を歩く時までは宇宙競争をやめることはできなかった。月面着陸という目標の達成に向けて、まず無人探査機が月に到達して上空から写真撮影などをし、安全に月面に着陸できることを証明する必要があった。無人探査機[編集]ルナ2号ソ連がスプートニクで軌道上に人工衛星を送り込んだことに対抗し、アメリカはマーキュリー計画で有人飛行において先行しようとしたほか、ソ連より先に月面に探査機を送り込もうともした。この月探査計画はパイオニア計画と呼ばれたが、失敗が続いた。ソ連は同じく月探査計画ルナ計画に挑戦し、1959年1月4日にルナ1号を打ち上げ月に接近させ、衝突させるはずがそのまま通過し、結果世界初の人工惑星となった。続く1959年9月4日のルナ2号は月面衝突に成功、世界で初めて月に人工物を送り込んだ。さらに月の裏側を撮影したルナ3号（1959年）、月面軟着陸に成功したルナ9号（1966年2月3日）など次々とアメリカに先行した。一方パイオニア計画は1959年3月3日に4号がはじめて月探査に成功したが、5号以後は別の惑星探査に切り替えられた。アメリカはパイオニア計画に代わる3つの計画を用意した。月面の写真を接写するレインジャー計画は1959年に始まったが、1961年の2機、1962年の3機はいずれも失敗し、1964年から1965年にかけての7号から9号がクレーターなどの撮影に成功した。月面の地図を製作するためのルナ・オービター計画では1966年8月から1967年8月にかけて5機が打ち上げられ、いずれも成功に終わり月面の99%におよぶ高解像度の写真が得られた。月面に軟着陸し遠隔操作で月面の土壌の硬さや組成などの探査を行うサーベイヤー計画は1966年5月から1968年1月に掛けて7機が打ち上げられ、5機が着陸と観測に成功した。いずれも、アポロ計画で有人宇宙船が安全に月軌道に到達し着陸するための技術の試験や、安全な着陸地点を探すことが目的であった。月面に人類を送る[編集]詳細は「月面着陸」、「アポロ計画」、「ソユーズ」、および「ソ連の有人月旅行計画」を参照ソ連の無人月面探査車ルノホート1号。1970年のルナ17号に搭載されたソ連は宇宙開発における「人類初」の偉業のほぼ全てでアメリカを打ち負かしたが、月面に人間を着陸させるアメリカのアポロ計画に先行することはできなかった。ソ連の宇宙開発初期の成功後、特にガガーリンの宇宙初飛行後、ケネディ大統領とジョンソン副大統領はより強力に大衆の想像力をかきたてる宇宙計画は何であるか、探し続けていた。その結果アメリカはより遠い目標である月探検を、10年以内で達成するという公約を打ち出した。1961年5月25日の連邦議会特別両院合同会議の席上、ケネディはこの公約を言明し、月軌道周回という内部研究にすぎなかったアポロ計画の目標が月着陸へと変わった。以後、マーキュリーやジェミニといった有人飛行計画やその他の月探査計画は、月に人類を送り込むアポロ計画のための技術開発や飛行士訓練、現地調査の一環となった。巨額を要するアポロ計画は多くの反対にさらされ、それゆえ左右の政治家による異論を一掃するだけの成果を上げる必要があった（右派政治家は宇宙開発費をベトナム戦争に勝つための戦費や兵器開発に回すことを主張し、左派政治家は社会福祉や根深い人種問題の解決などに予算を回すべきだと主張した）。アポロ計画推進派が主張した実利は以下のようなものがあった。アポロは次回の選挙で鍵となる州に対して経済効果を約束し、与党の勝利を確実にできる。アポロの技術は軍事利用できるため、1960年の選挙でケネディが触れた米ソの「ミサイル・ギャップ」を埋めることができる。アポロから多くの科学技術がスピンオフすることにより新製品ができ社会や経済が活性化する。ケネディはNASAの第二代長官ジェームズ・E・ウェッブとの会話で次のように話した（ジョン・F・ケネディ図書館に保管されたテープより）。われわれが行う全ては、ロシア人より先に月に降り立つ事業にきちんと結びつける必要がある…そうでなければわれわれはこんな金を使うべきではない、私は宇宙には興味がないからだ…（このような出費が）正当化されるのはただ、神に懸けてきっと数年以内に彼らを追い越し、アメリカの方が遅れていると思っている世界に成果を見せ付けて、ソ連を打ちのめすという希望があるからだ[7]。ケネディとジョンソンは世論を操縦し変えてみせた。1963年にアポロ計画を支持したアメリカ人は33%だったが、1965年までに、58%まで支持率を上昇させた。ジョンソンが大統領になった1963年以降、彼も計画を支持し続け、アポロ計画を成功に導いた。一方、ソ連は人類の月着陸に、強い積極性と消極性の両面を見せた。ソ連の指導者フルシチョフは、宇宙以外の別の分野で勝つことで満足しようという気はなかったが、月計画に巨費を投ずる気もあまりなかった。1963年10月、彼はソ連の宇宙開発計画について「現時点で月にコスモノートを送る計画はない」と述べたが、競争からは降りていないとも付け加えた。その1年後の1964年、ソ連も月着陸計画に関与することとなった。この写真のようなソ連のソユーズロケットが、信頼のおける初の地球周回軌道への輸送手段となった。ケネディは米ソ両国の飛行士による月着陸や、より高性能の気象衛星などの共同計画をソ連に提案したことがあった。フルシチョフは、ソ連の進んだ技術を盗もうとする意図を感じてこの提案を拒否した。ソ連宇宙開発の「主任設計員」コロリョフは、月に人間を送る能力を有するソユーズ宇宙船と打ち上げ用N1ロケットからなるアイデアの提案に奔走していたが、これに対しフルシチョフはコロリョフの研究機関（コロリョフ設計局）に、現行のボストークの技術を用いて改良し、さらなる「宇宙初」の事業に挑むよう命令した。しかしその裏で、コロリョフと確執のあるウラジミール・チェロメイが指揮する「チェロメイ設計局」が、有人での月 - 地球間往復ミッション（ゾンド計画）のために、全く新しい打ち上げロケットと宇宙船であるプロトンロケットとゾンド宇宙船開発に着手していた。1964年、フルシチョフ失脚後の新しい指導部はコロリョフの月着陸計画に全面的な支援を与え、全ての有人飛行計画を彼の指揮下に置かせた。月着陸ミッション・ソユーズL3計画計画の始まりである。だが1966年にコロリョフが急死し、最初のソユーズ宇宙船・ソユーズ1号が1967年に死亡事故を起こすと、ソ連の有人月旅行計画は指導者を失ったことと犠牲に敏感になったことで破綻をきたすようになった。ソ連は月着陸船を建造し、アレクセイ・レオーノフを月面に立たせるはずの月旅行計画のために飛行士の選抜を行った。しかし1969年に肝心のN1ロケットが打ち上げに失敗し、以後どうしても打ち上げを成功させることができなかった。このため有人月着陸計画は遅れが生じ、ついには中止の憂き目にあってしまった。アポロ11号を打ち上げるサターンVロケットアポロ11号、月に一番乗り[編集]月面でポーズを取るバズ・オルドリン。ソ連の無人探査機（ルナ計画やゾンド計画）がアメリカの宇宙船よりも先に月軌道に達し、着陸もしたものの、月面に足跡を残した最初の人類はアメリカ人のニール・アームストロングとなった。アポロ11号の月着陸船の着陸の翌日、1969年7月21日のことであった。アポロ11号の船長アームストロングは、司令船パイロットのマイケル・コリンズ、月着陸船パイロットエドウィン・\"バズ\"・オルドリンのバックアップのもと、世界中で5億人が見たという大イベントを成功させた。多くの評論家達はこの月着陸を20世紀の決定的瞬間の一つであると認識しており、またアームストロングの月面に足を踏み出した際の言葉は長く人々の記憶に残っている。「これは一人の人間には小さな一歩だが、人類にとっては大きな飛躍だ」（That's one small step for [a] man, one giant leap for mankind.）なお、それまでの他の国際間競争とは異なり、宇宙開発競争は領土拡張の欲望とは無縁のまま保たれた。月着陸成功後、アメリカは月面のいかなる部分の領有も明白に否認した。他の宇宙技術競争[編集]惑星へのミッション[編集]詳細は「宇宙探査機」、「金星」、および「火星探査機」を参照金星は探査機が通過した初の地球以外の惑星となった月ほど華やかではなかったが、アメリカとソ連は無人惑星探査でも競争を繰り広げた。ソ連は1960年、金星と火星の両方に史上初めての惑星探査機を送り込んだ。その一方、アメリカの惑星探査計画マリナー計画も大きな結果を残した。金星に無事到達し惑星フライバイを行った最初の宇宙船はアメリカのマリナー2号で、1962年12月14日のことであった。マリナー2号は、金星表面の気温の高さと大気の濃度の高さという驚くべきデータを送信してきた。しかしマリナー2号にはカメラがなかったので、地球にある望遠鏡の能力では見ることのできない惑星表面の鮮明な映像といった印象的なデータを送ってくることができず、その成し遂げた発見は大衆の関心を惹きつけなかった。ソ連は金星に対しベネラ計画で探査を行い、1971年に打ち上げられたベネラ7号は初めて金星に着地した宇宙船となった。ベネラ9号は金星の高熱で壊れる寸前、金星からの映像送信に成功し、人類ははじめて他の惑星の地表の光景を目にすることになった。16号まであるベネラ計画の中でもこの二回は傑出した成功であったが、7号以前のベネラ探査機にも、フライバイを行い金星に着地する意図があった（もっとも大気中で燃え尽きている）。後に続くベネラ探査機では着陸のほか、金星の上からレーダーを使って高精細な金星表面の地図を作成した。1965年に打ち上げられたアメリカのマリナー4号は最初に火星をフライバイした探査機となった。マリナー4号の送信した惑星直近からの映像は、人類の多くにとって予想もしないような荒れ果てた風景だった。また1971年に打ち上げられたソ連のマルス3号は最初に火星に着陸した探査機となったが、砂嵐のため故障し映像の送信には失敗した。同年にアメリカが打ち上げたマリナー9号は初めて他の惑星の人工衛星となり、7,000枚を越える表面画像をもたらした。この情報に基いて1976年に着陸したバイキング計画の1号・2号が、最初に火星表面からの映像送信に成功した探査機となった。1974年、アメリカは金星を通過して水星に向かうマリナー10号を打ち上げた。これは最初の、そして20世紀では唯一の、水星をフライバイした探査機となった。木星以遠はアメリカの独擅場である。アメリカはパイオニア計画を進めパイオニア10号を打ち上げ、1973年、木星接近とフライバイに成功した。パイオニア11号はさらに土星に1979年に接近し、続くボイジャー計画でボイジャー2号が天王星と海王星の最接近とフライバイに成功した。ランデブー、ドッキング、ステーション[編集]最初の宇宙空間での宇宙船同士のランデブーは1965年12月15日、アメリカのジェミニ6-A号と7号の間で行われた。これは5kmの距離まで接近したボストーク3号・4号よりも近距離のものである。その後継機、ジェミニ8号は1966年3月16日、無人衛星と史上初の宇宙空間でのドッキングに成功した。最初の自動操縦による宇宙でのドッキングは1967年10月30日に無人機コスモス186号と188号（正体は、両方とも無人のソユーズ宇宙船）が行った。これらはいずれも来るべき月着陸に向けて、宇宙船本体と着陸船の切り離しや接続の実験のために行われている。最初の海からの打ち上げは1967年4月26日、アメリカのスカウトBによるものである。最初の宇宙ステーションはソ連のサリュートであった。サリュート1号は1971年6月7日に運用を開始した。宇宙の軍事利用競争[編集]宇宙の科学的研究と並行して、宇宙の軍事利用のための開発に向けた動きも米ソ双方で進められていた。これらは注目こそ浴びなかったものの、開発競争以外の何者でもなかった。アメリカではNASAが宇宙開発を一元化した後も、軍は独自の宇宙開発を続けていた。スプートニク1号の打ち上げ以前から、米ソ両国は偵察衛星の開発計画に着手していた。ソビエトのゼニット衛星は大気圏再突入カプセルに陸上撮影用のカメラを収めた地表撮影衛星で、コロリョフが軍事・研究両方に使えるよう設計したものであったが、これがボストーク宇宙船のオリジナルになった。ゼニット・スパイ衛星はアメリカ空軍の衛星・ディスカバラーと同じような技術を持っており実用化の先行に向けて競い合っていた。1960年8月のディスカバラー13号では、史上はじめて軌道上からのカプセル回収に成功したが、これはソ連による衛星からのカプセル回収にわずか1日先んじた。こうした偵察衛星など軍事衛星の脅威に対し、米ソ双方が衛星攻撃兵器を開発した時期もあった。米ソ双方が大規模な軍事用宇宙計画を立てたが、「アメリカが模型だけを完成させて計画を中断する一方、ソ連は同様の計画の実機を建造し、場合によっては軌道上に打ち上げる」というパターンがしばしば繰り返された。超音速大陸間巡航ミサイル。アメリカの「ナヴァホ・ミサイル」（試験計画中止）対、ソ連の「ブラン巡航ミサイル」（計画のみ）有翼宇宙船。米空軍のX-20ダイナソア（Dyna-Soar、模型のみ）対、ソ連のMiG-105（試験飛行）衛星偵察有人カプセル。米空軍のブルー・ジェミニ（模型のみ）対、ソ連のソユーズ偵察船（計画のみ）軍事用宇宙ステーション。米空軍の有人軌道実験室（MOL、Manned Orbiting Laboratory、計画のみ）対、ソ連のアルマース計画（Almaz、修正のうえサリュート2号、3号、5号として実現）大気圏突入時の耐熱シールドにハッチがある軍事用有人カプセル。米空軍のジェミニB（飛行士なしで試験飛行）対、ソ連のVA-TKS、別名メルキュール・カプセル（TKSの一部として無人で飛行）軍事用宇宙ステーションへの輸送機。米空軍のジェミニ・フェリー（計画のみ）対、ソ連のTKS（無人で打ち上げられ、サリュートにドッキング成功）米ソによる「宇宙開発競争」の変化[編集]デタント[編集]スプートニク1号の打ち上げは宇宙開発競争の始まりであると明確に言えるが、開発競争の緩慢化がいつであるかは議論がある。宇宙開発競争は1960年代に最も熱くなり、1969年に月着陸にまで至ってしまうほどのすさまじい勢いで進んだ。アポロ11号に引き続きアメリカは5回の有人月着陸に成功したが、アメリカの宇宙科学者たちは次の戦いの場に転じた。様々なデータを集めるスカイラブ、宇宙との往復・再利用が可能なスペースシャトルである。アメリカ人は、初めて人間を月に送ることに成功した時点で、アメリカは非公式の戦争である宇宙開発競争に勝利した、と主張するであろう。一方、ソ連の科学者達は有人月飛行計画をこっそり中止したものの別の分野で独自の宇宙開発計画を進めており、競争での敗北などは決して認めなかったであろう。いずれにしても、1970年代の冷戦の緊張緩和（デタント）が進むにつれ、また米ソ以外の国が宇宙開発に着手するにつれ、二つの超大国が「競争」を続けることへの注目は薄らいでいった。米ソ両国は有人軍事宇宙計画を進めていたが、上述のとおり中止などを強いられている。アメリカ空軍はタイタン・ミサイルを用いてダイナソア有翼宇宙船（超音速グライダー）を打ち上げ、敵国の衛星を迎撃する計画を打ち出していた。有人軌道研究室（MOL）計画がダイナソア計画に取って代わり、ジェミニ計画の機材を用いて偵察ミッションを行うはずだったが、これも中止の憂き目を見た。ソ連が進めさせた同様の有人軍事宇宙ステーション計画・アルマーズ計画はサリュート計画に統合させられた。アポロ・ソユーズテスト計画、競争の終結[編集]テレビ視聴者の多くは、宇宙開発競争はアポロ11号をもって絶頂に達した、または終結したと感じ、以後のアポロ計画には急速に無関心になった。アメリカにおいて、国民の無関心によって宇宙開発競争の動機は薄れ、競争のトーンはゆるやかになってしまい、その後アポロ計画の後半とアポロ応用計画は中止となった。その他の人々、例えば宇宙開発史学者のキャロル・スコット (Carole Scott) やルーマニア人のフロリン・ポップ (Florin Pop) 博士の冷戦研究などによれば、宇宙開発競争のより明らかな終わりは1975年の米ソ共同でのアポロ・ソユーズテスト計画であると考えられている[8]。ソビエトのソユーズ19号とアメリカのアポロ18号は宇宙空間でランデブーの上ドッキングし、「敵国」の宇宙飛行士をお互いの宇宙船の中に招き入れ、共同での科学実験を行った。双方の国はそれぞれの宇宙開発に固執していたが、互いに大きく異なった分野に方向を変えてゆき、アポロ・ソユーズ計画の後は、二大国の「競争」の継続に注目することは時代遅れとなった。SDI構想とソ連崩壊[編集]この共同計画の時点においてもソ連指導部は、スペースシャトル計画へのアメリカ空軍の関与の見通しや、スペースシャトル計画がブランおよびエネルギアの計画と競合関係にあることに警告を発していた。1980年代初期、デタントが終結して再び冷戦が激しくなった頃、アメリカのロナルド・レーガン政権が発表したミサイル迎撃システム・戦略防衛構想 (SDI) の開始によって宇宙兵器開発競争は一時的に激化したが、これは両国の経済を圧迫し、1989年の共産圏崩壊と1991年のソ連崩壊を加速させる結果となった。競争にかかわった組織、予算、経済効果[編集]宇宙開発を成功裏に組織するためには巨額の経費と多くの官僚が必要であるとの認識から、国家的な宇宙開発機関が創設された。アメリカ合衆国とソビエト連邦は、宇宙開発のための科学的・産業的要請にこたえるためだけに絞った計画をそれぞれ立ち上げた。アメリカのNASA創設[編集]アポロ11号の打ち上げ詳細は「アメリカ合衆国の宇宙開発」を参照当初のアメリカの宇宙開発は軍主導で行われたが、ロケット（ミサイル）を大砲の延長と主張する陸軍、気象観測のための重要機械として衛星とロケットを重視する海軍、空を飛ぶロケットは航空分野であるとする空軍がそれぞれ主導権を主張して譲らず混乱した。陸軍のエクスプローラー1号と海軍のヴァンガード1号はどちらを先に打ち上げるかでも意見の相違があり、その間にソ連のスプートニクに先を越される形になった。1958年7月29日、アイゼンハワー大統領は国家航空宇宙法 (National Aeronautics and Space Act of 1958) に署名し、政府や空軍・海軍・陸軍の研究機関を統合するアメリカ航空宇宙局 (NASA) が発足した。1958年10月1日の業務開始の時点では、NASAは主に、46年間アメリカの航空技術開発にかかわってきたアメリカ航空諮問委員会 (NACA: National Advisory Committee for Aeronautics) から引き継いだ4つの研究所と8,000人ばかりの従業員から成り立っていた。前身であるNACAは年間500万ドルの予算で活動していたが、NASAの予算は加速的に増加し、下請けとなる民間の契約業者の相当額の分も合わせて年間50億ドルを超えるまでに達した。NASAの成功が頂点に達したアポロ11号の月往復には、200億から250億ドルがかかったと見積もられている。ソ連の予算不足と組織乱立[編集]詳細は「ソビエト連邦の宇宙開発」を参照信頼できる統計がないため、特にフルシチョフの時期については不明な点が多いため、アメリカとソ連の宇宙予算を比較するのは難しい。しかし1989年、当時のソ連軍の参謀総長だったミハイル・アレクセイヴィッチ・モイセーエフは、ソ連はこの年、宇宙計画に69億ルーブル（約40億ドル）を割当てたと語っている[9]。他のソ連の政府関係者は、全ての有人計画の支出を合わせると、計画が続いていた間中ずっとそのくらいの予算はかけていただろうと見積もっており、あわせてその他の非公式のもっと安い見積（年約45億ルーブル）も紹介している。これらソ連の使った金額の分かりにくさに加えて、こうした米ソの予算比較にあたっては、ソ連をより強く見せ、さらに西側のアナリストを混乱させようという目的のプロパガンダも計算に入れなければならない。潤沢な予算を偽っていた可能性もある。ソ連の宇宙開発のための努力に障害となったのは、予算だけではなく内部の研究機関同士の争いもあった。ソ連はNASAのような統一した組織がなく（ロシア連邦宇宙局が発足したのは1990年代である）、科学技術分野における政治面の問題や個人同士の問題が多すぎたためソ連の前進は阻まれていた。ソ連の主任設計員（チーフ・デザイナー）たちはそれぞれの設計局を持ち、それぞれの独自のアイデアを抱え、共産党の首脳たちに個人的支援を求めていた。1964年の時点で、主任設計員たちはさまざまな計画を乱立させ、ソ連は設計意図の異なる宇宙船や打ち上げロケットの30個もの計画案を別々に進めていた。独創的な研究者だったコロリョフが1966年に死んだ後、ソ連の宇宙計画はアメリカの宇宙計画に反応しやすくなり、同格を維持することに意を注ぐようになった。たとえば1974年、ソ連は宇宙計画を再編成し、アメリカのスペースシャトルの複製のようなブラン宇宙往還機による「エネルギア計画」を立ち上げている。ソ連はまた、経済的な不利とも直面しながら宇宙開発を進めなければならなかった。ソ連の経済は世界第二位の規模だったが、一方のアメリカ経済は世界一だった。ソ連の宇宙計画は、予算の不足と、効率的でない組織に予算が分散して無駄に使われたことから、予算を集中させて実現した宇宙開発初期の優位を失っていった。ソ連研究者の中には、宇宙開発競争の経済的コストの高さが、軍拡競争の極端に高い支出ともあいまって、1970年代末から1980年代にかけてのソ連の経済危機を深刻にし、ソ連崩壊の一因となったと論じている者もいる。宇宙開発での犠牲[編集]有人宇宙船は、国威発揚の側面が強く、そのリスクとコストの高さに比べ享受できる利益が少ないとされる。それが2003年に中国が世界で3番目に有人ロケットの打ち上げに成功するまで、ESAや日本の後続がなかった理由である。飛行士[編集]アメリカのアポロ15号月着陸船が月を離れたとき、飛行士達は、人類が月に達するまでの間に米ソ両国で犠牲となった飛行士達の記念碑を月面に残していった。アメリカでは、宇宙旅行やその準備で直接犠牲になった飛行士は、アポロ1号のバージル・グリソム、エドワード・ホワイト、ロジャー・チャフィーの3人が最初だった。彼らは1967年1月27日、地上での訓練中に司令船の中で火災に巻き込まれ死亡した。ソ連では、ソユーズ1号とソユーズ11号で犠牲者が出た。1967年4月23日に打ち上げられたソユーズ1号はウラジーミル・コマロフ大佐が操縦していたが、大気圏再突入後パラシュートが開かずカプセルが地表に激突して犠牲となった。1971年、ソユーズ11号の三人の飛行士、ゲオルギー・ドブロボルスキー、ウラディスラフ・ボルコフ、ビクトル・パツァーエフは宇宙ステーション・サリュート1号へのドッキングと乗り込みに成功する快挙を成し遂げたが、地球への帰還の際に空気漏れを起こし、3人とも犠牲となった。米ソの宇宙開発競争が一段落した後に運行を開始したスペースシャトルでは、1986年1月28日にチャレンジャー号が、2003年2月1日にコロンビア号が事故を起こし、それぞれ7人が死亡している。その他、訓練中に死亡した飛行士もいる。たとえばT-38訓練機の事故で4人の飛行士が死亡した。ユーリイ・ガガーリンも1968年、訓練中にMiG-15の墜落で死亡している。アポロ13号や何機かのソユーズ、ミールとプログレスの衝突など、一歩間違えば死者が出ていたような事故も何度か起こっている。その他の人的被害[編集]打ち上げ用ロケットの爆発などにより、地上スタッフや周辺住民が死傷したこともある。1960年のR-16ロケット爆発事故（ニェジェーリンの大惨事）や1996年の長征ロケット墜落事故は特に被害が大きく、それぞれ数百人の犠牲者が出たと言われるが、詳細は明らかにされていない。両国財政・経済[編集]両国が威信をかけて行った開発競争は、人類史上に輝かしい成果を残す一方で、両国の財政に大きな負担をもたらした。もちろんその代償を負わされたのは一般の国民である。特に、ソビエト連邦では宇宙開発と軍事関連の生産が優先された結果、経済が疲弊してしまった。このため、一般国民に必要な生活物資が不足する事態に陥ってしまった。宇宙開発競争の遺産・技術と教育の進歩[編集]この宇宙開発競争の時期を通して、科学技術、とりわけ航空技術と電気通信技術が長足の進歩を遂げた。しかしながら、宇宙開発競争の効果はロケット、物理学、天文学やさらに広い範囲にまで及んでおり、「スペースエイジ・テクノロジー」は家庭用品から枯葉剤までのさまざまな分野に応用されている。また、競争に勝つためのアメリカの政策によって、学校での理科学習にも大きな変化が加えられている。アメリカ人が宇宙競争の当初に抱いた、あっという間にソ連の後塵を拝するまでに落ちてしまったという感情は、学校教育で数学と物理により重点を置くべきだという議員や教育者の運動にすぐさまつながった。1958年には「国防教育法 (National Defense Education Act)」が制定され、初等教育から大学院にいたるまでの数学や物理の教育を充実させるため予算は大きく拡充した。こうした教育政策に育てられた科学者たちは宇宙開発技術の研究に携わり多くの成果を生んだ。またこうして生み出された技術は台所用品からスポーツ用品まで民生品にも適用されている。乾燥食品、調理済み食品 (ready-to-eat foods)、保乾性衣服、曇り止めスキーゴーグルなども宇宙開発にルーツを持つ製品である。マイクロ・テクノロジーももともとは宇宙開発競争にともなう研究によりその進化が加速されたが、時間の計測から携帯音楽プレーヤーまで工業や日常生活のあらゆる分野に恩恵を与えている。今日では1,000個以上の人工衛星（そして計測不能な数のスペースデブリ）が地球を回る軌道上にあり、衛星は放送や通信データを中継し、気象・植生・人の動きなどのデータを遠隔測定（リモートセンシング）によって地上にデータを送っている。アメリカはこうして電子工学、遠隔操作、車両誘導、ロボット制御のトップランナーになった。また、ソ連は冷戦終了後もロケット技術の分野でリーダーであり続けている。宇宙開発競争の再来[編集]詳細は「アジアの宇宙競争」を参照米ソ宇宙開発競争が終了してからの長い間、宇宙開発の進度はゆるやかになったが前進は続いている。アメリカはガガーリンの有人飛行から20年後の1981年4月12日、初の再利用可能な宇宙往還機、スペースシャトルを打ち上げた。1988年11月15日にはソ連は初の（そして唯一の）再利用可能な無人往還機、ブランを打ち上げた。その他、日欧を含めて様々な国が探査機、人工衛星、宇宙望遠鏡などを打ち上げている。日本[編集]「日本の宇宙開発」および「PLANET計画」を参照特筆して1990年代初頭までは、商用衛星・ロケットなど実用衛星への参入に積極的であった。しかし、衛星の国際調達を求める日米通商協議での日米合意（事実上、米国からの衛星輸入を義務付けるもの）によって頓挫させられた過去がある。宇宙開発は巨額のコストが掛かる為、宇宙産業が成熟段階を迎えるまでは、国による需要が見込まれなければ、国内の宇宙産業の発展は滞ってしまう（それが真の米国の狙いであったとも言われる）。それでも日本の宇宙開発は着々と進んでいる。とくにPLANET計画による地球外天体の探査などに顕著であり、月探査衛星かぐやが活躍したほか、イオンエンジンの長期可動実証機と小惑星探査を目標に開発されたはやぶさで小惑星からのサンプルリターンに成功している。地球外天体の探査でははやぶさ2、ベピ・コロンボなどの打ち上げが予定されている。また、国際宇宙ステーションへの補給機であるこうのとりをH-IIBで打ち上げており、アメリカのスペースシャトルの引退後は最大の補給機になる予定である。有人宇宙飛行には積極的ではないもののHOPE-Xという日本版スペースシャトル計画が存在し、現在もスペースプレーンという名称で研究が進行中である。以前は宇宙開発の中で行われなかった情報収集衛星も打ち上げ、4基体制になっており、宇宙基本法で安全保障用の利用も行えるように法律を変更した。近年は米国だけでなく欧州の宇宙機関との協力もみられる。欧州・ロシアの挑戦[編集]「イギリスの宇宙開発」を参照スペースシャトル・コロンビアのエンジン点火、1981年 (NASA)「第二の宇宙開発競争」は、日本やフランスが衛星打ち上げに成功した事や、20世紀末、欧州宇宙機関 (ESA) アリアン4ロケットによって商用ロケットの分野でアメリカからリードを奪い、NASAと無人宇宙探査の分野で競い始めたことからはじまっている。ESAの宇宙開発への意欲は、「2030年までに火星に人類を送り込む」という目標に向けて月や火星にさまざまな有人・無人探査事業をおこなうというオーロラ計画のような野心的な計画で絶頂に達した。ESAは2005年の段階でロシアと組んで2011年打ち上げ予定の無人火星探査機エクソマーズ (ExoMars) の計画を進めている。これに対し、アメリカのジョージ・W・ブッシュ大統領は2004年、新しい有人宇宙船オリオンの建造と予定ミッションの大まかな時間軸を示した（当面はスペースシャトル退役後の国際宇宙ステーションへの人員輸送用として、さらに月への有人飛行計画や2030年までの火星計画も検討されている）。このように火星に対して欧米などの宇宙機関が同じような計画を持つこととなった。またロシア連邦宇宙局は、アメリカのオリオンの対抗機となるソユーズ後継機・クリーペルの開発を進め、まだ計画中のオリオンより早い2011年打ち上げを目指しており、ESAも共同出資・共同開発の可否の検討を進めている。クリーペルに関しては日本の宇宙航空研究開発機構 (JAXA) もロシアから参加を呼びかけられている。中国、インドなどの台頭[編集]「中国の宇宙開発」を参照その他、新興国のインド、イスラエル、中国などが宇宙探査競争に参加できる能力を有している。中でも、新興国の中では、インドと中国がESAやNASAと組まず米日欧を追い上げているといわれる。特に中国の場合、中国国家航天局による有人宇宙船計画、「神舟計画」を進め、神舟5号と神舟6号の有人飛行を成功させた（有人船成功国としては3番目、人工衛星では5番目）。さらに2007年には衛星破壊実験を行い宇宙軍拡競争も誘発しようとしているほか、独自の宇宙ステーション計画、無人月探査計画「嫦娥計画」、有人での月および火星探査計画をも計画している。またインドはインド宇宙研究機関による宇宙開発を進め、2007年には、国産ロケットでイタリアの天文観測衛星を打ち上げたのを始め、2008年4月には、国産地球観測衛星2機や日本の小型衛星2機を含めた、世界5カ国の計10基を搭載した国産ロケット「PSLV-C9」をサティシュ・ダワン宇宙センターから打ち上げ（一度に打ち上げた衛星の数としては世界最多）、商用衛星ビジネスへの参入に積極的である。さらに、2008年には更に無人月探査機「チャンドラヤーン1号」の打ち上げや、独力での有人宇宙飛行などを計画し、猛烈に中国を追い上げている。ブラジル、韓国、イランなど[編集]「ブラジルの宇宙開発」も参照ブラジル、韓国、イランなども（外国の技術を取り入れながら）自主開発ロケットで衛星打ち上げを目指している。ブラジルは1997年、1999年、2003年と3回、自主開発ロケットで衛星打ち上げを試みたが、いずれも失敗している。韓国は既に衛星開発能力を有し、2009年および2010年にアンガラ・ロケットの第1段をベースとしたKSLV-1ロケットを打ち上げたがいずれも失敗した。イランは2007年2月及び2008年2月にロケットの打ち上げ実験に成功し、2009年2月には初の国産衛星「オミード」の打ち上げに成功している。これらに使用されたロケットは、1998年に開発した長距離弾道ミサイル「シャハブ3」の改良型である可能性が高い。民間宇宙開発競争[編集]ホワイト・ナイトに搭載されて飛行中のスペースシップワン米ソ間や米欧間、米中間の宇宙競争のような、国同士の競争でない「宇宙競争」も民間分野で起こっている。初期の民間宇宙競争は軌道上に観光客を送り込む「宇宙旅行」をめぐって行われた。2001年4月28日、アメリカ人実業家のデニス・チトー (Dennis Tito) は約2,000万ドルの費用を支払い、ロシアのソユーズTM-32に乗って国際宇宙ステーションを訪問し、史上初の全額自己負担による宇宙観光客となり世界を驚かせた。民間による有人宇宙船打ち上げ（弾道飛行でもかまわない）に対し1,000万ドルの賞金を懸けた「アンサリ・エックス賞」は、民間企業同士による新しい宇宙競争への期待を高めた。2004年10月、スペースシップワンが高度100kmの有人飛行に成功、民間初の有人宇宙船となり賞金を手にした。2004年の暮れ、ヴァージングループを率いるイギリスの実業家リチャード・ブランソンは宇宙旅行会社「ヴァージン・ギャラクティック」の設立を発表、スペースシップワンの技術供与を受けて2008年までに旅客を乗せて弾道飛行を行うことにしている。人工衛星打ち上げ実績[編集]詳細は「人工衛星#打ち上げ能力を有する国」を参照衛星を自力で打ち上げた実績を持つ国は多くない。打ち上げ順にソ連（現ロシア他）、米国、フランス、日本、中国、英国、インド、イスラエル、イランの9ヶ国である（2009年2月現在）。その他、国際機関や多国籍企業も打上げている。カザフスタン（旧ソ連）はロケット・衛星開発技術と射場を持ち、ウクライナ（同）は射場は持たないが、ロケット・衛星開発技術を有する。世界の衛星打上げ累計個数は、2006年12月末時点で5,736個。CISと米国だけで約88%を占める。日本は119個で、世界第3位に付けている[10]。脚注[編集]^ “Sputnik and The Dawn of the Space Age”.  NASA. 2009年6月27日閲覧。^ Both Sides of the “Moon”, an October 12, 1957 leader from The Economist^ Dow, Peter. “Sputnik Revisited: Historical Perspectives on Science Reform”. symposium hosted by the Center for Science, Mathematics, and Engineering Education. http://www.nas.edu/sputnik/dow1.htm 2007年3月20日閲覧。. ^ ジョンソンからケネディへの1961年4月28日の書簡^ 1997年6月、アメリカ空軍はまだ生き残っていたチンパンジーたちを議会承認のもと民間への資産分割のため放出すると発表した。2ヵ月後チンパンジーはニューメキシコ州の研究施設に譲渡されたが、動物保護団体の訴訟により1999年にチンパンジーは南フロリダの自然保護区に放されることになった。^ http://www.jfklibrary.org/Historical+Resources/Archives/Reference+Desk/Speeches/JFK/Urgent+National+Needs+Page+4.htm^ A Historic Meeting on Human Spaceflight, history.nasa.gov, November 20, 1962. (Excerpt from page 17 of .pdf transcript.)^ Space Exploration, Carole Scott, Eyewitness Books, 1997^ James Oberg、『Final Frontier』誌、『The New Book of Popular Science Annual』1992年版に再掲載^ http://www.sjac.or.jp/sjac_gaiyo/info/sekai_h19.pdf参考文献[編集]An Unfinished Life: John F. Kennedy, 1917-1963, Robert Dallek (2003). ISBN 0-316172-38-3Arrows to the Moon: Avro's Engineers and the Space Race , Chris Gainor (2001). ISBN 1-896522-83-1Fallen Astronauts: Heroes Who Died Reaching for the Moon, Colin Burgess, Kate Doolan, Bert Vis (2003). ISBN 0803262124Light This Candle : The Life & Times of Alan Shepard--America's First Spaceman, Neal Thompson (2004). ISBN 0609610015The New Columbia Encyclopedia, Col.Univ.Press (1975).The Right Stuff, Tom Wolfe (pbk ed. 2001). ISBN 0553381350 ISBN 0613916670Russia in Space: The Failed Frontier?, Brian Harvey (2001). ISBN 1852332034The Soviet Space Race With Apollo, Asif A. Siddiqi (2003). ISBN 0813026288Soyuz: A Universal Spacecraft, Rex Hall, David J. Shayler (2003). ISBN 1852336579Space for Women: A History of Women With the Right Stuff, Pamela Freni (2002). ISBN 1931643121Space Exploration, Carole Scott, Eyewitness Books, 1997Sputnik and the Soviet Space Challenge, Asif A. Siddiqi (2003). ISBN 081302627XStages to Saturn: A Technological History of the Apollo/Saturn Launch Vehicles, Roger E. Bilstein (2003). ISBN 0813026911Yeager: An Autobiography, Chuck Yeager (1986). ISBN 0553256742関連項目[編集]宇宙開発ロケット・ミサイル技術の年表世界の宇宙開発一覧 / アジアの宇宙競争宇宙開発競争の年表1957年 - 1969年の宇宙開発の重大事項月面着陸人工衛星アメリカ[編集]アメリカ合衆国の宇宙開発アメリカ航空宇宙局 (NASA)タイタン (ロケット)マーキュリー計画ジェミニ計画アポロ計画ソ連[編集]ソビエト連邦の宇宙開発 - ソ連の有人月旅行計画スプートニクボストークソユーズ外部リンク[編集]宇宙航空研究開発機構Wernher Von Braun to Vice President Johnson (PDF, 568.1kB) ヴェルナー・フォン・ブラウンからジョンソン副大統領への手紙をスキャンしたPDFファイル。ケネディ大統領からジョンソンに対する手紙への返信のため書かれたもので、フォン・ブラウンはNASAマーシャル宇宙センター所長としての公式な立場でなく個人としての立場からアメリカとソ連の能力について述べている。彼の分析は、アメリカは有人月着陸を進めることでソ連を打ち負かす「優れた機会」を手にしているという個人的意見を含み、全力を挙げて取り組めば1967年から68年までに目標は達成できるとも付け加えている。\"America's Space Program: Exploring a New Frontier\", a National Park Service Teaching with Historic Places (TwHP) lesson planWhy Did the USSR Lose the Moon Race? - プラウダ・オンライン2002年12月3日付記事、『なぜソ連は月競争に負けたのか?』Space Race Exhibition 国立航空宇宙博物館TheSpaceRace.com – マーキュリー、ジェミニ、アポロ計画について月への宇宙競争年表、1960年 - 1969年Paul Lucas、ソ連のスペース・エイジの影月到達競争年表 - russianspaceweb.com表・話・編・歴冷戦参加：西側諸国 - 東側諸国 - （非同盟諸国）1940年代冷戦の勃発（第二次世界大戦の会談・会議） - 45年：ヤルタ会談 - ドイツ分割占領 -　ポツダム会談 - 日本占領 - 朝鮮占領 - 46年：鉄のカーテン - ギリシャ内戦 - 国共内戦 - 第一次インドシナ戦争 - 47年：トルーマン・ドクトリン - X論文 - マーシャル・プラン - モロトフ・プラン - 第一次印パ戦争 - 48年：ベルリン封鎖 - 朝鮮南北分断 - チェコスロバキア政変 - 逆コース - 49年：ベトナム国成立 - 中華人民共和国成立1950年代波及と雪解け50年：マッカーシズム - レッドパージ - ローゼンバーグ事件 - 朝鮮戦争 - チベット征服 - 53年：ラズエズノイ号事件 - アーバーダーン危機 - ラオス内戦 - 54年：PBSUCCESS作戦 - キャセイ・パシフィック航空機撃墜事件 - ベトナム南北分断 - 55年：カシミールプリンセス号爆破事件 - 56年：スターリン批判 - ハンガリー動乱 - 第二次中東戦争 - 57年：スプートニク・ショック - 58年：金門砲戦 - 59年：新潟日赤センター爆破未遂事件 - キューバ革命 - 黒いジェット機事件 - 中印国境紛争1960年代対立の激化60年：60年安保 - コンゴ動乱 - U-2撃墜事件 - 中ソ対立 - 61年：ピッグス湾事件 - ウィーン会談 - ベルリンの壁建設 - 5・16軍事クーデター - 62年：キューバ危機 - 北イエメン内戦 - 63年：PTBT - 64年：トンキン湾事件 - フルシチョフ失脚 - プロヒューモ事件 - ブラジル親米派クーデター 65年：ベトナム戦争 - ドミニカ内戦 - 第二次印パ戦争 - 9月30日事件 - 66年：文化大革命 - 67年：第三次中東戦争 - 東ベルリン事件 - 68年：プラハの春 - 青瓦台襲撃未遂事件 - プエブロ号事件 - NPT - 69年：アメリカ海軍偵察機撃墜事件 - 大韓航空機ハイジャック事件 - 中ソ国境紛争1970年代米ソデタント70年：カンボジア内戦 - 71年：加賀市沖不審船事件 - 林彪事件 - ピンポン外交 - バングラデシュ独立戦争 - 72年：ニクソン訪中 - 日中国交正常化 - SALT-I - ABM制限条約 - 東西ドイツ基本条約 - 73年：渡辺秀子さん2児拉致事件 -チリ・クーデター - 第四次中東戦争 - 74年：ギヨーム事件 - 文世光事件 - 75年：CSCE設立 - アンゴラ内戦 - マヤグエース号事件 - 76年：南北ベトナム統一 - ポプラ事件 - ベレンコ中尉亡命事件 - 汚い戦争 - 77年：北朝鮮による日本人拉致 - ドイツの秋 - モザンビーク内戦 - 78年：オガデン戦争 - 大韓航空機銃撃事件 - 79年：中越戦争 - 台湾関係法締結 - イラン革命 - 中米紛争 - ニカラグア革命・コントラ戦争 - SALT-II - アフガニスタン侵攻1980年代再激化と終結80年：モスクワオリンピックボイコット - ボローニャ駅爆破テロ事件 - 81年：ソ連潜水艦座礁事件 - P2事件 - 82年：レフチェンコ事件 - 83年：ラングーン事件 - レバノン戦争 - 悪の帝国発言 - 戦略防衛構想 - 大韓航空機撃墜事件 - ラングーン事件 - グレナダ侵攻 - 84年：ロサンゼルスオリンピックボイコット - 85年：ペレストロイカ開始 - 86年：イラン・コントラ事件 - 87年：INF全廃条約 - 88年：パンアメリカン航空103便爆破事件 -89年：六四天安門事件 - ベルリンの壁崩壊 - 東欧革命 - マルタ会談分断国家Template:分断国家軍事機構北大西洋条約機構 - ワルシャワ条約機構 - 東南アジア条約機構 - 中央条約機構 - 米州機構 - 太平洋安全保障条約軍事条約（二国間）日本国とアメリカ合衆国との間の安全保障条約・日本国とアメリカ合衆国との間の相互協力及び安全保障条約 - 米華相互防衛条約 - 台湾関係法 - 米韓相互防衛条約 - 米比相互防衛条約 - 中ソ同盟 - 中朝友好協力相互援助条約政治経済機構欧州経済協力機構 - 経済協力開発機構 - 経済相互援助会議 - コミンフォルム - 米州機構 - 南米諸国連合 - 欧州共同体 - 全欧安全保障協力会議 - 欧州会議 - 北欧理事会 - アラブ連盟 - 東南アジア諸国連合 - アフリカ連合 - 地中海連合諜報機関CIA - KGB - SIS (MI6) - DGSE（旧 SDECE）- BND - シュタージ - 国家情報院（旧KCIA、国家安全企画部）- モサド競争軍備拡張競争 - 宇宙開発競争イデオロギー自由主義 - 社会主義 - スターリニズム - ユーロコミュニズム - ド・ゴール主義 - 中ソ対立 - 毛沢東主義 - チュチェ思想外交政策アメリカトルーマン・ドクトリン - マーシャル・プラン - ドミノ理論 - 民主化 - ニクソン・ドクトリン西側親米 - アメリカニゼーション - ノルディックバランス - ハルシュタイン原則 - 東方外交ソ連鉄のカーテン - スターリン批判 - 制限主権論 - グラスノスチ - ペレストロイカ東側衛星国 - フィンランド化 - 竹のカーテン - アルバニア決議非同盟第三世界 - コロンボ会議 - アジア・アフリカ会議 - 平和十原則 - 非同盟諸国首脳会議Category:冷戦表・話・編・歴宇宙飛行主要項目歴史（英語版）（競争、事故） · 軌道力学応用地球観測衛星（偵察衛星、気象衛星） · 宇宙開発 · 宇宙旅行 · 衛星測位システム · 宇宙建築（英語版） · 宇宙移民有人宇宙飛行主要項目宇宙飛行士 · 生命維持装置危険性無重量状態（宇宙酔い） · 宇宙線主な計画ボストーク · マーキュリー · ボスホート · ジェミニ · ソユーズ · アポロ · スペースシャトル · 神舟 · ミール · ISS · コンステレーションその他宇宙遊泳宇宙機／宇宙船スペースシャトル · 無人宇宙船（英語版） · 宇宙機の推進方法 · スペースプレーン目的弾道 · 軌道（英語版）（対地同期軌道、地球周回軌道） · 惑星間（英語版） · 恒星間航行 · 銀河間航行打ち上げローンチ・ヴィークル · 使い捨て · 再利用 · 宇宙速度 · 直接上昇（英語版） · 非ロケット式宇宙到達（英語版） · 射場 · 発射台主な機関ESA · NASA · RKA · CNES · CNSA · ISRO · JAXAその他民間宇宙飛行 · 宇宙天気予報 · ラグランジュ点 · 宇宙空間と生存（英語版）「http://ja.wikipedia.org/w/index.php?title=宇宙開発競争&oldid=47014306」から取得 カテゴリ: 宇宙開発宇宙探査冷戦ソビエト連邦の政治ソビエト連邦の国際関係ロシア・ソ連の科学技術アメリカ合衆国の政治史 (1945年-1989年)アメリカ合衆国の国際関係 (1945年-1989年)アメリカ合衆国の科学技術20世紀の世界史隠しカテゴリ: 言葉を濁した記述のある記事 (いつ)/2013年1月-3月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f142"},"body":"紙の博物館出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、東京都北区にある博物館について記述しています。高知県吾川郡いの町にある博物館については「いの町紙の博物館」をご覧ください。紙の博物館paper museum2009年4月7日撮影施設情報愛称かみはく前身製紙記念館専門分野紙管理運営公益財団法人紙の博物館開館1950年（昭和25年）（製紙記念館の設立）所在地〒114-0002東京都北区王子1丁目1番3号ウェブサイトhttp://www.papermuseum.jp/プロジェクト:GLAMテンプレートを表示紙の博物館（かみのはくぶつかん）は、東京都北区の飛鳥山公園内にある、紙専門の博物館。運営は、公益財団法人紙の博物館。目次1 概要2 歴史3 参考文献4 関連項目5 脚注6 外部リンク概要[編集]4階建てで、2階に入り口と第1展示室、3階に第2展示室、4階に第3展示室と第4展示室がある。1階には講習会・講演会が行われる講堂、図書室のほか、京都府葛野郡梅津村（現在の京都市右京区）にあったパピールファブリックの門扉や高札、中井商店の看板などが展示されている記念碑コーナーがある。第1展示室では「現代の製紙産業」として、紙パルプの原料や製造工程などの説明パネル、製造機械の実物および模型を展示。第2展示室では「紙の教室」として、紙の性質を体験するコーナーや古紙のリサイクルについてなどの展示がある。第3展示室では「紙の歴史・製紙産業の歩み」として、紙が誕生する前から紙が誕生して世界に広まり、現在に至るまでの紙そのものの歴史、および製紙産業の歴史についての展示がある。第4展示室では企画展示・特別展示が開催される。歴史[編集]1950年（昭和25年） - 北区堀船の王子製紙王子工場跡地に製紙記念館として設立。1953年（昭和28年） - 博物館法の施行に伴い製紙博物館に改称。1965年（昭和40年） - 紙の博物館に改称。1995年（平成7年） - 首都高速中央環状線建設に伴って現在地である飛鳥山公園内に移転することとなり、新館の建設工事が着工（1997年に完成）。1998年（平成10年） - 隣接する北区飛鳥山博物館、渋沢史料館とともに「飛鳥山3つの博物館」として開館。2007年（平成19年） - 5月に所蔵する王子製紙（抄紙会社）創業当時の図面が「産業考古学会推薦産業遺産」に指定、11月には所蔵物全体が経済産業省から近代化産業遺産に認定される。参考文献[編集]紙の博物館編 『紙のなんでも小事典 : パピルスからステンレス紙まで』 講談社〈ブルーバックス〉、2007年。ISBN 978-4-06-257558-4。武田竜弥編著 『日本全国産業博物館めぐり : 地域の感性を伝える場所』 PHP研究所〈PHP新書〉、2008年。ISBN 978-4-569-69928-8。関連項目[編集]金唐革紙 - 手製の高級壁紙。当館には旧来品と復元品が収蔵されている[1]。脚注[編集]^ 復元品の実質的製作代表者は日本画家の後藤仁である。後藤仁『正伝　金唐革紙の製作について』2011年1月、金唐革紙保存会。[後藤仁公式ホームページ「後藤　仁（GOTO　JIN）のアトリエ」][後藤仁公式ブログ「後藤　仁（GOTO　JIN）の制作・旅日誌」]外部リンク[編集]“紙の博物館”. 2011年2月16日閲覧。「紙の博物館」は、東京都に関連した書きかけの項目です。この記事を加筆・訂正などしてくださる協力者を求めています（Portal:日本の都道府県/東京都）。「http://ja.wikipedia.org/w/index.php?title=紙の博物館&oldid=47988833」から取得 カテゴリ: 東京都の登録博物館北区 (東京都)の教育北区 (東京都)の建築物紙公益財団法人 (東京都知事認定)隠しカテゴリ: 東京都関連のスタブ項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f143"},"body":"紙出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索紙（かみ）とは、植物などの繊維を絡ませながら薄く平（たいら）に成形したもの。日本工業規格 (JIS) では、「植物繊維その他の繊維を膠着させて製造したもの」と定義されている[1]。白紙目次1 概要2 紙の原料2.1 非木材植物2.2 木材3 紙の分類と用途3.1 和紙3.2 洋紙3.3 紙と板紙3.4 経済産業省による分類3.4.1 新聞巻取紙3.4.2 印刷・情報用紙3.4.3 包装用紙3.4.4 衛生用紙3.4.5 雑種紙4 生産・消費量5 紙の作り方5.1 植物繊維を取り出す5.1.1 叩解（こうかい）5.2 紙をすく6 洋紙の製造6.1 パルプ化工程6.2 調成工程6.3 抄紙工程6.3.1 ワイヤーパート6.3.2 プレスパート6.3.3 ドライヤーパート6.4 塗工工程6.5 仕上・加工工程6.5.1 カレンダリング6.6 紙に添加される薬品7 紙の歴史7.1 紙発明以前7.2 中国での紙の発明と改良7.3 イスラム世界への伝播7.4 ヨーロッパへの伝播7.5 印刷技術の確立と原料不足7.6 製紙工業の確立7.7 製紙用薬品の普及8 寸法・単位8.1 寸法8.2 枚数の単位8.2.1 連8.3 重量の単位8.3.1 坪量8.3.2 連量9 紙の物性9.1 基本物性9.2 要求物性10 紙に関係する法令・規格11 紙とコンピュータ12 紙と環境問題13 脚注14 参考文献15 外部リンク16 関連項目概要[編集]広義の紙は、直径100マイクロメートル以下の細長い繊維状であれば、鉱物、金属、動物由来の物質、または合成樹脂など、ほぼあらゆる種類の原料を用いて作ることができる[2]。例えば、不織布は紙の一種として分類されることもある。しかし一般には、紙は植物繊維を原料にしているものを指す[2]。製法からも、一般的な水に分散させてから簀の子や網の上に広げ、脱水・乾燥工程を経て作られるもの以外に、水を使用しない乾式で製造したものも含まれる。紙の用途は様々で、原初の紙は単純に包むための包装用に使われた[3]。やがて筆記可能な紙が開発され、パピルスや羊皮紙またはシュロ・木簡・貝葉などに取って代わり情報の記録・伝達を担う媒体として重宝された[3]。やがて製法に工夫がこらされ、日本では和紙の技術確立とともに発展し、江戸時代には襖や和傘、提灯・扇子など建築・工芸材料にも用途を広げた[4]。西洋では工業的な量産化が進行し、木材から直接原料を得てパルプを製造する技術が確立された[3]。19世紀に入るとイギリスでフルート（段）をつけた紙が販売され、瓶やガラス製品の包装用途を通じて段ボールが開発された。さらにクラフト紙袋など高機能化が施され、包装用としての分野を広げ現在に至る[5]。紙の原料[編集]紙の原料は、現在の洋紙では木材と古紙がほとんどを占める。木材が紙の原料となったのは19世紀後半からで、それより前は非木材植物原料が主流だった。また、近年では製紙による森林伐採を抑制する観点から、ケナフ、サトウキビ、タケなどの非木材植物が注目される場合もある。紙の原料である植物繊維は、セルロースが主成分である。セルロースをさらに細分するとセルロース・ヘミセルロース・リグニンの分けられ、セルロースが骨格を、ヘミセルロースが接続を、リグニンが空隙充填を担う[2]。セルロースは、水素結合によって結びつく性質がある。紙を構成する植物繊維がくっつき合うのは、主にこうした水素結合のためである。一方、水素結合は水が入るとすぐ切れるため、防水加工していない紙は水濡れに弱い。非木材植物[編集]紙の原料として使われた非木材植物には、次のものがある。いずれも、安定供給や品質の面から木材の代替にはならないとされており、現在では特別な用途で使われている。アサアサやそのぼろは、中国で紙が発明されたときの主原料だった（リネンパルプ）。カジノキ・ガンピ・コウゾ・マユミ・ミツマタカジノキ・ガンピ・コウゾ・マユミ・ミツマタはいずれもその樹皮が紙の原料として、中国・日本などで使われた。このうち栽培が比較的容易なコウゾは、現在和紙の主原料となっている。また、ミツマタは日本紙幣の原料として混ぜられている。竹竹紙は、中国で唐時代（7世紀）から作られ、宋時代（10世紀以降）には竹が紙の主原料となった。その後、藁や木材に取って代わられたが、近年ふたたび見直され、四川省などで大規模な工場も建設されている。藁藁（稲わらや麦わら）は、中国では唐時代から紙の原料として使われた。また、日本では1890年代頃は洋紙の主原料だった。藁には、繊維が細くて短すぎるため弱い紙しかできない、年に1回しか収穫できず腐りやすいため保管が難しい、などの問題点があるが、中国などでは、まだ原料として使用されている。亜麻亜麻やそのぼろは、イスラム世界で紙の主原料となった。ヨーロッパでも木材以前はよく使われた。木綿木綿のぼろ（ラグ）は、欧米で木材以前は紙の主原料であった。しかし、15世紀に印刷技術が確立して紙への需要が大きくなると供給不足になり、木材からの製紙方法が開発される契機となった。日本でも、製造開始直後の1880年代頃は洋紙の主原料だった。また、綿花の加工途中で生ずる地毛などの短繊維（リンター）を原料として紙を漉くこともできる。木綿のぼろから作られるパルプをラグパルプ、綿花の地毛などの短繊維から作られるパルプをリンターパルプという。なお、通常の木綿は、繊維が長過ぎるため、製紙には使いにくい。サトウキビインド・中国や南米諸国では、製糖時に発生したサトウキビの絞りかす（バガス）からパルプを製造している。バガスパルプは多くの場合、製糖工場に隣接したパルプ工場で生産される[6]。マニラアサマニラアサ（アバカ）は、フィリピンなどで栽培されているバショウ科の植物。アバカパルプは繊維が細長いため、しなやかで強い紙を作ることができる。現在、日本紙幣の主原料となっているほか、ティーバッグ、掃除機の紙パックの原料となっている。ケナフケナフは木に近い性質を持ち、成長が非常に早いため、木材の代替候補として注目されたが、普及は進んでいない。バナナバナナの茎の繊維を用いて、和紙をつくる要領で紙を作ることができる。生産廃棄物の再利用として途上国での利用が期待されている[7]。アブラヤシアブラヤシは実からパーム油を絞るために栽培されているが、この絞りかすの繊維は強度が高いため、これを用いて紙をつくることが中国などで実用化されつつある。金属金属そのものが紙になるわけではないが、金属の酸化物などを紙に漉き込むことで、従来の紙よりも薄く丈夫で透けない高品質の紙を作ることが可能である。元々、白い色合いを持つ酸化チタンなどが使用される場合が多く、長期間に渡って使用、保存される本に使用される[8]。木材[編集]木材は、1840年代に木材パルプの製造方法が確立して以来、紙の原料として使われるようになった。日本では、1889年に最初の木材パルプ工場が建設された。木材パルプの原料にはもともとマツ科を主とする針葉樹が使われていたが、日本では1960年代から広葉樹も使われるようになり、現在は広葉樹の方が多くなっている。針葉樹の繊維は広葉樹の繊維より太く長いため、一般的に針葉樹から製造した紙の方が強い。強度が求めら���る新聞巻取紙や紙袋、封筒、飲料用紙パックなどでは針葉樹が使われることが多い。一方、現在の印刷・情報用紙の多くは、広葉樹が主原料になっている。針葉樹では仮道管が、広葉樹では木繊維細胞が主に使われる。その他の組織も紙の中に入り込むが、広葉樹の場合、導管要素は細胞が大きく、成形の不揃いや印刷適性の劣化を生じてしまう[2]。輸入木材チップ日本では1965年から、大型専用船でアメリカ・オーストラリア・ニュージーランド・チリ・中国などから輸入した木材チップを紙の原料として使うようになった。輸入木材チップは、1980年代以降の円高などの影響もあって割安なことから、現在では国内の木材より多く使われている。木材チップは、製材の背板などの残りや間伐材、廃材などから製造される物もあるが、製紙原料用に植林されたユーカリやアカシアなどの木材から生産されたものが多くなっている。古紙古紙を元に紙を作ることは紙の発明直後から行われていたと考えられ、1100年頃の中国では古紙再生が奨励されている[2]。日本では平安時代に故人が生前に書いた手紙などを漉き直し、法華経を筆写して供養することがあり、これは「故紙」と呼ばれた[2]。紙は排出されるゴミに占める比率が高く、家庭では25%、オフィスからは46%（1988年度）が相当する。これらが古紙として再生されることはゴミ軽減の効果が大きい[2]。現在、古紙の利用率は世界で約50%と推定されている。日本では約60%である。紙の分類と用途[編集]紙は、原料により和紙と洋紙に分類される。割合をみると、現在は木材を原料としたパルプから、機械を使って製造した洋紙が多くの割合を占めている。和紙[編集]詳細は「和紙」を参照和紙は、7世紀初めまでに中国から伝来した紙が日本独自に発展したもので、ガンピ・コウゾ・カジノキなどが原料である。和紙は現在でも手漉きで作られているほか、1900年代からは機械抄き和紙も製造されている。洋紙[編集]詳細は「洋紙」を参照現在の洋紙は、主に木材を主原料に機械を使って製造する。日本では1873年に、欧米の機械を導入した初の洋紙工場が設立された。なお、木質紙が主流になる以前、洋紙の主原料は木綿のぼろや藁だった。紙と板紙[編集]詳細は「板紙」を参照紙の中で、主に包装用に使われる厚い紙を板紙（ボール紙）という。経済産業省による分類[編集]さまざまな紙製品経済産業省（旧通産省）では1948年以来、紙・板紙・パルプの品種分類を所管しており、「生産動態統計分類」で紙を分類している。2002年以降の分類は次の通り。新聞巻取紙[編集]新聞に使用される新聞紙のこと。「新聞用紙」とも呼ばれる。印刷・情報用紙[編集]印刷用紙は印刷されることを前提とした紙を、情報用紙は情報システム用の紙を指す。経済産業省の分類では、以下の5つに分類されている。非塗工印刷用紙表面を顔料などで塗工していない印刷用の紙。ただし、筆記性や表面強度を改善するため、デンプンなどの薬品が表面に塗布されることも多い。化学パルプの使用割合により、上級印刷用紙（100%、上質紙）、中級印刷用紙（40%から100%、中質紙および上更紙）、下級印刷用紙（40%未満、更紙）に分類される。辞書本文などに使われるインディア紙などの薄葉紙も含まれる。塗工印刷用紙上級印刷用紙や中級印刷用紙を原紙とし、表面に塗料を塗布した印刷用紙。塗料の量などにより、アート紙・コート紙・軽量コート紙などに分類される。詳細は塗工紙を参照。微塗工印刷用紙1987年頃に登場した比較的新しい品種で、塗料の量が塗工印刷用紙よりも少ない。特殊印刷用紙色上質紙・官製はがきなどを指す。情報用紙コピー用紙、インクジェット用紙、ノーカーボン紙、感光紙、感熱紙などを指す。包装用紙の例包装用紙[編集]印刷用紙より強度があり、包装紙や封筒に使用される紙である。未晒し包装紙は漂泊されておらず茶褐色。重袋用両更クラフト紙、両更クラフト紙などの種類がある。晒し包装紙は晒しクラフトパルプが原料で、純白ロール紙、晒しクラフト紙などの種類がある。衛生用紙[編集]ティッシュペーパー、トイレットペーパー、紙おむつ、生理用品などの用途に使用される吸水性を持つ紙である。雑種紙[編集]工業用と家庭用に分類される。トレーシングペーパー、合成紙、絶縁紙、剥離紙、ライスペーパー（紙巻きタバコの巻紙）、書道用紙などが該当する。生産・消費量[編集]日本製紙連合会の調べによれば、2008年における世界の紙・板紙の生産量は、約3.9億トン。国別生産量のトップはアメリカ合衆国で約7,995万トン。次いで中華人民共和国の約7,980万トン（2009年は速報値で首位となった）、日本は約3,062万トン。国民1人当たりの消費量のトップはベルギーで約345kg。次いでフィンランドの約342kg、アメリカの約266kgが続く。日本は約242kg。紙の作り方[編集]『天工開物』での竹紙の作り方紙は、植物繊維から次の手順で作る。植物繊維を取り出す紙をすく脱水・乾燥するこうした紙の作り方は、古代中国で発明されて以来、基本的には変わっていない。中国で明末の1637年に書かれた『天工開物』では、竹紙の作り方を次のように記述している。斬竹漂塘 - 竹を切り、ため池に漬ける煮楻足火 - 十分に煮る蕩料入簾 - 竹麻を簾（れん）ですく覆簾壓紙 - 簾をひっくり返し、紙を積み重ねる透火焙乾 - 火を通し、紙を焙り乾かす植物繊維を取り出す[編集]伝統的な製紙方法では、原料となる植物や木綿やアサのぼろを、アルカリ性の溶液で煮て、軟らかくする。こうして取り出した植物繊維は、パルプに相当する。また、古紙を水につけてパルプを作ることもできる。例えば、牛乳パックからパルプを作ることができる。叩解（こうかい）[編集]植物から繊維を取り出して紙をすくときには、パルプを叩き、繊維が切断・水和・膨潤・絡み合うようにする作業が必要である。こうした作業を叩解という。パルプを叩解すると、繊維はまず内部フィブリル化し、次に外部フィブリル化する。内部フィブリル化繊維の組織がゆるみ、軟らかくなる。外部フィブリル化繊維の表面から、ごく短い繊維の束（フィブリル）が出てくる。紙漉き。イタリア・モンセーリチェの中世祭にて紙をすく[編集]水に溶かしたパルプを簀の子（すのこ）や網の上に広げることを「すく」という。「すく」は、手で行う場合は「漉く」、機械で行う場合には「抄く」と表記する。手漉きの場合、紙は1枚ずつすく。一方、機械抄きの場合は連続して紙をすくため、高速で紙を製造できる。洋紙の製造[編集]洋紙の製造では、幅広の紙を機械を使って連続的に抄くため、大量生産が可能となっている。洋紙製造には、次の工程がある。パルプ化工程調成工程抄造工程塗工工程仕上・加工工程パルプ化工程[編集]詳細は「パルプ」を参照パルプは、その後の工程と同じ工場の中で製造する場合と、別の工場で製造する場合がある。パルプ製造とその後の工程を両方とも行う工場は、紙パルプ一貫工場と呼ばれる。洋紙の製造過程では多くの場合、木材からパルプを製造する。木材から製造するパルプは、製造方法により機械パルプと化学パルプに大別される。現在、化学パルプでは、クラフトパルプが一般的である。また、古紙から作るパルプも多く用いられており、古紙脱墨パルプと呼ばれる。白い紙を作る場合、パルプ製造過程でパルプを漂白する。漂白したパルプは、晒しパルプと呼ばれる。調成工程[編集]調成工程では、各種パルプを混合し、叩解し、薬品を添加する。叩解には、かつてはビーター、現在はリファイナーという機械が使われる。調成工程を経たパルプを、紙料という。抄紙工程[編集]抄紙工程では、抄紙機を使い、紙料を1%程度に水で薄めたものを原料に、次の工程で紙を抄く。ワイヤーパートプレスパートドライヤーパートワイヤーパート[編集]紙料を、網（ワイヤー）の上に流して薄く平（たいら）にすることで、湿紙を作る。この工程で水分が重力によって脱落し、紙料の水分は99%（濃度1%）だったのが、湿紙では80%程度になる。プレスパート[編集]湿紙にフェルト（毛布）を当てて上下から圧縮することで、水分を搾り取る。この工程で、湿紙の水分は55%程度になる。ドライヤーパート[編集]湿紙を加温して水分を蒸発させ、水分が8%程度になるまで乾燥させる。塗工工程[編集]塗工紙の場合は、コーターを使い、紙の表面を顔料などで塗工する。コーターには、抄紙機と直結することで抄紙・塗工を1工程とするオンマシン式と、抄紙とは別工程とするオフマシン式がある。ロール状の原紙仕上・加工工程[編集]乾燥し、抄紙機またはコーターから出てきた紙は、次の工程で仕上・加工する。カレンダリングリールによる巻き取りワインダーやカッターで断裁包装出荷カレンダリング[編集]紙の表面に、カレンダー（calender）を使って圧力をかけ、光沢や平滑性を高める。ただし、このとき紙の厚さは減少する。カレンダーは、金属ローラーと弾性ローラーの組み合わせ（ニップ）から構成される機械である。コーターと同様に、カレンダーにも抄紙機と直結させたオンライン式と別工程としたオフライン式がある。カレンダーには、スーパーカレンダーとソフトカレンダーの2種類がある。スーパーカレンダー一般に用いられるカレンダー。ニップ数が大きくなるほど紙の光沢や平滑性は高くなる。通常の印刷用紙では8から12ニップ、アート紙などでは10から12ニップのものが用いられる。ソフトカレンダー紙の厚さが減少するのをできるだけ避けたい場合に用いる。紙は表面の温度を高くすると光沢が出るため、圧力を小さくする代わりにローラーの表面温度を100度から200度程度にする。ニップ数は、2から4である。紙に添加される薬品[編集]各種洋紙に添加される主な薬品は次の通り。薬品は、調成工程でパルプに混合されたり、塗工工程で紙の表面に塗工されたりする。機械抄き和紙にも合成ねり（粘剤）などの薬品が用いられている。詳細は製紙用薬品を参照。サイズ剤水性インクなどのにじみを防ぐ。かつてはロジンと硫酸バンド（硫酸アルミニウム）が広く使われており、そうした紙は酸性紙という。酸性紙は寿命が50年から100年で、図書館での蔵書の保管などで寿命が短すぎることが大きな問題になった。中性紙は、硫酸バンドの代わりに、AKDやASAなどの中性サイズ剤を用いており、寿命は酸性紙の4倍から6倍といわれている。現在、印刷用紙やPPC用紙では中性紙が使われることが多く、酸性紙は新聞や雑誌など長期保存の必要がない用途で使われる。填料繊維間の隙間を埋め、不透明度・白色度・平滑度・インク吸収性を向上させる。従来からカオリンなどのクレー（白色粘土）やタルク（滑石）が使われているほか、中性紙では炭酸カルシウムが使われる。填料は、印刷用紙やPPC用紙などには5%から20%程度、辞書などに使う薄葉印刷用紙では25%程度が含まれる。紙力増強剤紙の強度を高くする。紙が乾いた状態での強さを上げる乾燥紙力増強剤と濡れた状態での強さを上げる湿潤紙力増強剤に分かれる。主にデンプンやポリアクリルアミドが使われる。染料染料は、紙に色を付けたり、白さを高めたりする。白さを高めるには、繊維の黄色の補色である青色の染料が使われる。また、書籍などでは、文字を読みやすくするため、淡い黄色の染料を使う。蛍光染料は、白さを特に高めるために使う。塗料高級印刷用紙などの美感や平滑さを高める目的で塗料が紙の表面に塗布されることがあり、そうした紙は塗工紙という。塗料は、カオリンや炭酸カルシウムなどの白色顔料と、デンプンやラテックスなどのバインダー（接着剤）を混合して作る。紙の歴史[編集]紙発明以前[編集]紙が発明・普及する前から、人間は世界各地でさまざまなものを文字などを筆記する媒体として利用してきた。例えば、次のものが知られている。筆記媒体地域説明粘土板古代メソポタミア泥を、板の形にして干したものパピルス古代エジプト、のち西アジア・ヨーロッパパピルス（植物）の幹を薄く削ぎ、直角に交叉させ、おし叩いて接着したもの。なお、「papyrus」は英語で紙を意味する「paper」の語源となっている。羊皮紙西アジア・ヨーロッパ動物の皮を筆記用に加工したもの。貝多羅葉インド椰子の葉を筆記用に加工したもの。写経などに使われた。かさばるため、大量の筆記には不向き。木簡・竹簡中国・日本木や竹を、墨で筆記できるように細長い板にしたもの。丈夫であり、削って再利用できる利点があることから、紙が普及してからも荷札などで使われた。絹帛中国・日本絹の布。中国での紙の発明と改良[編集]世界最古の紙は現在、1996年に中国甘粛省の放馬灘（ほうばたん）から出土したものだとされている[3]。この紙は、前漢時代の地図が書かれており、紀元前150年頃のものだと推定される。次いで古いのは、紀元前140年～87年頃のものとされる灞橋麻紙（はきょうまし）である。灞橋麻紙は陝西省西安市灞橋鎮で出土した。史書に残された記録では『後漢書』で、105年に蔡倫が樹皮やアサのぼろから紙を作り和帝に献上したという内容の記述がある。こうした記述から、紙の発明者は蔡倫だとされたこともあったが、現在では蔡倫は紙の改良者であるといわれることが多い。しかし、この「蔡侯紙」は軽くかさばらないため、記録用媒体として、従来の木簡や竹簡、絹布に代わって普及した。西晋の時代（3世紀）には、左思の『三都賦』を写すために紙の価格が高騰したという記録が『晋書』に記載されており、「洛陽の紙価を高からしむ」という故事成語になっている。紙はその後も改良され、唐時代（8世紀）には樹皮を主原料とした紙や、竹や藁を原料として混ぜた紙が作られるようになった。宋や明の時代（10世紀以降）には、出版が盛んとなったため大量の紙が必要となり、竹紙が盛んに作られた。明末の1637年に刊行された『天工開物』には、製紙の項目で、竹紙と樹皮を原料とした紙の製法を取り上げている。紙は、上流階級を中心に広く使われる高価なものであった。11世紀の詩人であった蘇舜欽は、自分が勤めていた役所で出た反古紙（書き損じの使い物にならない紙）を売って、その代金で宴会を開いたために横領で糾弾されている。反古紙であっても高値で取引されていた様子がうかがえる。清の第5代皇帝は質素・倹約を掲げていたので、重要な公文書などでない限り、紙は裏返して使うように勧めていた。日本7世紀までに伝えられ、その後は和紙として独自の発展を遂げた。また、『百万塔陀羅尼』は現存する世界最古の印刷物である。イスラム世界への伝播[編集]紙の製法が中国からイスラム世界に伝わった契機は751年のタラス河畔の戦いで、アッバース朝軍に捕えられた唐の捕虜に紙職人がいたことである。サマルカンドでは、757年に製紙工場が造られた。イスラム人は、紙の原料として亜麻を使ったり、サイズ剤として小麦粉から作ったデンプンを使うなどの工夫をした。こうした紙はイスラム世界で広く知られるようになった。その後、バグダッド・ダマスカス・カイロ・フェズなどイスラム世界の各都市に製紙工場が造られ、その技術は1100年にはモロッコまで伝わった[3]。紙は、イスラム世界で主要な筆記媒体となり、ヨーロッパへも輸出された。1144年には、当時タイファ（イスラム諸王国）の支配下にあったイベリア半島のシャティヴァ（英語版）に、ヨーロッパ初の製紙工場が造られた。ヨーロッパへの伝播[編集]1189年にはフランスのエローで[3]、1276年にはイタリアのファブリアーノで製紙工場が造られた。これ以降14世紀までの間、ヨーロッパでの紙の供給地は、イタリアとなった。1282年には、ファブリアーノで透かしが発明されている。その後、製紙工場はヨーロッパ各地で造られ、アメリカでも1690年にフィラデルフィアに設立されている。印刷技術の確立と原料不足[編集]1450年頃にグーテンベルクにより活版印刷が実用化されると、印刷物が大量に造られるようになり、紙の需要は増大した。一方、こうした需要の増大は、慢性的な紙の原料不足を引き起こし、特に19世紀には大きな問題となった。当時、紙の主原料は亜麻や木綿のぼろであった。製紙工業の確立[編集]ヨーロッパでは、製紙の機械化が進められた。叩解には、伝播した時点から水車を動力源に石臼を動かすスタンパーが使われており、1680年にはより効率的なホランダービーターが発明された。連続型抄紙機は、1798年にはフランスのルイ・ロベールによって小型模型が作られ、1826年にイギリスのドンキンが完成させた。一方、紙の原料不足については、木材を使うことで解決された。1719年にフランスのレオミュールは、スズメバチが木材をかみ砕いて巣を作っている様子を観察した結果として、木材から紙を作ることができるという内容の論文を発表した。1840年、ドイツのケラーは砕木パルプを作るためのグラインダーを考案し、グラインダーは1846年に実用化された。また、1851年には苛性ソーダを用いた化学パルプの製造がイギリスで成功し、1854年に実用化した。当時、木材には針葉樹の丸太が使用された。尚、当時はまだ紙は貴重であった。20世紀にかけて砕木パルプ・化学パルプともに改良が加えられ、木材を原料とした紙が機械で大量生産されるようになった。1940年代以降、クラフトパルプ製造法が確立され、広葉樹を利用できるようになった。また、1960年には木材チップをパルプ化する方法が開発された。製紙用薬品の普及[編集]1970年ごろから、酸性紙は50年を超えるような長期保存ができないことが問題となり、硫酸バンドやロジン系サイズ剤を使わず、石油を原料とした中性サイズ剤を使う方法が考案された。同じく1970年代ごろから、強度を高める目的で従来のデンプン類に代えてポリアクリルアミドを紙力増強剤として使う方法が考案され、また、公害防止のために、排水中のBOD、COD、微細固形物を削減する取り組みが進められ、ポリアクリルアミドを歩留まり剤や凝集剤として使うことが広がった。1980年代以降、古紙のリサイクル比率が高まり、古紙に付着している印刷インクを除去する脱墨剤として合成の界面活性剤が応用されるようになった。寸法・単位[編集]紙の製造管理や商取引上では、次の寸法や単位が用いられる。寸法枚数 - 連（れん）重量 - 坪量（つぼりょう）と連量（れんりょう）寸法[編集]詳細は「紙の寸法」および「ISO 216」を参照紙の寸法には、断裁に必要なまわりの余白を含めた原紙寸法と、製品に仕上げたときの寸法である紙加工仕上げ寸法がある。こうした寸法は、日本工業規格やISOにより規格化されている。原紙寸法には次の種類がある。種類寸法(mm)A列本判625×880B列本判765×1085四六判788×1091菊判636×939ハトロン判900×1200仕上げ寸法には、A列とB列がある。A列B列枚数の単位[編集]連[編集]1連とは一定寸法に仕上げられた紙1,000枚（板紙の場合は100枚）のことで、紙取引の基準となる枚数である。小数点を使い、2.5連（2,500枚）のように表す場合もある。重量の単位[編集]坪量[編集]坪量は、紙や板紙の基準となる重さを、単位面積である1m²あたりの重量で表す。単位はg/m²。坪量は紙の基本品質を表す、重要な項目である。米坪ともいう。元は1尺四方あたりの匁単位の重量のことを坪量と呼んだ（坪を参照）。連量[編集]連量は、一定寸法に仕上られた紙1,000枚（1連）の重量。寸法は日本の場合、板紙では実際に取引する紙の寸法、板紙以外では四六判（788mm×1,091mm）が一般的である。1連が1,000枚でないのが通常（例えば100枚）である用紙の場合には連量も変わる。連量は、紙の重みだけでなく、厚みを比較する目安としても捉えられている。厚い紙は、私製ハガキで220kg、薄いものは純白ロール紙34kgがある。ただし、紙質によって同じ厚みでも密度は異なるため、あくまで目安。同質の紙同士で厚みを比較する際にはよい参考になる。紙の物性[編集]基本物性[編集]紙の基本物性と評価には、以下のような項目がある。[9]こわさ紙が自重を支える性質（紙のこし）を表す。幅2cmのテープ状に切った紙を水平に保持し、垂れ下がり始める長さで測る。また、垂直に保持して左右に傾け、それぞれの方向で垂れ下がる角度の計が直角になった時の長さをcm単位で計測し、長さの3乗を100で割った値をクラークこわさと言う。紙箱など、紙のみで形を維持させるような場合には強いこわさが求められる。引張り強さ紙が引きちぎる力に抵抗する性質を表す。幅15mm、長さ20cmの試験片を用意し、両端各1cm幅を挟んで引張り試験機で測定する。破断時の荷重やエネルギーおよび紙の伸びを計測し、単位面積当たりの仕事量をタフネスとして示す。また、この結果から断裂長を導くこともある。これは、紙を非常に長いテープ状にして吊り下げた場合に破断を起こす長さに換算したもので、km単位で表される。耐磨耗強さ紙同士、または紙と他の物質が繰り返し摺り合わさった場合に生じる紙表面のムケなどを調べる。テーパー型磨耗試験などを用いて一定の時間・速度・圧力で摺り合わせを行い、単位重量の減少で測定する。引裂強さ紙が横方向に引き裂かれる時の強さを表す。4枚重ねて両端を固定した紙の中央下部端に2mmの切れ目を入れ、片方に振り子をつけて揺らす。これにより起こる引裂きの抵抗値を測定する。この数値を16枚重ね相当に換算した値をエレメンドルフ引き裂き強さ（内部引裂強さ）と言う。破裂強さ内容物がある紙袋の破裂に対する強さを表す。中央に円形の穴があるドーナッツ状の抑え板で紙を挟み、穴の部分にゴム製の風船を当てて膨らます。やがて紙が破れた際の圧力を破裂強さと言う。衝撃引張り強さ紙に強い衝撃が加わった際に抵抗する強さを表す。アイゾット衝撃試験を行う。耐折れ強さ繰り返し折りたたみ、開かれることに対する紙の強さを表す。実際に折り開くことを繰り返して、紙の強さを測定する。また、折りたたみによって起こり紙の破断は、背側に亀裂が入り起こることが多い。そこで、紙に罫線（表面だけに加わった切り込み）を入れて、それを背に折りたたみ割れの状態を観察する方法もある。要求物性[編集]紙は、その用途に応じた性能が求められる。印刷を前提とした紙にはインクを沁み込ませる機能が必要となり、吸水度をクレム法やコップ法などで計測する。逆に包装材料の中には防水や耐水性を付与した紙もある。食品包装用には油や脂質への耐性が求められるものも多くある。壁紙では難燃性が求められる。[9]また、作業性や機械適性も紙の要求機能に入る。製函・段ボール製造などでは生産機械を用いて大量製造される際、紙がカールしていては使用に耐えにくい。印刷では、紙の表面硬度や平滑性、印刷時の圧縮性やインクとの適正（チョーキングや裏抜け）、紙粉発生によるパイリングの防止、オフセット印刷における紙中の水分が原因となるブリスタリングなどがある。その他、OA用紙では給排紙機能や走行機能、耐候性、トナーやインクの定着や解像度なども問題となる。[9]紙に関係する法令・規格[編集]ISO（国際標準化機構）RoHS指令PRTR制度（Pollutant Release and Transfer Register）MSDS制度（Material Safety Data Sheet）=化学物質安全性データシートICPデータ（Inductively Coupled Plasma Data）=誘導結合プラズマによる分析データで特定有害物質などの元素分析に用いられる。RoHS指令に対する不使用の証明として求められることが多い。容器包装リサイクル法グリーン購入法森林認証制度紙とコンピュータ[編集]かつて、コンピュータが普及すると情報の記録や伝達はコンピュータに置き換えられるため、紙の消費は減るであろうとする予想があった。こうした紙の消費量を減らすことをペーパーレス化といい、情報伝達の効率が高くなることや、文書を保存・管理するコストが小さくなることが期待されていた。しかし、コンピュータが高度に普及した現代においても、紙の使用量は減少することはなく、むしろ増加しているという現実がある。Abigail SellenとRichard Harperは、著書\"The Myth of the Paperless Office\"で、現在では仕事の多くが知識労働になっているため、紙の有効性は高まっていると主張した[10]。紙と環境問題[編集]紙は、環境問題で議論の対象となることが多い。日本国内で生産される紙の原料の約6割は古紙だが、残りの約4割は木材などを原料としたバージンパルプである。バージンパルプの原料には、丸太を製材に加工する際に発生する残材（端材）なども使われるが、丸太を2～3cmの大きさに砕いた木材チップが用いられている。木材チップは国内産のものもあるが、日本国外から輸入されるものの方が多い。木材チップの原料には、主にユーカリやアカシアなどの植林木が用いられている。しかし、植林を行なうためにその土地の天然林を伐採している事例もあるとの指摘がある。また、木材チップの原料の一部には天然林から伐採された丸太も用いられており、環境団体からは、天然林の伐採対象には生物多様性が豊かな原生林も含まれていることが指摘されている。脚注[編集][ヘルプ]^ 日本印刷技術協会編、『製本加工ハンドブック 〈技術概論編〉』日本印刷技術協会（2006/09 出版）、ISBN： 9784889830880^ a b c d e f g 原 p.71-147 4.洋紙のレシピ^ a b c d e f 原 p.15-33 1.紙の来た道“ペーパーロード”^ 原 p.35-59 2.文化が育てた“紙”、紙が育てた“文化”^ 日本包装技術協会 『包装の歴史、3.包装産業の発達』 日本包装技術協会、1978年、111-125頁。^ 三島製紙 - 砂糖キビの絞りかすから生まれたバカス紙について^ バナナ・グリーンゴールド・プロジェクト^ 化粧紙 - 注目商品 - 事業案内 - 日本紙パルプ商事株式会社^ a b c 原 p.149-180 5.紙に要求される機能^ ペーパーレス神話と現実参考文献[編集]出典は列挙するだけでなく、脚注などを用いてどの記述の情報源であるかを明示してください。記事の信頼性向上にご協力をお願いいたします。（2009年9月）日本紙パルプ商事株式会社 紙の知識とデータ集紙への道『知っておきたい紙パの実際2007』（紙業タイムス社、2007年） ISBN 9784915022937紙の博物館編『紙のなんでも小辞典』（講談社ブルーバックス、2007年） ISBN 9784062575584尾鍋史彦総編集『紙の文化百科事典』（朝倉書店、2006年） ISBN 4254101856山内龍男『紙とパルプの化学』（京都大学学術出版会、2006年） ISBN 4876988188門屋卓『新しい紙の機能と工学』（裳華房、2001） ISBN 4785361085王子製紙編『紙・パルプの実際知識第6版』（東洋経済新報社、2001年） ISBN 4492083553原啓志 『紙のおはなし』 日本規格協会、1992年。ISBN 4-542-90105-X。外部リンク[編集]ウィキペディアの姉妹プロジェクトで「紙」に関する情報が検索できます。ウィクショナリーで辞書項目ウィキブックスで教科書や解説書ウィキクォートで引用句集ウィキソースで原文コモンズでメディアウィキニュースでニュースウィキバーシティで学習支援日本製紙連合会財団法人古紙再生促進センター財団法人紙の博物館紙の豆知識:日本製紙グループ本社紙の世界史、日本史、基礎知識：平出紙業関連項目[編集]日本の企業一覧 (パルプ・紙)板紙折り紙電子ペーパーバルカナイズドファイバーシュレッダー、ペーパーナイフ新聞、封筒トイレットペーパー、ティッシュペーパー段ボール印刷、製本紙の博物館紙布、紙粘土、文房四宝表具ペーパークラフトペーパーわんこヤギ - ヤギは本当に紙を食べるかザラ紙紙粉紙の寸法「http://ja.wikipedia.org/w/index.php?title=紙&oldid=48278524」から取得 カテゴリ: 紙印刷情報技術史隠しカテゴリ: 参照方法\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f144"},"body":"Hypertable出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Hypertableファイル:Hypertable Logo.png最新版0.9.6.4 / 2012年9月19日（9か月前） （2012-09-19）プログラミング言語C++対応OSCross-platformサポート状況Active種別Column oriented databaseライセンスGNU General Public License 2.0公式サイトhttp://www.hypertable.org/テンプレートを表示HypertableはオープンソースのBigTable互換プロジェクトである。このプロジェクトはGoogle社のBigTable論文に記載されている概念、及び数年およぶおよび大規模データ処理タスクに取り組んだエンジニアの経験に基づいている。スポンサー[編集]HypertableはZvents社において社内ソフトウェアとして開発され、最近百度社が新規スポンサーとなった。関連項目[編集]BigTableHBase外部リンク[編集]公式プロジェクトページGoogle Codeプロジェクトページこの項目は、ソフトウェアに関連した書きかけの項目です。この項目を加筆・訂正などしてくださる協力者を求めています（プロジェクト:コンピュータ/Portal:コンピュータ）。「http://ja.wikipedia.org/w/index.php?title=Hypertable&oldid=47270388」から取得 カテゴリ: NoSQLデータベースオープンソースデータベース管理システム隠しカテゴリ: 壊れたファイルへのリンクがあるページソフトウェア関連のスタブ\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f145"},"body":"月探査出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索月面に近づくアポロ12号の月着陸船物理的な月探査（Exploration of the Moon）は、ソビエト連邦が宇宙探査機ルナ2号を打ち上げ、1959年9月14日に月の表面に衝突させた時から始まった。それ以前は、月探査の方法は観測によるしかなかった。光学望遠鏡の発明により、月観測の質は飛躍的に高まった。ガリレオ・ガリレイは1609年に初めて望遠鏡により月表面の山やクレーターを観測したとされる。1969年のアポロ計画によって、人類は初めて月面着陸に成功した。彼らはそこで実験を行い、月の組成が地球と似ていることを示す岩石とデータを持ち帰った。目次1 初期の歴史2 宇宙開発競争3 20世紀末以降の探査3.1 月面での水の発見3.2 LRO / エルクロス4 今後の計画5 関連項目6 出典7 外部リンク初期の歴史[編集]「月理学」を参照アリストテレスの哲学では、月から始まる天国は完全な領域、地上は変革と破壊の領域であり、これらの類似性は厳しく排除された[1]。アリストテレス自身は、月には混乱の領域が多少混入している可能性があると示唆していた。著書On the Face in the Moon's Orbの中で、プルタルコスは地球と月について、異なった見解を示している。彼は、月には太陽の光が届かない深い窪みがあり、月の斑点は川や深い裂け目の影であると唱えた。彼はまた、月に生物が存在するとも考えた。月は地球の鏡であり、地球の特徴を反映しているという考えは昔からあったが、月が地球に対して見せる面が常に同じである事から、この説明はすぐに否定された[1]。最終的に、月には密度のばらつきがあり、そのせいで完璧な球形にあのような模様が表れるという説明が標準的になり、月、天国の完全性は保たれた[1]。中世のイスラム世界、ヨーロッパのアリストテレス主義者達は、月の斑点をアリストテレスの考えで説明しようと試みた[1]。トマス・ハリオットは、長年月の観測を続け、初めて望遠鏡像を描写したが、彼のスケッチは出版されなかった[1]。最初の月の地図はベルギーの天文学者ミヒャエル・ラングレンが1645年に描いたものである[1]。その2年後、ヨハネス・ヘヴェリウスによってさらに影響力のある論文『月面学（Selenographia）』が出版された。ヘヴェリウスの体系は、プロテスタント国では18世紀まで使われたが、1651年にイエズス会の天文学者ジョヴァンニ・バッティスタ・リッチョーリが出版した体系に置き換えられた。彼は、裸眼で見える斑点に海の名前、望遠鏡で見える斑点（クレーター）に哲学者や天文学者の名前を付けた[1]。1753年、クロアチア人でイエズス会の天文学者であるルジェル・ヨシプ・ボスコヴィッチは、月には大気がないことを発見した。1824年、ドイツの天文学者フランツ・フォン・グルイテュイゼンは、月のクレーターの生成を小惑星の衝突によって説明した[2]。宇宙開発競争[編集]詳細は「宇宙開発競争」を参照「ソ連の有人月旅行計画」も参照ルノホート1号冷戦下におけるソビエト連邦とアメリカ合衆国の宇宙開発競争は月を巡っても行われた。これによって科学的に重要な発見が多くなされ、1959年にはソビエト連邦によって初めて、月の裏の写真が撮られた。1969年には初めて月面に人類が立ち、20世紀で、そして人類の歴史でも最も重要な出来事の1つになった。アポロ計画、サーベイヤー計画、ルナ計画の着陸地点アポロ17号で月面に降り立ったハリソン・シュミット月を訪れた初めての人工物は、ソビエト連邦の無人探査機ルナ2号であり、1959年9月14日21時2分24秒に月面に衝突した。月の裏は、ソビエト連邦の月探査機ルナ3号によって、1959年10月7日に初めて撮影された。ソビエト連邦のこれらの成功に追いつくため、アメリカ合衆国大統領ジョン・F・ケネディは、月面に人類が立つことが国の計画の目標であるとして、1961年5月25日の両院合同会議で次のように表明した。\"我が国は、人を月面に着陸させ無事に地球に帰還させるという目標を、今後10年以内に達成することを約束すべきであると、私は信じている。この時代の宇宙計画で、人類にとって印象深い、また長い目で見た宇宙探査にとって重要な計画はないであろう。\"[3]とはいえ、当時はまだソビエト連邦がリードしていた。ルナ9号は、初めて月面へ軟着陸した探査機であり、1966年2月3日に月面の写真を地球に送信し、それまで心配されていたように月の表面が厚い塵の層に覆われていて、探査機がその中に沈んでしまったりはしないことを証明した。初めて月の周囲を回る人工衛星になったのは、1966年3月31日に打ち上げられたルナ10号である。アメリカは、月への無人探査機として、月の近接観測を行うレインジャー計画を開始し、1961年から1965年にかけて9機が打ち上げられた。続くサーベイヤー計画では、1966年から1968年にかけて7機が打ち上げられ、月に軟着陸している。人間による直接の月探査に対して最も大きな障害となったのは、大気圏再突入の際に機体を守る耐熱シールドの開発だった。アメリカ合衆国は、アメリカ航空宇宙局が行った、超音波風洞による熱重量分析実験によってこの分野で優位性を持っていた。1968年12月24日、アポロ8号の乗組員フランク・ボーマン、ジム・ラヴェル、ウィリアム・アンダースの3人は初めて月の周回軌道に入り、また自らの目で月の裏を見た初めての人間になった。人間が初めて月面に立ったのは1969年7月20日で、アポロ11号のニール・アームストロングとエドウィン・オルドリンが初めて月面を歩いた。初めてのロボット月面車はソビエト連邦のルノホート1号で、ルノホート計画の一環として1970年11月17日に打ち上げられた。これまでのところ最後に月面を歩いたのは、1972年12月に月に到着したアポロ17号のユージン・サーナンとハリソン・シュミットである。ルナ16号、ルナ20号、ルナ24号及びアポロ11号からアポロ17号まで（アポロ13号を除く）によって月の石のサンプルが地球に持ち帰られた。1960年代半ばから1970年代半ばにかけて、65回の月面着陸が行われた。特に1971年は1年間で10回も行われたが、1976年のルナ24号を最後に突然止まってしまった。それ以降、ソビエト連邦は金星と宇宙ステーション、アメリカ合衆国は火星及びそれ以遠を目指すようになった。20世紀末以降の探査[編集]日本の宇宙機として初めて月に接近した「ひてん」。右上の小さな多面体が「はごろも」1990年、日本の工学実験探査機ひてんが月を訪れ、月の軌道に到達した3番目の国になった。ひてんは孫衛星のはごろもを月軌道に投入したが、トランスミッターが故障し、以降の科学的な探査はほとんどできなかった。2007年9月、日本は「月の起源と進化に関する科学的なデータを収集し、将来の月探査に向けた技術を開発すること」を目的に月周回衛星かぐやを打ち上げた[4]。かぐやは1年8か月にわたって月周回軌道で観測を続け、2009年6月11日に月面に衝突した。アメリカ航空宇宙局は、1994年に探査機クレメンタインを打ち上げた。クレメンタインは月周回軌道で2か月間観測を行った後、小惑星の観測に向かおうとしたところで故障した。1998年にはルナ・プロスペクターを打ち上げた。ルナ・プロスペクターは1年半にわたって月周回軌道で観測を続けた後、月面に衝突した。欧州宇宙機関は2003年9月27日に、小型で安価な月周回探査機スマート1を打ち上げた。スマート1の当初の目的は月表面の三次元X線画像、赤外線画像を撮ることだった。スマート1は2004年11月15日に月周回軌道に入り、2006年9月3日まで観測を続けて、衝突時の噴煙を観測するため、意図的に月面に衝突した[5]。中華人民共和国は、資源の採取、特に地球のエネルギー源になりうるヘリウム3の採取の可能性を研究する嫦娥計画を開始し、2007年10月24日に月周回衛星嫦娥1号を打ち上げた[6]。嫦娥1号は1年以上にわたって月周回軌道で観測を続け、2009年3月に月面に衝突したとされる。2010年10月1日には嫦娥2号を打ち上げた。インド宇宙研究機関は、2008年10月22日に無人の月周回衛星チャンドラヤーン1号を打ち上げた[7]。当初は月の軌道を2年間周回し、月の三次元地図を作ることや月面の化学地図、鉱物地図を作ることを目的としていた[8][9]。この探査機は2008年11月14日15時4分（GST）に月に到着し、インドは月に到着した4番目の国になった[10]。不幸なことに、2009年7月にチャンドラヤーン1号の姿勢制御用スターセンサが故障した上、8月には本体が過熱したために通信が途絶し、わずか10か月で早期にミッションを終了した。月面での水の発見[編集]チャンドラヤーン1号に積まれた装置が月面に大量の水を発見し、月面での水探査は終わるのではないかという観測が宇宙科学者の間に広まった。宇宙関連のニュースのポータルサイトであるSpace Refのレポートは、NASAが開発したMoon Mineralogy Mapper（M3）によってもたらされたこの発見について、木曜日にNASAの本部で会見が開かれると報じた。画像分光計M3はチャンドラヤーン1号に積まれた11個の計器のうちの1つで、月面全体の初めての鉱物地図を作ることを目的としていた。Nature Newsの最近のレポートでは、詳細なスペクトルの解析によって、月の極地方に水変性した鉱物が大量に見つかった」と報じた。月面には、実は鉱物に閉じ込められているだけではなく、地表の割れ目やもしかしたら地中深くに氷の塊や層がある可能性がある等、色々な形で至る所に存在している可能性が指摘されている。NASAのルナー・リコネサンス・オービターは、広い範囲の水シグナルを検知し、これらのシグナルは月面での居住に重要な役割を持つと報じられている[11][12][13]。インド宇宙研究機関によると、チャンドラヤーン1号の打ち上げ22日後に水の存在を確実とする証拠を掴んだとしているが、公開することは時期尚早だとして拒んでいる。LRO / エルクロス[編集]NASAは、将来の有人探査に備えた予備的な無人ミッションとして、2009年6月18日にルナー・リコネサンス・オービター (LRO) とエルクロスを打ち上げた。10月9日、両探査機の打ち上げに使用されたセントールロケット（重量2.4トン）が時速9,000kmで月の南極近くにあるカベウスクレーターに衝突した。エルクロスは月面の水の存在について証拠を掴むため、この衝突により舞い上がった塵を観測し、約4分後には自らも月面に衝突した。LROは月の周回軌道に乗り、高い解像度で月面を撮影し続けている。11月13日、NASAは衝突時に噴出された物質から水が検出されたことを発表した[14]。今後の計画[編集]嫦娥2号2004年1月14日、アメリカ合衆国大統領ジョージ・W・ブッシュはビジョン・フォー・スペース・エクスプロレーションを宣言し、この中で2020年までに新しい有人月ミッションを策定する計画が発表された。この目標を達成するNASAのコンステレーション計画が2005年3月19日に公表され[15]、批評家からは、すぐに\"アポロ2.0\"とあだ名された。しかし、この計画は2010年に予算の圧迫などを理由に中止されている。中国は、2012年に月に探査車を送り、2017年にサンプルリターンすることを計画している。また、有人での月面探査も計画中である。インドは、2010年から2011年に新しい月ミッションを開始し、サンプル回収や実験を行う探査車を上陸させることを計画している。探査車を使って、水を探すために月面を掘ることも計画している。また、インド宇宙研究機関は2014年までに有人飛行を、2020年までに有人月探査を行うことも計画している[16]。日本の宇宙航空研究開発機構は、2014年頃にかぐや後継機 (SELENE-2) を打上げ、日本初の月面着陸を予定している。さらに2020年までに有人月探査、2030年までに月面基地の建設を計画しているが、この計画への予算はついていない状況である[17]。ロシアも、かつて凍結されたルナグローブ計画を再開し、2012年に無人探査車、軌道船を打ち上げることを計画している[18]。ドイツも2007年3月に、2012年までに月周回探査機レオを打ち上げると発表したが[19]、資金上の制約により中止となった[20]。2007年8月、NASAは今後の月探査では全て国際単位系を用いると発表した。これにより、既に国際単位系を用いている他国の宇宙機関との協業が促進されることが期待される[21]。欧州宇宙機関は、オーロラ計画の一環として月への有人探査の意志を持っていることを表明した。2007年9月13日、Xプライズ財団はGoogle社の協力を得て、Google Lunar X Prizeの開催を発表した。このコンテストでは、「民間の資金により月面に探査車を着陸させ、500m以上の走行、地球へ動画、静止画、データを送信すること、等のいくつかの課題を達成すること」を求めている[22]。関連項目[編集]月面着陸宇宙開発宇宙開発競争宇宙探査機月面車アポロ計画出典[編集]^ a b c d e f g “The Galileo Project”. 2007年9月14日閲覧。^ Энциклопедия для детей (астрономия). Москва: Аванта+. (1998). ISBN 5-89501-016-4. ^ Special Message to the Congress on Urgent National Needs Page 4 - John F. Kennedy Presidential Library & Museum^ “Kaguya (SELENE)”.  JAXA. 2009年11月13日閲覧。^ “ESA's Moon mission ends successfully”.  ESA (2006年9月). 2006年9月3日閲覧。^ David, Leonard (2003年3月). “China Outlines its Lunar Ambitions”.  Space.com. 2006年3月20日閲覧。^ http://www.ndtv.com/convergence/ndtv/Moonmission/Election_Story.aspx?id=NEWEN20080069654^ “Chandrayaan-1 Scientific Objectives”.  Indian Space Research Organisation. 2009年11月12日閲覧。^ http://www.deccanherald.com/CONTENT/Sep192008/national2008091890838.asp^ “India sends probe on to the Moon”.  BBC (2008年11月). 2008年11月16日閲覧。^ http://www.washingtonpost.com/wp-dyn/content/article/2009/09/23/AR2009092303733.html?hpid%3Dmoreheadlines^ http://www.hindu.com/2009/09/23/stories/2009092357770100.htm^ http://www.guardian.co.uk/science/2009/sep/24/discovery-water-moon-lunar-base^ 月の南極にまとまった水　NASA、探査機で確認 - 47NEWS 2009年11月13日^ “How We'll Get Back to the Moon”.  NASA. 2006年3月20日閲覧。^ Staff Writers (2004年11月4日). “Competition heating up for Moon exploration”.  IOL. 2008年1月25日閲覧。^ Staff Writers (2006年8月3日). “Japan Plans Moon Base By 2030”. Moon Daily.  SpaceDaily. 2006年11月17日閲覧。^ Covault, Craig (2006年6月4日). “Russia Plans Ambitious Robotic Lunar Mission”. 2008年11月16日閲覧。^ news, Spiegel (2007年2月28日). “Germany plans own Moon mission”. 2008年11月16日閲覧。^ [1]^ NASA - Metric Moon^ “Google Sponsors Lunar X PRIZE to Create a Space Race for a New Generation”.  X PRIZE Foundation. 2007年9月13日閲覧。外部リンク[編集]ウィキメディア・コモンズには、月探査に関連するカテゴリがあります。月探査情報ステーション月・惑星探査プログラムグループ - JAXALunar mission timeline - NASARecent Lunar missions - NASA表・話・編・歴月探査機プログラム1970年代までパイオニア · ルナ · レインジャー · ゾンド · サーベイヤー · ルナ・オービター · ルノホート1980年代以降嫦娥計画 · 無人月探査計画（英語版）オービター1970年代までエクスプローラー35号1980年代以降ひてん · クレメンタイン · ルナ・プロスペクター · スマート1 · かぐや（おきな · おうな） · 嫦娥1号 · チャンドラヤーン1号 · ルナー・リコネサンス・オービター · 嫦娥2号 · GRAIL計画段階ルナグローブ1号 · LADEE（英語版） · チャンドラヤーン2号 · ILNノード1（英語版） · ILNノード2（英語版） · 嫦娥3号構想段階SELENE-2 · MoonLITE（英語版） · MoonRaker（英語版） · ルナグローブ2号 · Google Lunar X Prize · ILNノード3（英語版） · ILNノード4（英語版） · 嫦娥4号 · MoonNext（英語版）フライバイ1970年代までルナ1号 · ルナ3号1980年代以降のぞみ · ガリレオ · カッシーニインパクタールナ2号 · MIP（英語版） · エルクロス中止LUNAR-A · ルナー・オブザーバー（英語版） · LEO（英語版）関連項目月 · 月探査 · 月の植民 · 有人月面探査機（英語版） · 月にある人工物の一覧太字 は現役の宇宙機を示す表・話・編・歴太陽系の探査と観測他の惑星探査月探査 ·  水星探査  ·  金星探査（英語版）  ·  火星探査 (探査機)  ·  木星探査  ·  土星探査  ·  天王星探査  ·  海王星探査一覧他の天体に到達 ·  探査機  ·  ラグランジュ点  ·  年表他天体にある物体地球以外の天体 ·  月  ·  金星  ·  火星「http://ja.wikipedia.org/w/index.php?title=月探査&oldid=47098554」から取得 カテゴリ: 月探査\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f146"},"body":"Python出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、プログラミング言語について記述しています。その他の用法については「パイソン」をご覧ください。Pythonパラダイムマルチパラダイム登場時期1990年設計者グイド・ヴァンロッサム開発者パイソンソフトウェア財団最新リリース3.3.2 / 2013年5月16日2.7.5 / 2013年5月16日型付け強い動的型付け主な処理系CPython, Jython, IronPython, PyPy, Unladen Swallow影響を受けた言語ABC, C, Haskell, Icon, Lisp, Modula-3, Perl, Smalltalk, Tcl影響を与えた言語Ruby, Boo, Perl, JavaScriptプラットフォームクロスプラットフォームライセンスPython Software Foundation Licenseウェブサイトhttp://www.python.orgテンプレートを表示プログラミング言語>>他のプログラミング言語■カテゴリ / ■テンプレートPython（パイソン）は、オランダ人のグイド・ヴァンロッサムによって開発されたオープンソースのオブジェクト指向スクリプト言語。イギリスのテレビ局 BBC が製作したコメディ番組『空飛ぶモンティ・パイソン』にちなんで名付けられた。Pythonという英単語は爬虫類のニシキヘビを意味し、Python言語のマスコットやアイコンとして使われることがある。Perlとともに欧米で広く普及している[要出典]。目次1 概要1.1 特徴1.2 動作するプラットフォーム1.3 実装1.4 ライセンス2 歴史2.1 0.9x2.2 1.x2.3 2.x2.4 3.x2.5 Python の時系列2.6 Pythonに影響を与えた言語3 言語の機能3.1 文法3.2 データ型3.3 オブジェクト指向プログラミング3.4 ライブラリ3.5 多言語の扱い4 利用4.1 教育用5 脚注6 関連項目7 外部リンク概要[編集]Pythonは汎用の高水準言語である。プログラマの生産性とコードの信頼性を重視して設計されており、核となるシンタックスおよびセマンティクスは必要最小限に抑えられている反面、利便性の高い大規模な標準ライブラリを備えている。Unicodeによる文字列操作をサポートしており、日本語処理も標準で可能である。 多くのプラットフォームをサポートしており（動作するプラットフォーム）、また、豊富なドキュメント、豊富なライブラリがあることから、産業界でも利用が増えつつある。特徴[編集]Pythonはインタプリタ上で実行されることを前提に設計されており、以下のような特徴をもっている:動的な型付けガベージコレクションマルチパラダイムモジュール、クラス、オブジェクト等の言語の要素が内部からアクセス可能であり、リフレクションを利用した記述が可能。動作するプラットフォーム[編集]Pythonの最初のバージョンはAmoeba上で開発されたが、のちに多くのプラットフォーム上で動作するようになっている。Windows, Windows CE（9x系およびNT系は最新版、Windows 3.1およびMS-DOSは旧版のみ）Macintosh（OS 9以前およびOS X以降ともに）各種UNIXLinux（Linux Standard Base3.2で標準仕様となった）Plan 9（Python 3.xは未移植）PalmOSS60Javaプラットフォーム (Jython).NET Frameworkプラットフォーム (IronPython)実装[編集]Pythonには複数の実装が存在する。CPython - 作者によってC言語で書かれたバージョン。通常「Python」といえばこのCPythonを指す。Stackless Python - Cスタックを使わずに独自のスタック（Pythonスタック）で実装したもの。Unladen Swallow - GoogleのチームによるPythonの実装Jython - Java仮想マシン上に移植したもの。PythonからJavaのライブラリを使うことができる。IronPython - .NET Framework/Monoで動作するPython。C#で実装されている。.NET Frameworkのライブラリを使うことができる。動的言語ランタイム上に構築されているため、既存の.NETアプリケーションへマクロ言語として搭載することも可能となっている。PyPy - PythonによるPythonインタプリタの実装Psyco - CPython向けのJITコンパイラPyMite - 組み込み向けの実装、AVRなどに対応。tinypy - 同じく組み込み向けの実装。ソースコードが64kb未満と非常に軽量なことが謳われている。ライセンス[編集]Python のリリースは全てオープンソースであり、PSF(Python Software Foundationライセンス)として配布されている。これはGPL互換であるが、GPLと異なり、変更したバージョンを配布する際に変更をオープンソースにしなくてもよい。歴史[編集]元々はAmoebaの使用言語であるABC言語に例外処理やオブジェクト指向を対応させるために作られた言語である[1]。0.9x[編集]1991年にヴァンロッサムによってPython.0.90のソースコードが公開された。この時点ですでにオブジェクト指向言語の特徴である継承、クラス、例外処理、メソッドやさらに抽象データ型である文字列、リストの概念が導入されている。これはModula-3のモジュールを参考にしていた。1.x[編集]1994年1月、Python1.0がリリースした。主な特徴として関数型言語の基本であるラムダ計算を実装、map関数、reduce関数などが組み込まれている。バージョン1.4ではCommon Lispにある機能とよく似たキーワード引数が導入された。また簡易ながら名前修飾を用いたカプセル化も実装された。2.x[編集]2000年に公開。ガベージコレクションやUnicode、リストが導入され一躍メジャーな言語となった。多くの機能をHaskellから参考している。3.x[編集]2008年、長いテスト期間を経てPython3.0がリリースされた。 開発初期には、西暦3000年にリリース予定の理想のPythonとして、Python 3000と呼ばれていたため、Py3Kと略されることもある。しかし2.xとの後方互換性が損なわれており、2.xから3.xへの片方向の変換スクリプトが用意されているものの使用者がまだまだ少ないのが現状である[要出典]。Python の時系列[編集]1990年代始め - オランダにあるStichting Mathematisch Centrum(CWI)で、グイド・ヴァンロッサムによってPythonの初期バージョンが作成される。1995年 - ヴァンロッサムは米国ヴァージニア州レストンにあるCorporation for National Research Initiatives(CNRI) に移動。ここでPythonの開発に携わり、いくつかのバージョンをリリースする。2000年3月 - ヴァンロッサムとPythonのコア開発チームは BeOpen.com に移り、BeOpen PythonLabs チームを結成する。同年10月、PythonLabsチームはDigital Creations(現在のZope Corporation) に移る。2001年 - Pythonに関する知的財産を保有するための非営利組織Python Software Foundation(PSF) が立ち上がる。このときZope CorporationはPSFの賛助会員となる。Pythonに影響を与えた言語[編集]ABC（インデントによる構文）Modula-2, -3（モジュール機能、オブジェクト指向）Icon（辞書、スライス演算子など）SETL（リストの内包表現）C, C++（基本的な構文）Smalltalk（仮想マシン機構、動的性）Lisp, Scheme（関数型言語の機能）言語の機能[編集]Pythonは言語自身の機能をできるだけ小さくおさえ、ユーザがいつも必要とする最小限の機能のみを提供するように作られている。これはPerlのTIMTOWTDI（there's more than one way to do it - あることをするのにいくつものやり方がある）という哲学とは対照的であり、Pythonでは多くのユーザによって書かれた同一の仕事をするプログラムは、だいたいどれも同じようなコードに収束する。基本機能にないものの多くはライブラリによって提供されている。また、Pythonではプログラムの文書化（ソフトウェアドキュメンテーション）が重視されており、言語の基本機能の一部となっている。グイド・ヴァンロッサムはPython設計以前に教育用言語であるABCの開発にかかわっているが、Pythonは教育を目的として設計されたわけではない[2]。Pythonには、読みやすく、それでいて効率もよいコードをなるべく簡単に書けるようにするという思想がすみずみまで浸透しており、Pythonコミュニティでもわかりやすいコードをよしとする傾向が強い[3]。文法[編集]決してPython独自の特徴ではないが、しばしば代表的な文法的特徴として挙げられるのが、「インデント（字下げ）」である。Pythonではブロック構造を記述するためにインデントを用いる。ブロック構造は、他のメジャーなプログラミング言語（たとえばC言語など）においては、カーリーブラケット（\"{ }\"。「中括弧」と呼ばれる）を用いて表記されることが多い。しかし、Pythonではこれを行頭からの空白（インデント）によって表記する。これは、「見た目のブロック構造」と「実際の論理的な制御構造」を結びつける手法であり、視覚に訴えるコードの使用を強制する、という意義をもつ。以下に、C言語とPythonで再帰呼び出しを用いて階乗を計算する例を示す。Pythonのコード:def factorial(x):if x == 0:return 1else:return x * factorial(x - 1)わかりやすく整形されたC言語のコード:int factorial(int x){if (x == 0) {return 1;} else {return x * factorial(x - 1);}}この例では、Pythonと整形されたC言語とでは、プログラムコードの間に違いがほとんど見られない。しかし、C言語のコードに施されたインデントは（言語仕様においては）単なるコーディングスタイルのひとつにすぎないため、C言語では（言語仕様においては）全く同じプログラムを以下のように書くこともできる。わかりにくいC:int factorial(int x) {if(x == 0) {return 1;} else{return x * factorial(x - 1); } }Pythonではインデントは単なるスタイルではなく、必須の文法であるため、こうした書き方は不可能である。Pythonではこのような強制を課すことによって、プログラムのスタイルがその書き手にかかわらずほぼ統一したものになり、その結果読みやすくなるという考え方が取り入れられている。これについては賛否両論があり、批判的立場の人々からは、これはプログラマがスタイルを選ぶ自由を制限するものだ、という意見も出されている。インデントによる整形は、単に「見かけ」だけではなく品質そのものにも関係する。例として次のコードを示す。間違えたC:if (x > 10)x = 10;y = 0;このコードは文法的には正しいが、言語仕様上のブロックの範囲と、インデントが表現するそれとが異なっているため、プログラマの意図が曖昧になる。この曖昧さは、検知しにくい不具合を生む原因になり得る。ソースコードを読む際、多くの人はインデントのような空白によって明確に整列されたコードを目安として読み、コンパイラのように構文解析しながらソースを読むものではない。その結果、文法は正しく、見た目も一見正しく見えるような不具合を作成してしまう危険性がある。Pythonでは、インデントを文法の一部に組み入れることにより、人間が目視するソースコードの理解と、コンパイラの構文解析の間の誤差を少なくすることで、より正確に意図した通りにコーディングすることができるようになっている。データ型[編集]Pythonのデータは動的に型付けされる。値自身が型を持っており、変数はすべて値への参照である。基本的なデータ型として、整数型・多倍長整数型・浮動小数点数型・複素数型・文字列型・Unicode文字列型・論理型、そして関数型がある。多倍長整数型は（メモリの許す限り）無制限の桁数で整数計算が可能である。さらに組み込みのコンテナ型として、リスト型、タプル型、辞書型（連想配列）のほか、値の重複を許さない集合型（Python 2.3以降）がある。Python 3.x以降では、整数型が多倍長整数型と統合され、従来の文字列型とUnicode文字列型に代わり、バイト列型と文字列型が導入された。リスト型および辞書型は内部の値をあとから変えられる（mutable、変更可能）が、タプル型は一度構築したら内部の値は変わらない（immutable、変更不能）。タプル型とリスト型は、多くのプログラミング言語では配列と呼ばれるものに類似している。しかし、Pythonではタプル型は辞書のキーとして使うことができるが、リスト型は内容が変わるため辞書のキーとして使うことはできないという理由から、これら 2つの型を区別している。集合型には変更可能なものと変更不能なものの 2種類がある。多くのオブジェクト指向プログラミング言語と同様、Pythonではユーザが新しく自分の型を定義することも可能である。この場合、組み込み型を含む既存の型を継承して新たな型（クラス）を定義する事も、ゼロから全く新しい型を作り出す事も出来る。Pythonは基本的にメソッドや関数の引数に型を指定する必要がないので、内部で必要とする演算子やメソッドに対応していれば、関数やオブジェクトの設計時点で意図していなかったオブジェクトを引き渡すことも可能である（いわゆるダック・タイピングが可能）Pythonはガベージコレクションを内蔵しており、参照されなくなったオブジェクトは自動的にメモリから破棄される。CPythonでは、ガベージコレクションの方式として参照カウント方式とマーク・アンド・スイープ方式を併用している。マーク・アンド・スイープ方式のみに頼っている言語では、オブジェクトがいつ回収されるか保証されないので、ファイルのクローズなどをデストラクタに任せることができない。CPythonは参照カウント方式を併用することで、循環参照が発生しない限り、オブジェクトはスコープアウトした時点で必ずデストラクトされることを保証している。 JythonおよびIronPythonではマーク・アンド・スイープ方式を採用しているためスコープアウトした時点で必ずデストラクトされることが前提のコードだとJythonやIronPythonでは正しく動かない。イテレータを実装するためのジェネレータが言語仕様に組み込まれており、Pythonでは多くの場面でイテレータを使うように設計されている。イテレータの使用はPython全体に普及していて、プログラミングスタイルの統一性をもたらしている。オブジェクト指向プログラミング[編集]Pythonでは扱えるデータの全てがオブジェクトである。単純な数値といった基本的なデータ型をはじめ、組み込みのコンテナ型、組み込み関数など、これらは全て統一的な継承関係をもつオブジェクトであり「型」をもっている。これらの組み込み型とユーザ定義型は区別されず、組み込み型を継承したクラスを定義できる。上の「データ型」の項で述べたように Pythonは静的な型チェックを持たないため、Javaのようなインターフェイスという言語上の仕組みは必要とされない。クラスの継承 (inheritance) メカニズムでは、複数の基底クラスを持つことができ（多重継承）、導出されたクラスでは基底クラスの任意のメソッドをオーバライド（override、上書き）することが可能である。また、オブジェクトには任意のデータを入れることができる。これらのメソッドやデータは、基本的に、すべてpublicであり、virtual（仮想）である。ただし、先頭にアンダースコアをもつメンバをprivateとすることができる。これは単なるマナーであるが、アンダースコアを2つもつ場合は、クラスの外部からメンバの名前を隠された状態（難号化（mangle））とすることでカプセル化を実現できる。また、ほとんどの組み込み演算子（算術演算子（arithmetic operator）や添字表記）はクラスインスタンスで使うために再定義することが可能となっている。ライブラリ[編集]Pythonには「電池が付属しています（\"Battery Included\"）」の思想があり、プログラマがすぐに使えるようなライブラリや統合環境をあらかじめディストリビューションに含めるようにしている。このため標準ライブラリは非常に充実しており、これには、正規表現、OSのシステムコール、XML処理系、シリアライゼーション、HTTP、FTP等の各種通信プロトコル、電子メールやCSVファイルの処理、データベース接続 (SQLiteを標準で扱える)、GUIフレームワーク (Tkinter)、そしてHTMLやPython自身のコードの構文解析ツールなどが含まれる。サードパーティによるライブラリも豊富に存在する。行列演算パッケージのNumPy、画像処理のためのPython Imaging Library、SDLのラッパであるPygameなどがよく知られている。マイナーなものまで含めると多すぎて収拾がつかなくなったため、Python Package Index (PyPI) と呼ばれる公式のパッケージリポジトリが導入された。多言語の扱い[編集]Pythonは当初1バイト単位での文字列型のみ扱い、かな漢字のようなマルチバイト文字をサポートしていなかったが、Python 2.0からUnicode文字型が新たに導入された。Python 3.0では、文字列型がバイト列型に、Unicode文字列型が文字列型に変更された。 従来は文字列の表現方法として2通り（旧文字列型と旧Unicode文字列型）があったが、これを1通り（新文字列型=旧Unicode型）に統一し、旧文字列型は単なるバイト列型として再定義された。 これにより、Python 3.0では、文字列を扱う際には後述の変換処理を必ず行う必要がある。 ファイル入出力など、エンコードを明示しなければ標準エンコードを用いて暗黙に行われる場合も多い。 これにより、多言語の扱いを一貫したものにしている。Pythonでは文字のバイト列表現（エンコーディング）とUnicodeの内部表現を明確に区別している。Unicode文字はメモリ中に保持される抽象的なオブジェクトであり、画面表示やファイルへの入出力のさいには、変換ルーチン（コーデック）を介して特定のエンコーディングのバイト列表現と相互変換する。また、ソースコード中の文字コードを認識する機能があり、これによって異なる文字コードで書かれたプログラムの動きが異なるという危険を解消している。Pythonでは変換ルーチンをモジュールとして追加することで、さまざまなエンコーディングに対応できるようになっている。日本語の文字コード (EUC-JP, Shift_JIS, MS932, ISO-2022-JP) に対応したコーデックも作成されている。Python 2.4からは、日中韓国語用のコーデックが標準でディストリビューションに含まれるようになったため、現在では日本語の処理に問題はほとんどなくなった。ただしGUIライブラリであるTkinterや統合開発環境のIDLEは、プラットフォームにもよるが、まだきちんと日本語に対応していないものもある。UTF-8で記述した日本語を含むCGIプログラムを実行すると、「Internal Server Error 500」が発生することがある。そのときはソース先頭部に、次のようにUTF-8によるコーディングであることを明示する。#!/usr/bin/python# coding: utf-8import cgi利用[編集]Pythonを使っている製品あるいはソフトウェアの一覧も参照。Pythonはおもに欧米の企業でよく使われている。大企業ではマイクロソフトやアップルなどのパッケージソフトウェア企業をはじめ、Google、Yahoo!、YouTube などの企業も利用している[4]。また携帯電話メーカーのNokiaでは、S60シリーズで Python アプリケーションが動く[5]。研究機関では、NASA[4]や日本の高エネルギー加速器研究機構[6]でPythonが使われている。適応範囲はWebプログラミング、GUIベースのアプリケーション、CAD、3Dモデリング、数式処理など幅広い分野に及ぶ。さらにスクリプト言語としての特性から、従来Perlやシェルスクリプトが用いられることの多かったシステム管理用のスクリプトとして採用しているOSも複数ある。また、多くの異なる言語で書かれたモジュールをまとめるグルー言語としての利用例も多い。実際、多くの商用アプリケーションで Python は組み込みのスクリプト言語として採用されている。教育用[編集]Pythonは汎用言語として設計されているがプログラミングの教育にも使用されている。また方針として非技術者向けといった利用を視野に入れながら開発され続けており[7]、作者も教育用として利用されていることについて期待感を示している。私の大好きなPython利用法は、騒ぎ立てずに、言語教育でプログラミングの原理を教えること。それを考えてくれ――次の世代の話だね。-- スラッシュドット・ジャパン『 Guido van Rossum へのインタビュー』脚注[編集][ヘルプ]^ Why was Python created in the first place?^ http://www.rakunet.org/tsnet/TSpython/35/1067.html^ “The Zen of Python”.  import this. 2011年8月5日閲覧。^ a b “Quotes about Python”. 2007年1月15日閲覧。^ “Python for S60”. 2007年1月17日閲覧。^ “KEKB: An Asymmetric Electron-Positron Collider for B-Factory in KEK”. 2007年1月17日閲覧。^ “EDU-SIG: Python in Education”. 2011年5月16日閲覧。関連項目[編集]MyHDL - Python言語ベースのハードウェア記述言語外部リンク[編集]ポータル FLOSSPython 公式サイト (英語) - ソフトウェアおよびマニュアルのダウンロード。日本Pythonユーザ会 - マニュアルの日本語訳を配布している。表・話・編・歴Python実装ChinesePython ·  CLPython ·  CPython ·  Jython ·  IronPython ·  PyPy ·  Python for S60 ·  Psyco ·  Stackless Python ·  Unladen SwallowフレームワークCherryPy ·  Web2py ·  Django ·  Pylons ·  TurboGears ·  Quixote ·  PIDA ·  PyDev ·  Spyder ·  Wing IDE統合開発環境（専用）Boa ·  IDLE ·  Stani's Python Editor総合開発環境（汎用）Visual Python IDE ·  PIDA ·  PyDev ·  Spyder ·  Wing IDE ·  Eric Python IDE ·  Geany ·  ActiveState  ·  omodo ·  MonoDevelop ·  NetBeans ·  wxGlade表・話・編・歴フリーソフトウェアとオープンソースソフトウェア全般コピーレフトフリーソフトウェアフリーソフトウェアの定義無料と自由（英語版）オープンソースソフトウェアパッケージの一覧（英語版）オープンソースのアンドロイドアプリケーションの一覧（英語版）フリーのウェブアプリケーションの一覧（英語版）フリーソフトウェアプロジェクトの一覧（英語版）/OSSホスティングサービスの比較以前はプロプライエタリだったソフトの一覧（英語版）オープンソースソフトウェアOS（英語版）AROSBSDDarwineCosFreeDOSGNUHaikuInfernoLinuxMachMINIXOpenSolarisSymbianPlan 9ReactOS開発（英語版）Basic For Qt（英語版）EclipseFreeBASICFree PascalGCCGambasJavaLLVMLuaNetBeansOpen64（英語版）PerlPHPPythonROSE（英語版）RubyTcl/Tk歴史（英語版）GNUHaiku（英語版）Linux（英語版）MozillaApplication Suite（英語版）Firefox（英語版）Thunderbird（英語版）団体Apacheソフトウェア財団Android Open Source ProjectBlender Foundation（英語版）Eclipse Foundationfreedesktop.orgフリーソフトウェア財団ヨーロッパインドラテンアメリカFSMI（英語版）GNOME FoundationGNU Project（英語版）Google CodeKDE e.V.（英語版）Linux FoundationMozilla FoundationOpen Source Geospatial Foundation（英語版）Open Source InitiativeSoftware Freedom ConservancySourceForgeSymbian FoundationThe Document FoundationXiph.Org FoundationXMPP Standards Foundation（英語版）X.Org FoundationライセンスApacheArtisticBeerware（英語版）Boost（英語版）BSDGNU GPLGNU LGPLISCMITMPLMs-PL/RLzlibパブリックドメイン/CC0（英語版）WTFPLフリーソフトウェア財団が承認したライセンス（英語版）ライセンス標準オープンソースの定義フリーソフトウェアの定義Debianフリーソフトウェアガイドライン課題バイナリ・ブロブデジタル著作権管理 (DRM)グラフィックハードウェアとの互換性（英語版）ライセンスの氾濫Mozilla関連ソフトウェアのブランド変更プロプライエタリ・ソフトウェアSCO-Linux論争（英語版）セキュリティ（英語版）ソフトウェア特許ハードウェア制限（英語版）Trusted Computing（英語版）ウィルス性ライセンスTiVo化その他代替用語（英語版）コミュニティ（英語版）Linuxディストリビューションフォーキング運動Microsoft Open Specification Promise（英語版）Revolution OSオープンソースとクローズドソースの比較（英語版）Portal:FLOSS「http://ja.wikipedia.org/w/index.php?title=Python&oldid=48280400」から取得 カテゴリ: プログラミング言語オブジェクト指向言語スクリプト言語オープンソースPython隠しカテゴリ: 出典を必要とする記述のある記事/2013年6月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f147"},"body":"溶媒出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索水は最も身近で代表的な溶媒である。溶媒（ようばい、solvent）とは、固体、液体あるいは気体を溶かす液体の呼称。工業分野では溶剤（ようざい）と呼ばれることも多い。最も一般的に使用される水のほか、アルコールやアセトン、ヘキサンのような有機物も多く用いられ、これらは特に有機溶媒（有機溶剤）と呼ばれる。溶媒に溶かされるものを溶質といい、溶媒と溶質を合わせて溶液という。溶媒としては、目的とする物質を良く溶かす（溶解度が高い）ことと、化学的に安定で溶質と化学反応しないことが最も重要である。目的によっては沸点が低く除去しやすいことや、可燃性や毒性、環境への影響などを含めた安全性も重視される。また、化学反応では、溶媒の種類によって反応の進み方が著しく異なることが知られている（溶媒和効果）。一般的に溶媒として扱われる物質は常温常圧では無色の液体であり、独特の臭気を持つものも多い。有機溶媒は一般用途としてドライクリーニング（テトラクロロエチレン）、シンナー（トルエン、テルピン油）、マニキュア除去液や接着剤（アセトン、酢酸メチル、酢酸エチル）、染み抜き（ヘキサン、石油エーテル）、合成洗剤（オレンジオイル）、香水（エタノール）あるいは化学合成や樹脂製品の加工に使用される。目次1 特性の指標1.1 極性・溶解性・混和性1.2 プロトン性1.3 沸点1.4 密度2 安全性2.1 火災2.2 毒性2.3 使用上の全般的な注意3 精製4 代表的な溶媒の物性5 関連項目6 外部リンク特性の指標[編集]極性・溶解性・混和性[編集]溶媒と溶質は大別すると「極性（親水性）」と「無極性（疎水性）」とに区分することができるが、比較の問題なので明確な線引きはない。極性は誘電率または双極子モーメントで評価される。使用する溶媒の極性は、どのような種類の化合物を溶解させるか、あるいはどのような溶媒や液体化合物と混和させるかで使い分けられる。経験則として、極性溶媒は極性物質との組み合わせが良く、無極性溶媒は無極性物質との組み合わせが良いとされ、これは「似たものに溶ける」と言い表される。具体的には、無機塩（例えば食塩）や糖類（例えばショ糖）など極性の大きい物質は水のような高極性溶媒にしか溶けず、また油や蝋など極性が小さい物質はヘキサンのような低極性溶媒にしか溶けない。また、水とヘキサン（例えば食酢とサラダ油）とは相互に混和せず、良く振り混ぜてもすぐに二層に分離するが、前者は多くの極性溶媒と、後者は多くの非極性溶媒と混和する。溶解性の定量的な指標としては溶解パラメーターが用いられる。プロトン性[編集]極性溶媒はプロトン性極性溶媒と非プロトン性極性溶媒とに分類される。プロトン性溶媒とは、プロトン供与性を持つ溶媒のことである。多くのプロトン溶媒は酸素あるいは窒素原子に結合した比較的酸性度の高い水素を持ち、同時に酸素あるいは窒素は非共有電子対も持つことからプロトンを受容できる性質（ルイス塩基性）も併せ持つ。この性質によりプロトン性溶媒は溶媒分子間で水素結合を形成している溶媒でもある。水 (H2O)、エタノール (CH3CH2OH) 、酢酸 (CH3C(=O)OH) などが例として挙げられる。非プロトン性極性溶媒としてはアセトニトリル (CH3C≡N) 、アセトン (CH3C(=O)CH3) などが挙げられる。プロトン性極性溶媒はイオンを安定化する効果があるためSN1反応などイオンを経由する反応に良く用いられ、非プロトン性極性溶媒はSN2反応などに好んで用いられる。ドナー数やアクセプター数を指標とする。沸点[編集]溶媒の重要な特性に沸点と気化熱が挙げられ、それにより蒸発の速さが決定付けられる。ジエチルエーテル、塩化メチレン、アセトンなど少数の低沸点溶媒は室温で秒単位の時間で乾く溶媒として用いられる。一方、水やジメチルスルホキシドのような高沸点溶媒を速く乾かすには、高温にしたり、空気を還流させたり、減圧するなどの方法が必要である。密度[編集]多くの有機溶媒は水よりも密度が小さく、水の上に浮かぶものが多い。例外的に塩化メチレンやクロロホルムなどハロゲン系溶媒の一部や酢酸などは水よりも比重が大きい。安全性[編集]火災[編集]多くの溶媒が可燃性か引火性であり、その性質は揮発性と関連している。塩化メチレンやクロロホルムは例外的に難燃性である。空気と溶媒蒸気の混合物は爆発することがある。溶媒蒸気は空気よりも重く、床に沈んで広範囲に薄まらずに広がる。空のドラム缶や溶媒缶の中にも溶媒蒸気は存在し得る。ジエチルエーテルやテトラヒドロフラン (THF) などエーテル類は酸素と光に曝しておくと、爆発性の高い過酸化物を形成する（自動酸化）。これらの過酸化物は蒸留時に高沸点留分に濃縮されることが多い。エーテル類は暗所で BHT のような安定化剤を加えたりして保存する。毒性[編集]ほぼ全ての有機溶媒は有害である。多くの有機溶媒は大量吸引時に急激な意識喪失を起こし得、麻酔作用を有している。ジエチルエーテルやクロロホルムは歴史的には医療用の麻酔薬や鎮痛剤として使用されたこともあったが、常用すると神経が冒される（神経毒性）、もしくは癌を誘発するなど健康上の障害を引き起こす。発癌性の観点からは、クロロホルムの他にも、（ガソリンにも含まれる）ベンゼンやHMPAなどは、発癌性を有する、もしくはその可能性があると考えられている。メタノールは代謝により生成するギ酸のため、視神経に障害を与え、失明さらには死亡することもある。その他、肝臓や腎臓あるいは大脳など臓器に障害を起こすものも多い。トルエンや酢酸エチルは毒物及び劇物取締法で劇物に指定されている。有機溶媒の毒性がしばしば問題となることから、比較的無毒な溶媒への置き換え、さらには水を溶媒として用いる、あるいは無溶媒で反応を行う、といった化学プロセスの開発が行われており、それらはグリーンサスティナブルケミストリーで扱われる研究内容である。使用上の全般的な注意[編集]溶媒蒸気に曝されることは避け、作業環境はドラフトチャンバーを用いたり換気を良くする。密閉容器で保存する。可燃性溶媒は火の近くで封を開けてはならない。爆発や火災を避けるために引火性溶媒を床に流してはならない。溶媒蒸気を吸入してはならない。溶媒を皮膚につけてはならない。多くの溶媒は皮膚より容易に吸収される。精製[編集]溶媒には化学的安定性を維持するために安定剤が添加されている場合がある。また、水分やその他の不純物が混入している場合もある。これらを除去するために、モレキュラーシーブなどの乾燥剤による乾燥や、蒸留操作により精製が行われる場合が多い。代表的な溶媒の物性[編集]溶媒は、無極性溶媒、極性非プロトン性溶媒、極性プロトン性溶媒に分類した。極性は誘電率で表し、誘電率の順に並べた。無極性溶媒で水より密度の大きいものは太文字で示した。溶媒分子式沸点 (℃)誘電率密度 (g/mL)分類ヘキサン (Hexane)CH3CH2CH2CH2CH2CH3692.00.655無極性ベンゼン (Benzene)C6H6802.30.879無極性トルエン (Toluene)C6H5CH31112.40.867無極性ジエチルエーテル (Diethyl ether)CH3CH2OCH2CH3354.30.713無極性クロロホルム (Chloroform)CHCl3614.81.498無極性酢酸エチル (Ethyl acetate)CH3C(=O)OCH2CH3776.00.894無極性塩化メチレン (Methylene chloride)CH2Cl2409.11.326無極性テトラヒドロフラン (Tetrahydrofuran, THF)C4H8O667.50.886極性非プロトン性アセトン (Acetone)CH3C(=O)CH356210.786極性非プロトン性アセトニトリル (Acetonitrile)CH3C≡N82370.786極性非プロトン性N,N-ジメチルホルムアミド (N,N-Dimethylformamide, DMF)HC(=O)N(CH3)2153380.944極性非プロトン性ジメチルスルホキシド (Dimethyl sulfoxide, DMSO)CH3S(=O)CH3189471.092極性非プロトン性酢酸 (Acetic acid)CH3C(=O)OH1186.21.049極性プロトン性1-ブタノール (n-Butanol)CH3CH2CH2CH2OH118180.810極性プロトン性2-プロパノール (2-propanol)CH3CH(OH)CH382180.785極性プロトン性1-プロパノール (1-Propanol)CH3CH2CH2OH97200.803極性プロトン性エタノール (Ethanol)CH3CH2OH79240.789極性プロトン性メタノール (Methanol)CH3OH65330.791極性プロトン性ギ酸 (Formic acid)HC(=O)OH100581.21極性プロトン性水 (Water)H2O100800.998極性プロトン性関連項目[編集]溶液濃度シンナー有機溶剤作業主任者外部リンク[編集]Table 有機溶媒の特性（英語）Table and text O-化学解説（英語）Tables 有機溶媒の特性と毒性（英語）化学物質情報（安全衛生情報センター）「http://ja.wikipedia.org/w/index.php?title=溶媒&oldid=47857432」から取得 カテゴリ: 溶媒溶液化学有機化学液体\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f148"},"body":"トイレットペーパー出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索トイレットペーパートイレットペーパー（便所紙、Toilet paper）とは、便所で用を足す際に後始末に用いられる紙。普通巻紙（ロール紙）になっているので、トイレットロールとも呼ぶ。俗に「便所紙」とも呼ばれる。日本では「ティシュペーパー及びトイレットペーパー」として家庭用品品質表示法の適用対象とされており雑貨工業品品質表示規程に定めがある[1]。また、日本では日本工業規格によって品質や寸法などが細かく定められており[2]、通常、便所の各個室備え付けのホルダーにとりつけてある。しかし、国によってはロールがかなり大きく、その場合はホルダーもそれに対応したものとなっており、これが個室の入口に設置され必要分を取ってから個室に入るようになっている場合もある。紙パックなど、さまざまなものがトイレットペーパーにリサイクルされており、最近では鉄道の使用済み切符もリサイクルされており、収集された切符は製紙工場において分離（磁気を抜く工程）・殺菌・洗浄・漂白等の工程を経てトイレットペーパーにリサイクルされている。目次1 歴史2 設置方法3 トイレットペーパーの種類4 脚注5 関連項目6 外部リンク歴史[編集]トイレットペーパーは14世紀に中国で最初に生産されたとされている。その当時は皇帝用であった。便所用につくられた初めての工業製品は1857年にアメリカ合衆国のジョセフ・カエティによってつくられた。カエティの名前はすべての紙に印刷された。トイレットペーパーやちり紙が普及する前は、裕福な人は羊毛、レース、麻を用いていた。そうでない人は、直接手を用いるか、ぼろ布、かんなくず、草、干し草、石、砂、苔、水、雪、トウモロコシの皮、貝殻、木の葉などを用いて拭いていた。日本では便所の近くにヤツデを植える例もあった。また、使い捨ての物ではなく、洗って再利用する物もあった。古代ローマでは海綿を用いていた。日本では籌木（ちゅうぎ）という細長い板を用いていた。帝政ロシアでは、部下が皇帝が用いるトイレットペーパーに皇帝の刻印を押した。ヘンリー8世の宮廷では、その手で王族の臀部を清潔にする便所担当の廷臣がいた。安全上の理由のため、特に信頼された廷臣のみが選ばれた。また、王と毎日二人っきりになる好機であるため、その影響力を得たいためにこの仕事を望む部下は多かったという。江戸時代の日本の大奥では、御台所は自分では尻を拭かず、大奥女中に拭かせるのが慣習であったが、中にはこの慣習に馴染めず自分で尻を拭いた御台所もいた。日本では、トイレットペーパーが最初に求められたのは明治維新後で主にホテル、洋館で必要とされ、当時は日本にトイレットペーパーが無く、輸入していた。トイレットペーパー以前は、明治の中頃から長い間、古紙が原料のちり紙と、パルプから作られた京花紙（おとし紙）がトイレで使う紙として使われており、下水道工事が本格化した昭和30年前後から「汲み取り式」から「水洗式」へ「和式便器」から「洋式便器」へと変化し、それとともにちり紙メーカーがトイレットペーパーを作り始めた。トイレットペーパーが日本でも製造されるようになったのは大正後期のことで、今と違い吸水性が悪く溶けにくく、かたくて手でもんで使っていた。設置方法[編集]トイレットペーパーは紙巻器（トイレットペーパーホルダー）などで設置する。トイレットペーパーホルダーを2個配置した2連紙巻器もある。2個配置するのは紙切れが起きないようにしつつ1個がなくなった時点で補充でき紙を無駄にしないという利点があるためである[3]。2個配置でもトイレットペーパーを縦配置にセットし使用中のトイレットペーパーが完全に無くなって芯紙を取るまで次のトイレットベーパーが取り出せ無い盗難防止タイプもある。ホテルや百貨店、劇場、店舗等のトイレのトイレットペーパの先端はよく三角に折られホルダーにセットされているが、トイレットペーパーを三角に折るようになった風習は、トイレの掃除係が「掃除は完了しました」ということを他のスタッフに伝える手段として始まったという説がある。ホルダーを使用してトイレットペーパーを設置する場合、トイレットペーパーの向きには二つの可能性がある。どちらの方向にも利点があり、アメリカでは紙の先を上から手前にたらす人が多い。いずれを選ぶかは趣味や習慣の問題だが、標本調査を分析して社会的・経済的なステータスと関連があると指摘する論者もいる[誰?][要出典]。詳細は「トイレットペーパーの向き」を参照鉄道駅ではいたずらや盗難、放火を懸念してトイレットペーパーを設置していない場合があり、この場合トイレの前に設置された自動販売機で購入する。最近はサービス向上のために、トイレットペーパーが以前に設置されていなかった鉄道駅のトイレでも設置されているトイレが増えている。トイレットペーパーの種類[編集]エンボス加工されたトイレットペーパートイレットペーパー はシングル巻とダブル巻があり使用者の好みで選べ、使用者の利便性のためにミシン目などがいれられていたりすることが多く、清拭や吸収を目的とした使用感を向上させるために、製造過程でエンボス加工されている製品も多い。トイレットペーパーの芯は、ボール紙製が多いが、芯紙が無い、芯なしタイプや、水解紙製の芯であるものも存在する。公共のトイレでトイレットペーパー芯を不心得者によって水洗便器に捨てられ、詰まりが発生することあることあるが、芯紙が無い、芯なしタイプや、水解紙製の芯を使うことで、芯を便器に捨てられても詰まりの発生を防止することができるようになった。トイレットペーパー のカラーも様々で白色の他に、主に薄水色、薄ピンク色、薄黄色、薄緑色等があり、絵柄が印刷された物も存在しカラフルな個性的な絵柄の物も出回っている。また、トイレットペーパに香料が付けられトイレ内を芳香できる製品も存在している。トイレットペーパーの長さはJISで規格されおり、JISで規格されているトイレットペーパーの寸法は、1巻（ロール）の長さを27.5ｍ、32.5ｍ、55ｍ、65ｍ、75ｍ、100ｍの6種で、許容差+3となっている。脚注[編集]^ “雑貨工業品品質表示規程”.  消費者庁. 2013年5月23日閲覧。^ 日本工業規格（JIS P4501）^ “ティドビット〜水まわりのまめ知識〜”.  TOTO. 2013年5月25日閲覧。関連項目[編集]ウィキメディア・コモンズには、トイレットペーパーに関連するメディアがあります。製紙業ちり紙ティッシュペーパートイレットペーパー騒動水解紙水洗便所ワンタイムパッド - 暗号における使い捨ての乱数鍵外部リンク[編集]トイレットペーパー - トイレットペーパーに関する記事をあつめたポータルサイト。「http://ja.wikipedia.org/w/index.php?title=トイレットペーパー&oldid=48121543」から取得 カテゴリ: 衛生用紙日用品便所隠しカテゴリ: 言葉を濁した記述のある記事 (誰)/2012年7月-12月出典を必要とする記述のある記事/2012年12月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f149"},"body":"BigTable出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索BigTable（ビッグテーブル）とは、Googleの大規模なサーバ上の大量のデータを管理する為に設計されたデータベースシステムである。Googleの分散ストレージ・システムを支えている。目次1 特徴2 技術3 他の実装4 関連事項5 参考文献6 外部リンク特徴[編集]BigTableは、データ圧縮された高パフォーマンスのプロプライエタリなデータベースシステムである。Google File System（GFS）やChubby Lock Service、その他のいくつかのGoogleのプログラムで構築されている。今のところGoogle以外には供給されていない。2004年から作成され[1]、現在はMapReduce（BigTableに格納されたデータの生成や修正にしばしば使われている）[2]やGoogle Reader[3]、Google マップ[4]、Google Print、「My Search History」、Google Earth、Blogger、Google Code hosting, Orkut[4] 、YouTube[5]のようないくつものGoogleのアプリケーションで使用されている。Googleが自社のデータベースを開発する理由はコスト、スケーラビリティ、パフォーマンス特性のより良いコントロールなどである[6]。技術[編集]BigTableは高速で超大規模な列指向DBMSである。行ではなく、列からの高速な読み込みに焦点を当てている。BigTableは数百から数千台のサーバのペタバイトまでのデータを扱い、システムにサーバを簡単に増設して、再設定なしにそれらのリソースを自動的に利用し始めるように設計されている[7] 。各テーブルは多次元である。1つ1つのフィールドはその時点のスナップショットを持ち、バージョニングを行う事が出来る。テーブルはGFSに最適化されており、大きなテーブルは複数のTablet segment（タブレットセグメント）に自動的に分割される。分割はタブレットが200メガバイトのサイズになるように行の境界で行われる。サイズが特定の限界を超える兆候が見られた場合、テーブルはBMDiffとZippyアルゴリズムを使用して圧縮される。これらはLZWより圧縮率で劣るが、計算量で勝っている。タブレットのGFS内の位置（サーバのIPとPort）は、「META1」タブレットと呼ばれる複数の特別なタブレットにデータベースエントリとして記録されている。META1タブレットは1つだけある「META0」タブレットを照会する事で作成される。「META0」タブレットは通常は１つのマシンを占有している。「META1」タブレットの位置に関してクライアントから頻繁に問い合わせを受けるからである。「META1」タブレットはそれ自体が、実際のデータの位置についての答えを持っている。GFSマスターサーバのように、META0は通常はボトルネックにはならない。META1の位置を発見・送信する為に必要なプロセッサ時間と帯域はごく僅かである。クライアントは積極的に位置をキャッシュして、照会を必要最低限にするからである。他の実装[編集]Hadoopプロジェクトは、BigTableの現在の実装を目指して改良を加えられている。HBaseと呼ばれている。\"Just as Bigtable leverages the distributed data storage provided by the Google File System, Hbase will provide Bigtable-like capabilities on top of Hadoop.\"Hypertable関連事項[編集]Google App EngineMapReduce列指向データベースマネジメントシステムエラー忘却型コンピューティング参考文献[編集]^ \"First an overview. BigTable has been in development since early 2004 and has been in active use for about eight months (about February 2005).\" Google's BigTable^ \"Bigtable can be used with MapReduce, a framework for running large-scale parallel computations developed at Google. We have written a set of wrappers that allow a Bigtable to be used both as an input source and as an output target for MapReduce job\". pg 3 of \"Bigtable: A Distributed Storage System for Structured Data\", 2006^ \"Reader is using Google's BigTable in order to create a haven for what is likely to be a massive trove of items.\" Official Google Reader blog.^ a b \"There are currently around 100 cells for services such as Print, Search History, Maps, and Orkut.\" Google's BigTable^ \"Their new solution for thumbnails is to use Google’s BigTable, which provides high performance for a large number of rows, fault tolerance, caching, etc. This is a nice (and rare?) example of actual synergy in an acquisition.\" YouTube Scalability Talk^ \"We have described Bigtable, a distributed system for storing structured data at Google....Our users like the performance and high availability provided by the Bigtable implementation, and that they can scale the capacity of their clusters by simply adding more machines to the system as their resource demands change over time...Finally, we have found that there are significant advantages to building our own storage solution at Google. We have gotten a substantial amount of flexibility from designing our own data model for Bigtable.\" from the Conclusion of \"Bigtable: A Distributed Storage System for Structured Data\", 2006^ *\"Database War Stories #7: Google File System and BigTable\"外部リンク[編集]丸山先生レクチャーシリーズ第3回リポート：クラウドのデータサービスを掘り下げる（ITmedia）講演資料表・話・編・歴人物会長エリック・シュミット取締役/技術部門担当社長セルゲイ・ブリン取締役/製品部門担当社長/CEOラリー・ペイジCFOパトリック・ピシェット（英語版）取締役ジョン・ドーア - ラム・シュリラム（英語版） - ジョン・ヘネシー - アーサー・レビンソン（英語版） - ポール・オッテリーニ - シャーリー・ティルマン（英語版） - アン・メイザー（英語版）サービス検索サービス （ページランク）ブックス - ソースコード検索 - デスクトップ検索 - Finance - ショッピング - 画像検索 - マップ（ストリートビュー） - ニュース - News Archive Search - Patents - Scholar - Trends - ビデオ - ウェブ検索 - GOOG-411広告AdSense - AdWords - Analytics - Checkoutコミュニケーション & パブリッシングアラート - Blogger - カレンダー - ドキュメント - Gmail - Music - Google+ - グループ - iGoogle - JotSpot - Knol - ノートブック - Orkut - Page Creator - Panoramio - リーダー - Voice - YouTubeアプリケーションデスクトップ検索 - Earth - パック - Picasa - SketchUp - トーク - ツールバー - Chrome - 日本語入力開発ツールCode - グーグルボット - Guava - Guice - KML - MapReduce - Summer of Code - Web ToolkitプラットフォームApp Engine - Apps - BigTable - Dart - Gears - GFS - Go - Health - OpenSocialオペレーティングシステムAndroid - Chrome OSファイルフォーマットWebM - WebP企業情報概要買収 - 歴史 - 批判 - 中国版 - Google.org - Googleplex銘柄記号(NASDAQ: GOOG)、(LSE: GGEA)歳入: 106億USドル （2006年）従業員数13,748名（2007年6月30日）ウェブサイトwww.google.com「http://ja.wikipedia.org/w/index.php?title=BigTable&oldid=46753653」から取得 カテゴリ: Googleデータベース\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f14b"},"body":"アポロ計画出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索アポロ計画（アポロけいかく、Apollo program）とは、アメリカ航空宇宙局（NASA）による人類初の月への有人宇宙飛行計画である。1961年から1972年にかけて実施され、全6回の有人月面着陸に成功した。アポロ計画（特に月面着陸）は、人類が初めてかつ現在のところ唯一、有人宇宙船により地球以外の天体に到達した事業である。これは宇宙開発史において画期的な出来事であっただけではなく、人類史における科学技術の偉大な業績としてもしばしば引用される。目次1 概要2 背景3 月飛行方式の選択4 宇宙船4.1 司令・機械船4.2 月着陸船5 ロケット5.1 サターンV（サターン5型ロケット）5.2 サターンIB型ロケット6 ミッション6.1 ミッションの種類6.2 無人ミッション6.3 有人ミッション6.4 アポロ応用計画6.5 計画の概要7 月面から持ち帰ったサンプル8 コストおよびキャンセルされた計画8.1 キャンセルされた計画9 科学的・工学的遺産9.1 将来の有人宇宙探査計画に与えた影響9.2 コンステレーション計画10 文化的遺産10.1 世界的な注目10.2 アポロ11号の放送データ復元計画10.3 宇宙飛行士に与えた心理的影響11 脚注12 参考文献13 関連項目14 外部リンク概要[編集]冷戦下の米ソ宇宙開発競争のさなかの1961年、アメリカ合衆国大統領ジョン・F・ケネディは、1960年代中に人間を月に到達させるとの声明を発表した。1969年7月20日、宇宙飛行士ニール・アームストロングおよびバズ・オルドリンがアポロ11号で月面に着陸したことにより、その公約は実現される。アポロ計画ではその後5回の月面着陸が行われ、1972年にすべての月飛行計画は終了した。アポロ計画は、NASAによるマーキュリー計画、ジェミニ計画に続く三度目の有人宇宙飛行計画であり、そこで使用されたアポロ宇宙船やサターンロケットは、後のスカイラブ計画やアポロ・ソユーズテスト計画でも流用された。そのため、これらの後続計画も、しばしばアポロ計画の一環であると見なされている。アポロ計画では、人間を月に送り、安全に帰還させるという当初の目的を達成するにあたり、途中で二つの大きな事故があった。一つは、アポロ1号における発射台上での火災事故で、ガス・グリソム、エドワード・ホワイト、ロジャー・チャフィーの3名の飛行士が死亡している。もう一つは、アポロ13号において、月に向かう軌道上で機械船の酸素タンクが爆発した事故である。これにより月面着陸は断念せざるを得なくなったが、乗組員たちは地上の管制官や技術者たちの援助と、そして何よりも彼ら自身の優れた危機管理能力により、無事に地球に帰還することができた。アポロ8号で人間は初めて地球以外の天体の周囲を周回し、17号は現在までのところ、人類が他の天体の上に降り立った最後の事例となっている。アポロ計画は、ロケットや有人宇宙船の開発にともなう関連技術の発展に拍車をかけ、特に電子工学や遠隔通信、コンピュータなどの分野において大きく貢献した。またいくつもの部分から構成された複雑な機器の信頼性を検査するために、統計的な手段を用いる手法を開拓するなど、多くの工学の分野の発展にも繋がった。有人宇宙飛行のために必要不可欠な構成物であった事物や機器は、文明、技術、電子工学の表彰として今も残されている。計画で使用された多くの事物や遺物が、国立航空宇宙博物館をはじめとする世界各地の様々な場所で展示されている。背景[編集]アポロ計画は、1960年初頭アイゼンハワー政権下において、マーキュリー計画の後継のプロジェクトとして着想された。マーキュリー宇宙船は、一人の飛行士を乗せて低軌道を周回させることしかできなかったものの、アポロ宇宙船では三人の飛行士を乗せ月を周回し、さらに月面に着陸することが目標とされた。計画名は当時のNASA長官エイブ・シルバースタイン（英語版）が、ギリシャ神話の太陽神アポロンにちなんで名づけたものである。後に彼は「まるで自分の子供に命名するような気持ちで名づけた」と語っている [1] 。しかし、NASAが立案を開始した時点では予算の見通しは立っておらず、特にアイゼンハワー大統領の有人宇宙飛行に対する態度もあいまいなものであった [2] 。1960年11月、ジョン・F・ケネディがアメリカ合衆国第35代大統領に選出された。選挙期間中、ケネディは宇宙開発やミサイル防衛の分野においてアメリカをソビエト連邦に優越たらしめることを公約としていた。宇宙開発を国家の威信の象徴とし、ミサイル・ギャップ（当時の米ソ間に想定されていた弾道ミサイルの技術および配備状況の格差）について警鐘をならすとともに、アメリカをこれに勝利させることを約束した [3] 。しかし、この言葉とは裏腹に、大統領に選出された後もケネディはアポロ計画について直ちに決定を下すことはなかった。彼は宇宙開発技術の詳細についてよく知らず、また有人月面着陸に必要とされる莫大な予算に対し二の足を踏んでいたのである。NASAの長官ジェイムズ・ウェッブが13パーセントの予算増額を要求した際、ケネディはNASAの大型ロケットの開発促進は支持したものの、より大きなレベルでの決断は先延ばしにしていた [4] 。1961年4月12日、ソ連の宇宙飛行士ユーリ・ガガーリンが、ボストーク1号で史上初の有人宇宙飛行を成功した。これを目の当たりにしたアメリカ国民はソ連との宇宙開発競争において立ち後れているという不安を増大させた。ガガーリンの飛行の翌日に開かれた下院科学・宇宙航行学委員会（英語版）では、アメリカがソ連に確実に追いつくことを目的とした緊急プログラムの支持を多数の議員が表明した [5] 。しかし、ここでもケネディは慎重な反応を示し、ソビエトに対するアメリカの対応については明確にすることはなかった [6] 。4月20日にはケネディはリンドン・ジョンソン副大統領に覚書を送り、アメリカの宇宙開発の現状と、NASAに追いつく可能性を与えられる計画について検討するよう指示した [7] 。ジョンソンは翌日の返答で、「我々はいまだ、合衆国を世界の先頭に立たせるためのいかなる最大限の努力も果たしていないし、成果も出してはいない」との見解を示し、また有人月着陸の実現は近くはない将来であり、だからこそアメリカが世界で初めて達成できる可能性があると結論づけた [8]。1961年5月25日の上下院合同議会で、月着陸計画の決定を発表するケネディ大統領1961年5月25日、ケネディは上下両院合同議会での演説で、アポロ計画の支援を表明した。“まず私は、今後10年以内に人間を月に着陸させ、安全に地球に帰還させるという目標の達成に我が国民が取り組むべきと確信しています。この期間のこの宇宙プロジェクト以上に、より強い印象を人類に残すものは存���せず、長きにわたる宇宙探査史においてより重要となるものも存在しないことでしょう。そして、このプロジェクト以上に完遂に困難を伴い費用を要するものもないでしょう。First, I believe that this nation should commit itself to achieving the goal, before this decade is out, of landing a man on the Moon and returning him safely to the Earth. No single space project in this period will be more impressive to mankind, or more important in the long-range exploration of space; and none will be so difficult or expensive to accomplish.[9]”ケネディがこの演説をした時点では、アメリカは、そのわずか一ヶ月前に一人の飛行士を宇宙に送ったばかりであり、しかもそれは、砲弾のように単に上昇して下降してくる弾道飛行にすぎず、地球を周回する衛星軌道に乗ったものではなかった。NASAの関係者の中にさえ、ケネディのこの公約の実現性を疑う者がいた [10] 。1969年の終わりまでに人間を月面に着陸させるというケネディの挑戦に応えるためには、平時にはいかなる国も実現したことのない規模の技術面での躍進的な進歩と、巨額の予算（250億ドル）とが必要とされた。アポロ計画は、ピーク時には40万人の従業員を雇用しており、アポロ計画をサポートしていたのは2万以上の企業や大学に及んでいた。 [11] 。ライス大学でアメリカの宇宙計画について演説するケネディ大統領。1962年9月12日“我々が10年以内に月に行こうなどと決めたのは、それが容易だからではありません。むしろ困難だからです。この目標が、我々のもつ行動力や技術の最善といえるものを集結しそれがどれほどのものかを知るのに役立つこととなるからです。その挑戦こそ、我々が受けて立つことを望み、先延ばしすることを望まないものだからです。そして、これこそが、我々が勝ち取ろうと志すものであり、我々以外にとってもそうだからです。We choose to go to the moon in this decade and do the other things, not because they are easy, but because they are hard, because that goal will serve to organize and measure the best of our energies and skills, because that challenge is one that we are willing to accept, one we are unwilling to postpone, and one which we intend to win, and the others, too.（宇宙開発の国家目標について、ライス大学でケネディが行った演説から）[12]”月飛行方式の選択[編集]ケネディがアポロ計画の到達点を明確に定義したことにより、技術者たちはこの設定された目標に対し、生命への危険やコスト、あるいは技術や飛行士の能力への要求を最小限に抑えるための飛行方式を決定する必要に迫られることになり、その結果以下の四つの案が検討された。アポロ計画初期の段階での、直接降下および地球周回ランデブー方式の宇宙船のイメージ（1961年）直接降下方式：単体の宇宙船で月に向かい、着陸して帰還するというもの。この方式では、計画されただけで実現することのなかったノヴァのような、非常に強力なロケットが必要とされる。地球周回ランデブー方式(Earth Orbit Rendezvous, EOR)：複数のロケット（15基以上を必要とするという案もあった）で部品を打ち上げ、直接降下方式の宇宙船および地球周回軌道を脱出するための宇宙船を組み立てるというもの。軌道上で各部分をドッキングさせた後は、宇宙船は単体として月面に着陸する。月面ランデブー方式：二機の宇宙船を続けて打ち上げる方式。燃料を搭載した無人の宇宙船が先に月面に到達し、その後人間を乗せた宇宙船が着陸する。地球に帰還する前に、必要な燃料は無人船から供給される。月周回ランデブー方式(Lunar Orbit Rendezvous, LOR)：いくつかの単位から構成される宇宙船を、1基のサターン5型ロケットで打ち上げるという方式。着陸船が月面で活動している間、司令船は月周回軌道上に残り、その後活動を終えて離昇してきた着陸船と再びドッキングする。他の方式と比較すると、LOR方式はそれほど大きな着陸船を必要とせず、そのため月面から帰還する宇宙船の重量（すなわち地球からの発射総重量）を最小限に抑えることができる。1961年の初めまでは、NASA内部では直接降下方式が支持されていた。多くの技術者たちにとっては、地球周回軌道上においてすらいまだ行なわれたことのないランデブーやドッキングを、月周回軌道上で実現させることへの不安が大きかった。しかしながらラングレー研究所のジョン・フーボルトなどの反論者たちは、LOR方式によって得られる大幅な重量削減という利点を強調した。60年から61年にかけ、フーボルトはLORこそが最も確実で実践的な方式であると、各方面に訴えて回った。NASA内部の階級を飛び越え、副長官のロバート・シーマンズのところにも一連の文書を送った。フーボルトは、シーマンズが以前「（計画について）いろいろと雑音を発する者がいる」などと発言していたことを知っていたが、LOR方式を検討から外すべきではないと嘆願した。そんな中で、シーマンズが1961年7月にゴロヴィン(Golovin)委員会を立ち上げたことが、計画の方針を決定するひとつの転機となった。この特別委員会にはアポロ計画で使用すべきロケットが推薦されることになっていたが、その判断をするためには、まず月着陸の方式を決定することが重要な要素であると考えられた。委員会は当初、地球周回方式と月周回方式の混成案を推薦していたが、フーボルトらの陰の働きかけもあり、LOR方式の検討が、着陸方式の実現可能性を公表する際の重要な役割を果たすようになった。1961年の終わりから1962年のはじめにかけ、ヒューストン有人宇宙センター内のNASA宇宙任務グループ（Space Task Group, 1958年に創設された、技術者たちの集団からなる有人宇宙飛行計画のNASA内部研究グループ）もLOR支持に意見を変えはじめ、マーシャル宇宙飛行センターの技術者たちもやがて月周回ランデブー方式のメリットを確信するようになり、彼らの方針転換は1962年7月に、ウェルナー・フォン・ブラウン博士によって非公式に発表された。NASAがLOR方式採用を正式に表明したのは、同年11月のことであった。これについて宇宙開発史研究家のジェームズ・ハンセンは、「もし1962年に頑迷なNASAがこのささやかな変更を受け入れなかったとしても、アメリカは月面に到達していただろうが、ケネディが公約した「1960年代中に月に到達させる」という目標はほぼ確実に達成されることはなかっただろう」と述べている。ちなみにLOR方式への変更は、ずっと後になってアポロ13号が月軌道の途中で酸素タンクの爆発事故を発生させた時、吉と出ることとなった。もしこの時、着陸船が司令船から独立した独自の生命維持装置を持っていなければ、飛行士たちは確実に命を落としていたところであった。宇宙船[編集]詳細は「アポロ宇宙船」を参照月を周回するアポロ司令・機械船月周回ランデブー方式（LOR）が採用されたことにより、アポロ宇宙船の基本的なデザインも決定された。宇宙船は全体として二つの大きな部分から構成されている。飛行士はそのうちの司令・機械船（Command/Service Module, CSM）で飛行中の大部分の時間を過ごし、月着陸船（Lunar Module, LM）で月面に降下し、また戻ってくる。司令・機械船[編集]詳細は「アポロ司令・機械船」を参照司令船 (Command Module, CM) は円錐形をしており、三人の宇宙飛行士を月軌道に乗せ、また宇宙から帰還させ海上に着水するように設計されている。CMに搭載されている主なものは、反動姿勢制御装置、ドッキング用トンネル、航法装置、誘導コンピューターなどである。CMの下部には、メイン・ロケットや姿勢制御用ロケットおよびその燃料、燃料電池、通信用アンテナ、水や酸素のタンクなどを搭載した機械船 (Service Module, SM) が接続されている。アポロ15・16・17号では各種科学測定装置なども搭載されていた。機械船は飛行中のほとんどの時間を司令船に接続された状態にあり、大気圏に再突入する直前に投棄される。司令船底部には再突入時の激しい高温から機体および乗員を保護する耐熱シールドが貼られており、再突入時にはパラシュートを展開して十分に速度を落とした後、安全に海洋上に着水する。CSM開発の契約は宇宙工学者ハリソン・ストームズをリーダーとするノース・アメリカン航空が獲得した。同社とNASAの関係はアポロ計画の進行中、特に飛行士三人を犠牲にしたアポロ1号の火災事故が発生したことなどにより、緊張したものになった。事故の原因は司令船内の電気配線のショートによるものであると断定されたが責任の所在は混沌としており、調査委員会は「司令船の設計・技術・品質管理において欠陥が存在した」と結論づけている [13] 。月着陸船[編集]詳細は「アポロ月着陸船」を参照月面上の月着陸船月着陸船[14] (Lunar Module, LM) は、月面への着陸と司令・機械船が待機する月周回軌道までの帰還のみを目的に設計されている。地球の重力圏では運用しないことが前提であるため、耐熱板は限定的なものであり、また徹底して軽量化が図られている。定員は二名で、上昇段と下降段の二つの部分から構成されている。下降段には、アポロ月面実験装置群や月面車などを搭載するスペースが設けられている。開発契約はグラマン社が獲得し、トム・ケリーが計画全体を監督するが、着陸船は開発の遅れという個別のトラブルを抱えることとなる。各種試験の遅延のためにアポロ計画全体の進行にも深刻な影響を与えはじめ、LMは「お荷物」(pacing item) とさえ呼ばれることとなった [15] 。このためNASAは、当初は8号で行われるはずだった有人試験飛行を9号に延期せざるを得なくなった。ロケット[編集]フォン・ブラウン博士に率いられる技術者たちのチームがアポロ計画を立ち上げた当初、ロケットはどのようなものを使用すべきかという点については不透明であった。このうち直接降下方式を採用するためには、計画中のノヴァのような巨大なペイロードを持つロケットが必要だった。やがてNASAが月周回ランデブー方式の採用を決定したことにより、マーシャル宇宙飛行センターはサターンIBおよびサターン5型ロケットの開発へと向かうこととなった。これらはノヴァほどの力は持ってはいなかったが、それまで、というよりも現在[いつ?]までに開発されたものの中で、最も強力なロケットであった。サターンV（サターン5型ロケット）[編集]詳細は「サターンV」を参照アポロ11号の搭乗員たちを乗せて月へと向かうサターン5型ロケット。1969年7月16日アポロ6号で報道陣向けに公開されたサターン5型ロケット図解（ペイロード含む）サターン5型ロケットは、3段のロケットおよびその3段目最上部（ペイロードを含まない、サターン5型ロケット単体としての最頂部）に搭載された自動飛行制御装置によって構成されている。第1段S-ICは十字型に配置された5基のF-1ロケットエンジンを搭載し、全体で約3,400トンの推力を発生する。燃焼はわずか2分30秒で終了し、機体を時速約9,600km（秒速2.68km）にまで加速する。開発期間中、F-1はずっと燃焼の不具合に見舞われてきた。エンジンへの燃料の供給がスムーズに行われなければ推力のゆらぎが発生し、やがてそれは大きな振動となってエンジン自体を破壊してしまう。この問題は、燃焼中のエンジンの内部で小規模な爆発を発生させて燃焼のばらつきを相殺するなどの数多くの実験を行い、試行錯誤を積み重ねた結果、最終的には解決された。第2段S-IIは5基のJ-2ロケットエンジンを搭載し、およそ6分間の燃焼で機体を時速約24,000km（秒速6.84km）、高度185kmにまで到達させる。その後は第3段S-IVBが引き継ぎ、宇宙船を地球周回軌道に乗せる。S-IVBにはJ-2エンジンが1基だけ搭載されていて、軌道上で再点火して月へと向かう軌道に乗る。サターンIB型ロケット[編集]詳細は「サターンIB」を参照サターンIBは、初期のサターンI型ロケットの発展型である。第1段は8基のH-1ロケットエンジンを搭載し、第2段にはサターンVの第3段と同じS-IVBロケットが使用される。第1段の推力は725トンしかないが、アポロ司令・機械船および月着陸船を地球周回軌道に乗せる能力を持っている。サターンIBは各種の試験飛行および宇宙ステーションスカイラブへの人員の搬送、そしてアポロ・ソユーズテスト計画で使用された。1973年にはS-IVBを改造したスカイラブが、サターンVによって打ち上げられた。ミッション[編集]ミッションの種類[編集]1967年9月、テキサス州ヒューストンの有人宇宙センターは月面着陸に向けた一連の飛行計画を発表した。以下の A から G の七種のミッションは、それぞれ宇宙船の特定部分の性能や手順を確認するためのもので、次の段階に進むためには前段階の成功が必要であった。A - （無人）司令・機械船 試験飛行B - （無人）月着陸船 試験飛行C - （有人）司令・機械船 低高度地球周回軌道飛行 そして地球帰還D - （有人）司令・機械船および月着陸船 低高度地球周回軌道飛行 そして地球帰還E - （有人）司令・機械船および月着陸船 遠地点7,400kmの楕円軌道飛行 そして地球帰還F - （有人）司令・機械船および月着陸船 月周回飛行 そして地球帰還G - （有人）月面着陸 そして地球帰還後にはこれらに加え、短期間の滞在のうちに2度の月面船外活動を行うミッション H が追加され、さらに、より長い3日間月面に滞在し、月面車を使用して3度の船外活動を行うミッション J がこれに続くこととなった。ミッション J はアポロ15号から17号において実施されたものの、続く18号から20号までは計画自体がキャンセルされた。またこれに先立ち、機械船に科学測定装置を搭載し、軌道滞在中に各種観測を行うミッション I も計画されていたが、18号以降のフライトがキャンセルされたことにより J 案に吸収され、15号から17号において実行された。無人ミッション[編集]アポロ計画のための準備は、有人飛行が行われる以前に始まっていた。サターンI の試験発射は1961年10月に始まり、1964年9月まで続けられた。このうちの3回の飛行では、模擬の司令・機械船を搭載していた。また1963年と1965年には、宇宙船の緊急離脱用ロケットの発射実験がホワイト・サンズミサイル基地において行われた。公式に「アポロ」の名が冠されているものの中で、無人試験飛行が行われたのは4、5、6号のみである。アポロ4号はサターン5型ロケットの初の試験飛行で、1967年11月9日に行われた。これはジョージ・ミューラーが提唱した「全段一斉試験方式」を例証するものであった。それまでは開発中の多段式ロケットの発射試験をする場合は、各段を別々に行うのが通例だったが、サターンVでは初めて全段を一度にまとめて発射した。実験はきわめて上首尾に終わった。およそ6km離れた地点からその様子を中継していたCBSキャスターのウォルター・クロンカイトによると、あまりにも強烈な騒音と振動で天井のタイルがはがれ落ち、窓が激しく揺さぶられたため、窓ガラスが割れないように手で抑えながら中継を続けなければならなかったという [16] 。この実験により、サターンの発射時には近辺にある構造物を振動から保護するための対策が必要であることが明らかになった。これ以降は発射台に直接緩衝機構を設置するようになり、これによって騒音と振動は大幅に低減された[17]。アポロ計画最後の無人試験飛行は6号で、1968年4月4日に発射され、約10時間後の21:57:21 UTCに地球に帰還した。有人ミッション[編集]アポロ11号で、月面に立てた星条旗のかたわらに立つバズ・オルドリン飛行士。布地の中には旗を展開させるための水平材が仕込まれているが、完全に展開することができなかったため、あたかも真空中ではためいているように見える。有人飛行は、すべて船長・司令船操縦士・月着陸船操縦士の三名によって行われた。月面着陸をする際には、船長と着陸船操縦士のみが降下し、司令船操縦士はその間月周回軌道上で待機していた。アポロ計画における最初の有人飛行は、1968年10月11日に発射されたアポロ7号であった。計画の目的は、アポロ1号の死亡火災事故を受けて全面的に再設計された司令船を、地球周回軌道上で11日間にわたって試験することであった。サターンIBロケットが人を乗せて打ち上げられるのも、またアメリカの宇宙開発において三人の飛行士が同時に宇宙に行くのも、この飛行が初めてであった。1968年の夏頃には、この年に行われるアポロ8号の飛行には月着陸船の完成が間に合わないことが明らかになった。そのためNASAは計画を変更し、8号を単なる地球周回軌道に乗せるのではなく、月に向かわせ、クリスマス期間中に月を周回させることを決定した。これは当時のアポロ宇宙船計画室マネージャーだったジョージ・ロウの発案によるもので、しばしば「この変更はソ連が有人のゾンド宇宙船で月を周回しようとしていることに対抗したものである」と言われることがあるが、ソ連にそのような計画があったことをうかがわせる証拠は存在しない。NASAはもちろんゾンドの飛行を知ってはいたが、ゾンド計画の時期とアポロ8号の決定に関するNASAの広範囲な記録は、必ずしも一致しない。結局のところ8号の計画変更は、別に月飛行でソ連に先を越されることを恐れたからではなく、単に着陸船の開発の遅れに起因するものと見るのが妥当である。1968年12月21日から69年5月18日にかけて、NASAはサターン5型ロケットを使用して三度の有人飛行（8、9、10号）を行った。それぞれの飛行はすべて三人の飛行士が乗り組み、後の二つは着陸船も搭載していたが、月面着陸を目標とするものではなかった。続くアポロ11号で、人類は地球の歴史上初めて地球以外の天体の上に降り立ち、船長ニール・アームストロングは有名な以下の言葉を残した。月面に降り立った最初の人類となるニール・アームストロングをとらえた搭載カメラの映像“これは一人の人間にとっては小さな一歩だが、人類にとっては偉大な飛躍である。That's one small step for [a] man, one giant leap for mankind.”\"That's one small step for [a] man, one giant leap for mankind\"申し訳ありませんが、あなたのブラウザーではJavaScriptが無効になっているか、対応しているプレーヤーがありません。再生するには、クリップをダウンロードするか、プレーヤーをダウンロードする必要があります。この音声や映像がうまく視聴できない場合は、サウンド再生のヒントをご覧ください。1972年12月13日、アポロ計画における最後の月面活動を行うハリソン・シュミット飛行士また次の12号は成功したものの、13号では機械船の酸素タンクが爆発するという事故が発生した。これにより月面着陸は中止せざるを得なくなったが、三人の飛行士は無事に地球に帰還することができた。その後の14号から17号までの飛行はすべて成功し、特に最後の三回では月面車を利用して広範囲に月面を探索する、前述のミッション J が実行された。最後の17号は1972年12月7日に発射され、12月19日、無事地球に帰還した。船長ユージン・サーナンは2010年現在、最後に月を離れた人間である。アポロ応用計画[編集]アポロ計画の成功を受け、NASAおよびその関連企業はアポロのハードウェアを利用した月飛行後の応用計画について、いくつかの案を検討した。「アポロ拡張計画」（後に『アポロ応用計画』と改称された）と呼ばれたこの計画では、地球周回軌道を回る13種類の案が提示されていた。そのうちの多くは、サターン・ロケットの月着陸船が搭載されていたスペースに、科学機器を乗せて打ち上げるというものであった。これらのうち、実現されたのはスカイラブ計画（1973年5月-1974年2月）とアポロ・ソユーズテスト計画（1975年7月）だけであった。スカイラブの機体はサターンIBの第二段を改造して作られ、月着陸船をベースにした太陽望遠鏡が設置されていた。本体は一部を改造されたサターンVによって軌道上に打ち上げられ、三名の乗組員はサターンIBに搭載された司令・機械船で地上とラブの間を往復した。最後の飛行士が機体を離れたのは1974年2月8日のことで、スカイラブはその後1979年に、予定よりも早く大気圏に再突入して分解した。アポロ計画に関わった物体としては、その時点においてこれが最も古いものであった。アポロ・ソユーズテスト計画は、アポロの司令・機械船および今回のために特別に開発されたドッキング・モジュールが、地球周回軌道上でソ連のソユーズ宇宙船とドッキングするというものであった。計画は1975年7月15日から24日にかけて行われたが、ソ連はこの飛行の後もソユーズや宇宙ステーションサリュートなどを使って有人宇宙飛行を継続したのに対し、アメリカは1981年4月12日にスペース・シャトルコロンビア号が初飛行を行うまで、人間が宇宙に行くことは中断されていた。計画の概要[編集]計画名使用ロケット乗組員発射日計画の目標結果アポロAS-201（アポロ1A）サターンIB無人1966年2月26日弾道飛行一部成功 - サターンIB型ロケットを使用してアポロ司令・機械船を打ち上げた、初の弾道飛行。機械船のロケットエンジンが予定よりも60秒長く噴射し、司令船の電気系統でトラブルが発生するなどの問題があった。アポロAS-203（アポロ2号）サターンIB無人1966年7月5日地球周回飛行成功 - 燃料タンク内の挙動およびロケットの性能試験。非公式に「アポロ2号」と呼ばれる。アポロAS-202（アポロ3号）サターンIB無人1966年8月25日弾道飛行成功 - 司令船の大気圏再突入試験。途中で制御不能に陥ったものの、計画自体は成功。非公式に「アポロ3号」と呼ばれる。アポロAS-204（アポロ1号）サターンIBガス・グリソムエドワード・ホワイトロジャー・チャフィー発射中止地球周回飛行失敗 - 1967年1月27日、発射台上での訓練中に司令船の火災事故が発生し、三名の飛行士が命を失った。「アポロ1号」と命名されたのは、事故の後のことだった。しかし、これは実際にはアポロ宇宙船の四度目の飛行となる予定だった（またNASAもAS-204と呼ぶ予定であった）。一方、1966年6月にNASAが承認し飛行士が身につけていた計画の標章にはすでに「アポロ1号」と記されていた。アポロ4号サターンV無人1967年11月9日地球周回飛行成功 - （月着陸船を除いて）フル装備の状態で行われたサターン5型ロケットの初飛行であり、司令船の大気圏再突入も成功した。アポロ5号サターンIB無人1968年1月22日地球周回飛行成功 - 月着陸船の初の試験飛行。多数の試験が行われ、終了後着陸船は大気圏に再突入し消息を絶った。使用されたロケットは、本来は三名の飛行士を犠牲にしたアポロ1号（AS-204）で使用される予定のものだった。アポロ6号サターンV無人1968年4月4日地球周回飛行一部成功 - 軌道投入時に激しい振動が発生し、エンジンの数機が停止した。司令船の大気圏再突入は成功したが、予定していた「最悪の状態」を想定した試験を行うことはできなかった。アポロ7号サターンIBウォルター・シラードン・アイセルウォルター・カニンガム1968年10月11日地球周回飛行成功 - 11日間にわたり地球を周回し、司令船その他の性能試験を行う。アポロ8号サターンVフランク・ボーマンジム・ラヴェルウィリアム・アンダース1968年12月21日月周回飛行成功 - 史上初めて、人間が月を周回した飛行。地球周回軌道を離れて外部の世界から人間が地球を見下ろしたのも、この飛行が初めてだった。実験は成功したが、飛行士が睡眠障害に陥ったり軽い病気にかかるなどした。アポロ9号サターンVジェームズ・マクディヴィッドデヴィッド・スコットラッセル・スワイカート1969年3月3日地球周回飛行成功 - 10日間にわたり地球を周回し、月着陸船の性能試験および船外活動を行った。アポロ10号サターンVトーマス・スタッフォードジョン・ヤングユージーン・サーナン1969年5月18日月周回飛行成功 - 二度目の月周回飛行。月周回軌道上で月着陸船の性能試験を行い、月へ高度15.6kmまで接近した。アポロ11号サターンVニール・アームストロングマイケル・コリンズバズ・オルドリン1969年7月16日月面着陸成功 - 史上初の有人月面着陸（最終的には手動で着陸）。着陸地点の周辺を歩行により探査。アポロ12号サターンVピート・コンラッドリチャ���ド・ゴードンアラン・ビーン1969年11月14日月面着陸成功 - 発射時に落雷が機体を直撃して船内が一時的に停電したが、無事打ち上げに成功。1967年4月17日に着陸した無人探査機サーベイヤー3号から、わずか200mの地点に着陸した。アポロ13号サターンVジム・ラヴェルジャック・スワイガートフレッド・ヘイズ1970年4月11日月面着陸失敗（『成功した失敗』と評されることもある） - 月に向かう軌道の途中で機械船の酸素タンクが爆発し、月面着陸は断念せざるを得なくなった。乗組員は一時的に着陸船に避難し、月を周回して地球に帰還した。アポロ14号サターンVアラン・シェパードスチュワート・ルーズマエドガー・ミッチェル1971年1月31日月面着陸成功 - 月周回軌道上で着陸船のコンピューターに問題が発生したが、着陸に成功。初めて月面でカラー撮影を行い、また化学実験をした。アポロ15号サターンVデヴィッド・スコットアルフレッド・ウォーデンジェームズ・アーウィン1971年7月26日月面着陸成功 - 初の3日以上の長期月面滞在。初めて月面車を使用し、27.76kmにわたって広範な地質学的調査を行った。アポロ16号サターンVジョン・ヤングケン・マッティングリーチャールズ・デューク1972年4月16日月面着陸成功 - 機械船の姿勢制御装置に故障が発生したため、大事を取って月面滞在日数が一日短縮された。計画の主要な目的は、月の高地を探索することであった。アポロ17号サターンVユージン・サーナンロナルド・エヴァンズハリソン・シュミット1972年12月7日月面着陸成功 - 最後の月面着陸。地質学者を搭乗させた唯一の飛行。スカイラブ1号サターンV無人1973年5月14日地球周回飛行成功 - 宇宙ステーションスカイラブの発射。スカイラブ2号サターンIBピート・コンラッドポール・ウェイツジョセフ・カーウィン1973年5月25日長期宇宙滞在成功 - アメリカ初の宇宙ステーション、スカイラブに28日間にわたって滞在。スカイラブ3号サターンIBアラン・ビーンジャック・ルーズマオーウェン・ギャリオット1973年7月28日長期宇宙滞在成功 - スカイラブに59日間にわたって滞在。スカイラブ4号サターンIBジェラルド・カーウィリアム・ポーグエドワード・ギブソン1973年11月16日長期宇宙滞在成功 - スカイラブに84日間にわたって滞在。アポロ・ソユーズテスト計画サターンIBトーマス・スタッフォードヴァンス・ブランドドナルド・スレイトン1975年7月15日地球周回飛行成功 - ソビエト連邦の宇宙船ソユーズ19号とランデブーとドッキングを行う。しばしば「アポロ18号」と呼ばれることもある。アポロ18号アポロ19号アポロ20号サターンVキャンセル未発射月面着陸キャンセル - 当初の計画では20号まで予定されていたものの、予算削減でキャンセルされる。月面から持ち帰ったサンプル[編集]詳細は「月の石」を参照計画番号資料総量代表的な資料アポロ11号22 kgアポロ12号34 kgアポロ14号43 kgアポロ15号77 kg月面から持ち帰った試料の中で最も有名な「ジェネシス・ロック」（アポロ15号の成果）。アポロ16号95 kgアポロ16号が採取した酸化斜長石。地球上にある月由来の試料は、アポロ計画、ソ連のルナ計画、および月から飛来した隕石のみである。将来の有人・無人の月探査計画では、より多くの採取が期待されている。アポロ17号111 kgアポロ計画では総量で381.7kgの岩石その他の物質が月面から持ち帰られ、そのほとんどは現在はヒューストンにある月資料研究所に保管されている。放射年代測定によれば、月面で採集された岩石は地球上のものと比較して全体的にきわめて古い。その範囲は約32億年前（月の海の部分で採取された玄武岩）から46億年前（高地で採取された地殻のサンプル）まで確認されている [18] 。したがって、これらは現在の地球上ではほとんど失われてしまった太陽系誕生初期の試料であると見られている。アポロ計画全体を通して採取された岩石の中で重要なものの一つに、15号でジェームズ・アーウィン飛行士とデヴィッド・スコット飛行士が持ち帰った「ジェネシス・ロック（Genesis Rock = 創世記の石）」と呼ばれているものがある。斜長石と呼ばれるこの石は、カルシウムを豊富に含んだ長石によってほとんどの部分を構成されている灰長石の鉱石で、月面の高地の地殻のサンプルであると考えられている。この中からは地球化学で KREEP と呼ばれる、地球上には存在しない物質が発見された。KREEPや斜長岩などのサンプルは、月の外殻表面がかつてドロドロに溶けた状態（マグマ・オーシャン）であったという仮説の根拠となっている。採取された岩石の大部分は衝突にさらされた痕跡を有していた。たとえば多くのサンプルの表面には微少隕石が衝突したことによる極小のクレーターが確認されている。これは厚い大気の層に阻まれた地球上の岩石には見られないものである。また多くのものには隕石が衝突した際に発生した高圧の衝撃波にさらされた形跡が残されており、中には impact melt、すなわちクレーター周辺で衝撃により融解した物質から構成されたものもあった。そして月面から持ち帰られたすべてのサンプルは、繰り返し衝突の衝撃に曝されることによる角礫化が進行していた。こうした月の岩石の分析結果は、月が誕生した原因を地球に火星程度の天体が衝突したことに求める「ジャイアント・インパクト説」の論旨と合致するものである [19] 。コストおよびキャンセルされた計画[編集]1966年3月、NASAは議会に対しアポロ計画で人間を月に送るためにかかる費用は13年間で総額227億1,800万ドルに達すると報告し、また実際それは1969年7月から1972年12月にかけて6度の月面着陸を成功させるという成果となって現れた。NASAの歴史に関するウェブサイトを管理するスティーブ・ガーバーによれば、最終的にアポロ計画にかかった費用は1969年当時で200億ドルから254億ドル（2005年現在の貨幣価値に換算すると、およそ1,350億ドル）になるという。またアポロ宇宙船およびサターン・ロケットにかかった費用は2005年度換算で830億ドルで、このうち宇宙船が280億ドル（司令・機械船170億ドル、月着陸船110億ドル）、サターン・ロケット (I・IB・V) が460億ドルであった。キャンセルされた計画[編集]当初の予定ではアポロ計画は20号まで行われるはずだったが、NASAの大幅な予算削減およびサターンVシリーズの後続生産が打ち切られたことにより、18・19・20号の飛行はキャンセルされ、それらの予算はスペース・シャトルの開発およびスカイラブ計画に回されることとなった。残ったサターンVは、1機が1973年にスカイラブを打ち上げるために使用され、残りの2機はフロリダ州ケープ・カナベラルのジョン・F・ケネディ宇宙センター、アラバマ州ハンツビルのマーシャル宇宙飛行センター、ルイジアナ州ニューオリンズのミシャウド組立施設、テキサス州ヒューストンのリンドン・B・ジョンソン宇宙センターなどに分割して現在も展示されている。科学的・工学的遺産[編集]アポロ計画は、多くの技術分野を刺激した。アポロ誘導コンピュータは、ミニットマン・ミサイルの開発共々、初期の集積回路研究の推進力となった（当時の大型コンピュータでは、まだ小型化の要求は低く、System/360などではまだチップ上に集積したICを採用していない）。また燃料電池はこの計画によって初めて実用化され、CNC（コンピュータ数値制御）による機械工作もアポロの構造部品製作に際して開拓された分野であった。将来の有人宇宙探査計画に与えた影響[編集]いくつかの国ではすでに有人月飛行が計画され、また月面基地の建設を目指す宇宙機関もある。史上初の月面着陸を成功させたアポロ11号の船長ニール・アームストロングは、しばしばマスコミから将来の宇宙開発の展望について質問されている。2005年にはそうした質問に対して「様々な課題はあるかもしれないが、1961年のアポロ計画スタート時に我々が直面したほど困難で、かつ大量の問題にはならないのではないか」と応え、火星への有人飛行は1960年代の月面着陸よりは容易になるであろうとの見解を述べた。コンステレーション計画[編集]2004年1月14日、大統領ジョージ・W・ブッシュは演説の中で、2020年までに宇宙飛行士を月面に到達させることを含む新たな宇宙開発の展望の「コンステレーション計画」を発表した。計画では、2010年に退役する現行のスペース・シャトルの後継としてオリオン宇宙船があげられており、その空力的な形状はアポロの司令船にきわめて近い。NASAの前長官マイケル・D・グリフィンは、オリオンを「増強版アポロ」(\"Apollo on steroids\") と表現し、雑誌『ニュー・サイエンティスト』は「オリオン計画はアポロ時代の技術に先祖返りした程度のもの、との批判がある」と伝えているが [20] 、一方でオリオンの操縦席の計器板や熱遮蔽板などでは新技術が使用される予定だった [21] 。コンステレーション計画のうちアポロ計画の設計に最も似通っていたのは、オリオンを軌道に乗せるために設計されたアレスI の上段ロケットである。このロケットのエンジンには、サターン・シリーズで使用されたJ-2を改良したJ-2Xの使用が計画されていた。J-2Xを開発するにあたり、NASAの技術者らは博物館でアポロ時代の資料を研究し、また実際にアポロ計画に従事した技術者たちに意見を求めた。コンステレーション計画の責任者ジェフ・ハンレイは、「月面への着陸およびそこからの離陸に関する技術的問題は、相当程度にわたってすでに解決されている。これらはアポロ計画が我々に残してくれた遺産である」と述べた [22]。アポロと同様、オリオンは月周回ランデブー方式をとるが、月着陸船アルタイルはアレスVロケットによって別個に打ち上げられる予定だった。このアレスVはスペース・シャトルやアポロ計画の技術を元にして開発される予定だったロケットである。そしてスカイラブ計画で行われたように地球周回低軌道上でオリオンとドッキングする。アポロ計画からの変化としては、オリオンではすべての飛行士が月面に降下し、軌道上には無人の宇宙船が待機するという点がある。また探索する地域はアポロ計画ではもっぱら赤道付近が中心だったのに対し、コンステレーション計画では極地方に重点が置かれ、アポロ計画では用いられなかった地球周回ランデブー方式も使用が検討されていた。2010年、バラク・オバマ大統領によりコンステレーション計画は中止された。文化的遺産[編集]世界的な注目[編集]1968年のクリスマス・イヴにアポロ8号が行った月面からのテレビ中継は、その時点までになされた報道の中で最も広範囲に伝えられたものであった。またアポロ11号による人類初の月面着陸は、全世界人口の五分の一がテレビ中継を通じて見守ったと言われている[23] 。日本でNHK総合テレビが1969年7月16日21:45(JST)から75分間放送した報道特別番組「アポロ11号発射」は43.8%の、またイーグルの月面着陸を報じた21日7:00からの「朝のワイドニュース」は45.4%の視聴率（ビデオリサーチ・関東地区調べ）を記録。21日、11時台の総視聴率は46%、12時台のそれは62%（ビデオリサーチ・関東地区調べ）。NHKの調査では、日本では昼間となったアポロ11号による人類初の月面着陸をテレビ同時中継で見た人は68%、21日中に他の番組で見た人を含めると91%に達した[24]。アポロ11号の放送データ復元計画[編集]アポロ計画40周年の記念事業の一環として、NASAはアポロ11号の月面着陸時の放送データ復元を実施している [25] 。11号の月面歩行の様子を撮影したオリジナルの磁気テープは行方不明になっていたが、3年間にわたる徹底的な調査の結果、テープは一旦消去した上で他の衛星データの記録に使用されたため、元データは完全に消去されてしまったと結論された [26] 。アポロ計画に続く時期、NASAでは磁気テープが不足したため、国立記録保管部から大量のテープを持ち出して新しい衛星のデータを記録しており、テープの捜索にはNASAのテレビ担当者ディック・ナフツガー (Dick Nafzger) や月面カメラの設計をしたスタン・リーバー (Stan Lebar) なども加わったが、結局、アームストロングが月面に足を降ろした瞬間を記録した元テープは失われたと結論された [26] 。一方、月面着陸の様子を撮影した特別仕様のカメラとテレビ中継映像の規格の違いから、テレビ放送用に変換された映像がテープに記録されていたため、11号について現存する放映時のデータが23万ドルをかけて収集・編集されることとなった。このデジタル復元作業はナフツガーおよび修復を専門とするロウリー・デジタル（Lowry Digital）社が担当し、ノイズやカメラぶれなどを歴史性を損なわずに除去するなどの作業が2009年9月の完了を目指して実施される [27] 。ロウリー・デジタル社が修復作業をしている映像は、オーストラリアやCBSニュースの保管庫、ジョンソン宇宙センター内で記録されたキネスコープ（kinescope、キネコ）映像などから収集されたものである。復元される映像は一定のデジタル処理を施した白黒映像であり、音声に関しては手を加えられない [27] 。宇宙飛行士に与えた心理的影響[編集]17号で撮影された「ザ・ブルー・マーブル」と呼ばれる地球の全景写真。上部にアフリカ大陸北部とアラビア半島がはっきりと写っている。「我々は月を探査しに行ったのだが、実際には地球を発見することになった」（宇宙飛行士ユージン・サーナン）月からの地球の出。「私が知っているすべてのもの――私の人生、私が愛したもの、海――それらすべての世界が、いま私の親指の後ろに隠れてしまう」（宇宙飛行士ジェームズ・ラヴェル）多くの飛行士が、遠く離れた宇宙空間から地球を見るという経験から深甚な心理的影響を受けたと語っている。アポロが残した最も重要な遺産の一つは、地球が壊れやすい小さな惑星にすぎないという、陳腐とはなっても未だ普遍的とは言い難い認識である。これは月面上から撮影された写真を通じて伝えられ、なかでも8号の飛行士が撮影した「地球の出」（「アースライズ」、左）と、17号の飛行士が撮影した「ザ・ブルー・マーブル」と呼ばれるもの（右）が有名である。これらの写真は、多くの人々にとって環境保護への動機付けになったと指摘される [28] 。脚注[編集]^ Charles Murray, Catherine Bly Cox (2004) (英語). Apollo. South Mountain Books. pp. p. 39. ISBN 978-0976000808. ^ Charles Murray, Catherine Bly Cox (2004) (英語). Apollo. South Mountain Books. pp. p. 45. ISBN 978-0976000808. ^ Michael R. Beschloss, \"Kennedy and the Decision to Go to the Moon,\" in Roger D. Launius and Howard E McCurdy, (eds.) (1997) (英語). Spaceflight and the Myth of Presidential Leadership. University of Illinois Press. pp. p. 45. ISBN 978-0252066320. ^ Michael R. Beschloss, \"Kennedy and the Decision to Go to the Moon,\" p. 55.^ \"Discussion of Soviet Man-in-Space Shot,\" Hearing before the Committee on Science and Astronautics, U.S. House of Representatives, 87th Congress, First Session, April 13, 1961.^ Sidey, Hugh (1963) (英語). John F. Kennedy, President. Atheneum. pp. p. 114. ^ Kennedy to Johnson, \"Memorandum for Vice President,\" April 20, 1961.^ Johnson to Kennedy, \"Evaluation of Space Program,\" April 21, 1961.^ John F. Kennedy, \"Special Message to the Congress on Urgent National Needs\", May 25, 1961^ Charles Murray, Catherine Bly Cox (2004) (英語). Apollo. South Mountain Books. pp. pp. 3 - 4. ISBN 978-0976000808. ^ NASA Langley Research Center's Contributions to the Apollo Program, NASA Langley Research Center.^ John F. Kennedy,\"Address at Rice University on the Nation's Space Effort\"^ Report of the Apollo 204 Review Board, Findings and Recommendations^ 初期には月周遊船 (Lunar Excursion Module, LEM) とも呼ばれていた。^ Chariots for Apollo, Ch 7-4^ Charles Murray, Catherine Bly Cox (2004) (英語). Apollo. South Mountain Books. pp. p. 240. ISBN 978-0976000808. ^ アポロに比べて貨物や乗員が地表に近いスペース・シャトル計画では、大量の水を散布して音響を抑制する方式が採用され、現在のスペース・シャトルでも継続して使用されている。Cf. Sound Suppression Water System^ James Papike, Grahm Ryder, and Charles Shearer (1998). “Lunar Samples”. Reviews in Mineralogy and Geochemistry 36: 5.1–5.234. ^ Burrows, William E. (1999). This New Ocean: The Story of the First Space Age. Modern Library. p. 431. ISBN 0375754857. OCLC 42136309. ^ NASA to boldly go... with Lockheed Martin - space - September 1, 2006 - New Scientist Space^ Technology Review: Part Apollo, Part Boeing 787^ NASA is borrowing ideas from the Apollo - USATODAY.com^ Burrows, William E. (1999). This New Ocean: The Story of the First Space Age. Modern Library. p. p. 429. ISBN 0375754857. ^ 引田惣弥『全記録 テレビ視聴率50年戦争―そのとき一億人が感動した』講談社、2004年、103-105頁、226頁。ISBN 4062122227^ http://www.nasa.gov/mission_pages/apollo/40th/^ a b \"Houston, We Erased The Apollo 11 Tapes\". National Public Radio, July 16, 2009.^ a b Borenstein, Seth for AP. \"NASA lost moon footage, but Hollywood restores it\". Yahoo news, July 16, 2009.^ アル・ゴア (2007年3月17日). “An Inconvenient Truth Transcript”.  Politics Blog -- a reproduction of the film's transcript. 2007年7月29日閲覧。参考文献[編集]的川泰宣 『月をめざした二人の科学者―アポロとスプートニクの軌跡』中公新書 ISBN 4-12-101566-5アンドルー・チェイキン『人類、月に立つ』（原書名: A MAN ON THE MOON)NHK出版 ISBN 4-14-080444-0、ISBN 4-14-080445-9関連項目[編集]ソ連の有人月旅行計画ソユーズL1計画（ソ連版有人月周回計画）ソユーズL3計画（ソ連版有人月面着陸計画）嫦娥計画（中国版有人月面着陸計画）レインジャー計画サーベイヤー計画ルナ・オービター計画スカイラブ計画グランド・チャレンジフロム・ジ・アース/人類、月に立つ トム・ハンクスが製作総指揮のアポロ計画をテーマにしたアメリカHBOのテレビドラマシリーズアポロ計画陰謀論 アポロは月に行かなかった（ムーンホークス）、またはアポロは月で何者かに遭遇したと主張する一連の陰謀論アメリカ合衆国の宇宙開発外部リンク[編集]ウィキメディア・コモンズには、アポロ計画に関連するメディアがあります。APOLLO MANIACS（日本語）NASAアポロ計画公式サイトChariots for Apollo: A History of Manned Lunar Spacecraft By Courtney G Brooks, James M. Grimwood, Loyd S. SwensonNASA SP-4009 The Apollo Spacecraft: A ChronologySP-4029 Apollo by the Numbers: A Statistical Reference by Richard W. OrloffThe Apollo Program (1963 - 1972)The Apollo Lunar Surface Journalアポロ計画(ケネディ宇宙センターウェブサイト)Project Apollo Drawings and Technical DiagramsTechnical Diagrams and Drawingsアポロ計画(月探査情報ステーション)Lunar Rock InventoryThe Project Apollo ArchiveOMWorld's ASTP Docking Trainer PageProject Apollo for Orbiter spaceflight simulatorGoogle Moon: interactive map of the Moon and Apollo landing sitesアポロ計画@スミソニアン国立航空宇宙博物館（英語）ペーパークラフト（U-DON'S FACTORY）Apollo Lunar Module (LM) アポロ月着陸船Apollo-Saturn V アポロ・サターンVApollo-Saturn 1B アポロ・サターン1B表・話・編・歴アポロ計画ロケット発射試験アポロSA-1 · アポロSA-2 · アポロSA-3 · アポロSA-4 · アポロSA-5 · アポロAS-203緊急脱出用ロケット試験アポロQTV · アポロPAT-1 · アポロA-001 · アポロA-002 · アポロA-003 · アポロA-004 · アポロPAT-2 · アポロA-004模擬宇宙船試験アポロA-101 · アポロA-102 · アポロA-103 · アポロA-104 · アポロA-105無人試験アポロAS-201 · アポロAS-202 · アポロ4号 · アポロ5号 · アポロ6号 · スカイラブ1号低軌道地球周回飛行アポロ7号 · アポロ9号 · スカイラブ2号 · スカイラブ3号 · スカイラブ4号 · アポロ・ソユーズテスト計画月周回飛行アポロ8号 · アポロ10号 · アポロ11号 · アポロ12号 · アポロ13号 · アポロ14号 · アポロ15号 · アポロ16号 · アポロ17号アポロ1号（アポロAS-204） · List of missions · キャンセルされたアポロ計画表・話・編・歴アメリカ合衆国政府の有人宇宙飛行計画現在国際宇宙ステーション （国際共同）過去X-15 （弾道飛行） | マーキュリー | ジェミニ | アポロ | アポロ・ソユーズテスト計画 （ソビエト連邦共同） | スカイラブ | シャトル-ミール （ロシア共同） | スペースシャトルキャンセルMISS | オリオン（核パルス推進） | ダイナソア | 有人軌道実験室 | 国家航空宇宙機 | フリーダム宇宙ステーション （現在ISS） | オービタル・スペース・プレーン | コンステレーション計画 Portal:宇宙開発表・話・編・歴宇宙飛行主要項目歴史（英語版）（競争、事故） · 軌道力学応用地球観測衛星（偵察衛星、気象衛星） · 宇宙開発 · 宇宙旅行 · 衛星測位システム · 宇宙建築（英語版） · 宇宙移民有人宇宙飛行主要項目宇宙飛行士 · 生命維持装置危険性無重量状態（宇宙酔い） · 宇宙線主な計画ボストーク · マーキュリー · ボスホート · ジェミニ · ソユーズ · アポロ · スペースシャトル · 神舟 · ミール · ISS · コンステレーションその他宇宙遊泳宇宙機／宇宙船スペースシャトル · 無人宇宙船（英語版） · 宇宙機の推進方法 · スペースプレーン目的弾道 · 軌道（英語版）（対地同期軌道、地球周回軌道） · 惑星間（英語版） · 恒星間航行 · 銀河間航行打ち上げローンチ・ヴィークル · 使い捨て · 再利用 · 宇宙速度 · 直接上昇（英語版） · 非ロケット式宇宙到達（英語版） · 射場 · 発射台主な機関ESA · NASA · RKA · CNES · CNSA · ISRO · JAXAその他民間宇宙飛行 · 宇宙天気予報 · ラグランジュ点 · 宇宙空間と生存（英語版）「http://ja.wikipedia.org/w/index.php?title=アポロ計画&oldid=46525475」から取得 カテゴリ: アポロ計画アメリカ合衆国の歴史 (1945-1989)隠しカテゴリ: 言葉を濁した記述のある記事 (いつ)/2013年1月-3月良質な記事\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f14a"},"body":"わら半紙出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この記事は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2012年4月）わら半紙（わらばんし、藁半紙）とは稲藁や麦藁を原料とする半紙である。明治期からは藁を原料とするパルプから製造された洋紙をさす言葉となり、藁を原料としなくなった現在は中質紙や、さらにその下級紙である更紙（ざらし）、あるいは再生紙をさす言葉として慣例的に使われることがある。また、わら半紙の厚手の物を黄ボール（黄板）と言う。本項では主に明治期以降にわら半紙と呼ばれているものについて記載する。目次1 特徴2 用途3 入手方法4 和紙としてのわら半紙5 関連項目特徴[編集]細かく切った稲藁や麦藁を薬品で煮溶かしてパルプにするため品質が安定せず、藁の形状が残ったままの製品をよく見かけることがあった。このため表裏に差があり、表は比較的平滑であるが裏はザラザラしてペン先や鉛筆の先が引っ掛りやすく、表面の強度も弱かったこともあり消しゴムで消すと破れることもあった。現代のわら半紙（中質紙）は、上質紙と比べ白色度に劣り、リグニンを除去していないため比較的短期間で黄色く変色する。このため一般に長期間の保存には適さない。また、シャープペンシルなどの筆記具を用いると破れやすいという欠点をもつ。この他、学校などの教育現場でよく使われる簡易印刷機（輪転機）等ではインクの乗りが良いものの、通常の印刷機ではインクがにじみやすい、紙詰まりを起こしやすいといった欠点も持つ。用途[編集]かつては、安価であることから、昭和50年代終盤まで、官公庁や教育現場で児童生徒に配布するプリントなどに多用された。また、学校では謄写版（ガリ版）を用いた印刷が一般的でテストや文集、学級新聞などにも使用された。しかしながら印刷機器としてコピー機やリソグラフが使われるようになるとインクやトナーの定着が悪く紙詰まりを起こすわら半紙は次第に教育現場から姿を消していった。ただし、現在でも特に教育現場などで使われる用紙のことを原料や紙質にかかわらず、慣例的にわら半紙と呼ぶことがある。入手方法[編集]現在、藁を原料とする商業的なわら半紙は無くなった。藁は収穫する時期が1年に一度であり、原料として保存するためには大容量の倉庫を必要とするため、コスト的観点から通年入手可能な木材に変わっていった経緯がある。藁を原料としないわら半紙は学校への納入を行っている文房具店や多くの種類の紙を扱っている包装用品店などで入手することが可能であるが、上質紙が主流となった現在、わら半紙の取扱量は減っており、ホームセンター等での入手はほぼ不可能となっている。個人で購入する場合、上質紙よりも割高になることが多い。かつてはわら半紙のほうが安かったが1990年代後半頃から価格が逆転しており、近年再生上質紙も流通するようになったことから、保存性の面からもわら半紙を選ぶメリットはなくなりつつある。和紙としてのわら半紙[編集]冒頭に記述している通り、わら半紙とは元は半紙（和紙）の一種であり、現在でも書道用品として稲藁を原料とした半紙は製造されている。稲藁を原料としたものは吸水性が良く墨のつきも良い為、好んで使われることもある。関連項目[編集]紙板紙半紙「http://ja.wikipedia.org/w/index.php?title=わら半紙&oldid=47853371」から取得 カテゴリ: 紙隠しカテゴリ: 出典を必要とする記事/2012年4月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f14c"},"body":"還元出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、化学反応における還元について記述しています。計算複雑性理論における還元（帰着・変換）については「還元 (計算複雑性理論)」をご覧ください。還元（かんげん、Reduction）とは、対象とする物質が電子を受け取る化学反応のこと。または、原子の形式酸化数が小さくなる化学反応のこと。具体的には、物質から酸素が奪われる反応、あるいは、物質が水素と化合する反応等が相当する。目的化学物質を還元する為に使用する試薬、原料を還元剤と呼ぶ。一般的に還元剤と呼ばれる物質はあるが、反応における還元と酸化との役割は物質間で相対的である為、実際に還元剤として働くかどうかは、反応させる相手の物質による。還元反応が工業的に用いられる例としては、製鉄（原料の酸化鉄を還元して鉄にする）などを始めとする金属の製錬が挙げられる。また、有機合成においても、多くの種類の還元反応が工業規模で実施されている。目次1 有機化学における還元1.1 水素化 (hydrogenation)1.2 ヒドリド還元1.3 金属還元1.3.1 クレメンゼン還元（Clemmensen reduction)1.3.2 バーチ還元 (Birch reduction)1.4 メールワイン・ポンドルフ・バーレー還元 (Meerwein-Ponndorf-Verley Reduction)1.5 ウォルフ・キッシュナー還元（Wolff-Kishner reduction)2 金属精錬における還元3 生体における還元4 還元剤の例5 関連項目有機化学における還元[編集]水素化 (hydrogenation)[編集]水素ガスを還元剤として用いる還元反応を水素化あるいは水素添加（略して水添）という。 通常、触媒を必要とするので、接触水素化と呼ばれることも多い。 触媒が系に溶解する均一系の反応と触媒が系に溶解しない不均一系の反応に大別される。不均一系の水素化では主にニッケル、銅-酸化クロム、ルテニウム、パラジウム、ロジウム、白金などの金属の微粉末、もしくはそれらを活性炭、アルミナ、珪藻土などの不溶性の担体に吸着させたものが触媒として用いられる。C=C二重結合、C≡C三重結合をC-C単結合へ水素化するにはニッケル、ルテニウム、パラジウム、白金が良く用いられる。これらの中からの選択は基質に存在する他の官能基への選択性を考慮して選択される。場合によってはアダムス触媒と呼ばれる酸化白金PtO2のような強力な触媒が使用されることもある。C≡C三重結合をC=C二重結合に部分還元するには、パラジウムを被毒して活性を低下させたリンドラー触媒がしばしば使用される。このとき、シス体のアルケンが選択的に得られる。芳香環を水素化して飽和の環に還元するにはルテニウムやロジウムがしばしば使用される。特にロジウムは水素圧が低くても芳香環を還元することができる。ルテニウムは硫黄化合物による被毒を受けないのでチオフェン環の水素化にも利用できる。アルデヒドおよびケトンのC=O二重結合(カルボニル基)をCH-OH(アルコール)へ還元するにはニッケル、銅、ルテニウム、白金が良く用いられる。銅-酸化クロム触媒はC=C二重結合よりもカルボニル基を選択的に還元できる傾向があるが、この目的にはヒドリド還元の方がすぐれている。エステルのカルボニル基を還元するには、銅-酸化クロム触媒が使用されるが高温、高圧の条件が必要となる。ベンジルアルコールやベンジルエーテルのC-O単結合を加水素分解するにはパラジウム触媒が良く用いられる。この方法は有機合成においてアルコールをベンジル保護した後、脱保護するのに用いられる常法である。炭素-硫黄結合を加水素分解するにはニッケル-アルミニウム合金をアルカリで溶解させて調製するラネーニッケル触媒が用いられる。この反応はアルミニウムの溶解の際にニッケルへ吸着された水素による水素化反応である。カルボニル基をジチオアセタールとした後に、この方法を使用するとメチレン基に還元できる。この反応は中性に近い条件で進行し、クレメンゼン還元（強酸性下で行われる）、ウォルフ・キッシュナー還元（強塩基性下で行われる）の条件では不安定な物質にも適用できる。均一系の水素化ではホスフィン配位子を持つルテニウムやロジウムなどの遷移金属錯体が触媒として使用される。 不斉水素化はキラルなホスフィン(代表としてはBINAP)を配位子としたこの種の触媒で行われる。ウィルキンソン錯体(Wilkinson's complex):RhCl(PPh3)3で低圧でC=C二重結合を水素化することができる。記事：水素化 も参照のこと。ヒドリド還元[編集]金属あるいは半金属の水素化物やその錯化合物（アート錯体）を還元剤として用いる還元反応である。 記事 ヒドリド還元に詳しい。ジボラン (B2H6) はアルデヒドやケトンをアルコールに還元できるほか、カルボン酸もアルコールに還元することができる。水素化ホウ素ナトリウム (NaBH4) はアルコールやアルカリ性の水を溶媒として使用できる還元剤。アルデヒドやケトンをアルコールに還元する。エステルは加熱したり、テトラヒドロフランなどを溶媒に使用するとアルコールに還元される。また、α,β-不飽和カルボニル化合物は 1,4-還元された後、カルボニル基も還元されて飽和のアルコールとなる。しかしセリウム塩を添加すると 1,2-還元が起こりアリルアルコールを生成するようになる。シアノ水素化ホウ素ナトリウム (NaBH3CN) は水素化ホウ素ナトリウムよりも還元力が低いが、酸性の水中での安定性が良い。アルカリ性水溶液では不安定なイミンをアミンに還元するのに利用される。水素化トリエチルホウ素リチウム (LiBH(C2H5)3) は \"Super Hydride\" という商標を持つ還元剤で市販されており、知られているヒドリド還元剤の中では特に強力な還元力を持つ。立体障害を受けているハロゲン化アルキルの還元などに使用される。水素化トリ（sec-ブチル）ホウ素リチウム (LiBH(sec-C4H9)3) および水素化トリ（sec-ブチル）ホウ素カリウム (KBH(sec-C4H9)3) はそれぞれL-Selectride、K-Selectrideの商標を持つ還元剤である。立体的にかさ高い還元剤なので水素化ホウ素ナトリウムによる還元とは立体選択性が変化することがある。水素化ジイソブチルアルミニウム (DIBAL-H) はルイス酸性を有する還元剤で、アルデヒドやケトン、エステルをアルコールに還元できるほか、アセタールを分解してエーテルにしたり、エポキシドを級数の多い側で開環させてアルコールにする。ニトリルはイミンに還元され、加水分解するとアルデヒドになる。また低温で反応を行うとエステルをアルデヒドに部分還元することができる場合もある。水素化アルミニウムリチウム (LAH) (LiAlH4) は強力な還元剤でアルデヒドやケトン、カルボン酸、エステルをアルコールへ還元する。ニトリルやアミドはアミンへ還元される。またハロゲン原子も水素に置換される。エポキシドを級数の少ない側で開環させてアルコールにする。α,β-不飽和カルボニル化合物の還元は1,2-還元が優先しアリルアルコールを生成する。水と接触したり、120℃以上に加熱すると激しく分解して発火することがある。反応は良く乾燥したジエチルエーテルやテトラヒドロフランを溶媒として行う。水素化ビス（2-メトキシエトキシ）アルミニウムナトリウム は Red-Al という商標を持つ還元剤でLAHと同じような還元力を持つ。高温にしても比較的安定であり、発火の危険性が小さい利点がある。水素化トリブチルスズ ((n-C4H9)3SnH) は、ルイス酸の存在下では水素化ジイソブチルアルミニウムと同様の還元作用を示すが、ラジカル的な還元剤として有用である。光照射やアゾビスイソブチロニトリル (AIBN) のようなラジカル開始剤などによりトリブチルスズラジカルが発生し、それによってハロゲン化アルキルや硫黄化合物などからハロゲンや硫黄官能基が引き抜かれ、発生したラジカルが水素化トリブチルスズから水素を引き抜いて還元される。金属還元[編集]単体の金属を還元剤に用いる還元で、以下の例を除くと、もっぱらニトロ基など還元されやすい官能基を還元する場合に利用するが、被毒触媒を用いた水素化反応で置き換えることが可能なことが多い。代表的な反応は酸性溶液下での金属スズを用いたニトロ基のアミノ化反応である。クレメンゼン還元（Clemmensen reduction)[編集]ケトンやアルデヒドのカルボニル基を還元してメチレン基にする還元反応で、亜鉛アマルガムを用いて塩酸などの中で反応させると発生する。記事：クレメンゼン還元 を参照。バーチ還元 (Birch reduction)[編集]アルカリ金属を液体アンモニアに溶解して得られる溶媒和電子による還元。 ベンゼン環はシクロヘキサジエンに還元される。電子供与基がある場合には 1,4-シクロヘキサジエンが、電子求引基がある場合には 2,5-シクロヘキサジエンが得られる。 α,β-不飽和ケトンは 1,4-還元が起こり C=C二重結合だけが部分還元される。 C≡C三重結合はトランス (化学)型の C=C二重結合へと部分還元される。 また、ベンジルエーテルやベンジルチオエーテルは C-O結合、C-S結合が還元される。記事：バーチ還元 を参照。メールワイン・ポンドルフ・バーレー還元 (Meerwein-Ponndorf-Verley Reduction)[編集]トリイソプロポキシアルミニウム (i-PrO)3Al) を触媒としてイソプロピルアルコールを還元剤兼溶媒として使用する還元反応である。 イソプロピルアルコールであることは必須ではなく反応温度を高くすることが必要な場合はシクロヘキサノールなどの他のアルコールも使用される。 この反応は平衡反応であるので反応を完結させるには大過剰の還元剤を使用する、生成したケトンを系外に留出させるなどの方法で平衡を生成系側へ移動させる必要がある。記事：メールワイン・ポンドルフ・バーレー還元に詳しい。ウォルフ・キッシュナー還元（Wolff-Kishner reduction)[編集]ケトンやアルデヒドのカルボニル基を還元してメチレン基にする還元反応で、ヒドラジンと水酸化カリウムを用いてアルコール溶媒下で反応させると発生する。副産物として窒素分子と水が発生する。記事：ウォルフ・キッシュナー還元 を参照。金属精錬における還元[編集]鉄や銅など近世以前に発見され今日でも汎用される金属を製錬する場合、鉱石中に存在する金属酸化物あるいは硫化物を還元し単体金属にするのに溶鉱炉中で炭素を用いて還元する方法が広く用いられる。アルミニウムあるいはアルカリ金属等、酸化され易い金属を炭素を用いて溶鉱炉で還元することは非常に困難である。この様な場合は溶融塩を電気分解することで単体金属を得ることができる。あるいは金属酸化物を還元する方法としてテルミット法が利用される場合もある。生体における還元[編集]生体内では酵素反応により還元反応が進行することが知られている。ほとんどの還元酵素はニコチンアミドアデニンジヌクレオチド (NAD) あるいはフラビンアデニンジヌクレオチド (FAD) を水素供与体（還元剤）として利用する。還元剤の例[編集]シュウ酸H2C2O4 → 2CO2 + 2H+ + 2e-水素H2 → 2H+ + 2e-塩化スズ(II)Sn2+ → Sn4+ + 2e-硫化水素；H2SH2S → S + 2H+ + 2e-ヨウ化カリウム2I- → I2 + 2e-硫酸鉄(II)Fe2+ → Fe3+ + e-二酸化硫黄（酸化剤にもなる）SO2 + 2H2O → SO42- + 4H+ + 2e-過酸化水素（酸化剤にもなる）H2O2 → O2 + 2H+ + 2e-関連項目[編集]酸化還元反応酸化「http://ja.wikipedia.org/w/index.php?title=還元&oldid=28679217」から取得 カテゴリ: 有機化学物理化学化学反応\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f14e"},"body":"Apache Cassandra出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache Cassandra作者Avinash Lakshman, Prashant Malik開発元Apache Software Foundation初版2008最新版1.1.0 / 2012年4月24日（14か月前） （2012-04-24）プログラミング言語Java対応OSCross-platform対応言語英語サポート状況Active種別key-value storeライセンスApache License 2公式サイトcassandra.apache.orgテンプレートを表示Apache Cassandra（アパッチ カサンドラ）は、オープンソースの分散データベース管理システムである。元はFacebook社において大規模データの格納のために開発されたものである。Facebookのデータチームを率いるJeff HammerbacherはCassandraをAmazon DynamoDBのようなインフラストラクチャ上で動作するBigTableデータモデルであると表現している。Cassandraはイベンチュアル・コンシステンシーにより構造化されたキー・バリュー型データストアを提供する。キーは複数の値にマッピングされ、これらはcolumn familyとしてグルーピングされる。column familyはCassandraデータベースが作成される際は固定されているが、後にfamilyに対し列を追加することは可能である。さらに、列は特定のキーにのみ追加されるので、どのfamilyにおいても異なるキーは任意の列数を持つことができる。各キーに対応するcolumn familyの値は連続して記録され、このことによりCassandraは列指向データベースマネジメントシステムと行指向データベースシステムの複合型であると言える。Facebook社は2008年7月にCassandraをオープンソースソフトウェアとして公開した。2009年3月からApache Incubatorプロジェクトとなり、2010年2月にはトップレベルプロジェクトに引き上げられた。外部リンク[編集]公式ウェブサイト日本語訳(あしたのオープンソース研究所)Cassandra Project WikiPresentation on Cassandra at SIGMOD 2008表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Apache_Cassandra&oldid=47262636」から取得 カテゴリ: NoSQLデータベースデータベース管理システムApacheソフトウェア財団\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f14f"},"body":"芳香化合物出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索芳香化合物（ほうこうかごうぶつ、Aroma compound）または着臭剤（odorant）、臭気物質（しゅうきぶっしつ）とは、芳香または悪臭を持つ化学物質のことである。化学物質が芳香もしくは悪臭を持つには、その化合物が揮発性でありそれが嗅覚系まで運ばれ、一つ以上の嗅覚受容体と結合する必要がある。芳香化合物は食品、ワイン、スパイス、香料、精油などで見られ、多くは果物や作物が熟すときに生化学的に形成する。ワインでは、発酵の副生成物として形成する。多くの芳香化合物は香料の製造において重要な役割を果たしている。また、臭気物質は天然ガスや水素ガスのような危険性のある無臭物質にへの付臭に使われることもある。目次1 官能基による芳香化合物の分類1.1 アルコール類1.2 アルデヒド類1.3 アミン類1.4 エステル類1.5 エーテル類1.6 ケトン類1.7 ラクトン類1.8 テルペン類1.9 チオール類1.10 その他2 脚注3 関連項目4 外部リンク官能基による芳香化合物の分類[編集]アルコール類[編集]ベンジルアルコール（酸化するとアーモンド臭のベンズアルデヒド）エチルマルトール（甘い香り）フラネオール（イチゴの香り）1-ヘキサノール（森林の香り）cis-3-ヘキセン-1-オール（芝刈り後の香り）メントール（ペパーミントの香り）アルデヒド類[編集]アセトアルデヒド（辛味）ベンズアルデヒド（マルチパン、アーモンド）ヘキサナール（草の香り）シンナムアルデヒド（シナモン）シトラール（レモングラス、レモンオイル）cis-3-ヘキセナール（未熟のトマト）フルフラール（焼いたエンバク）ネラール（柑橘系、レモングラス）バニリン（バニラ）アミン類[編集]カダベリン（腐敗臭）インドール（ジャスミンの花、糞臭）プトレシン（腐敗臭）ピリジン（不快臭）スカトール（糞臭）置換ピラジン - 2-エトキシ-3-イソプロピルピラジン、2-メトキシ-3-sec-ブチルピラジン、2-メトキシ-3-メチルピラジン（乾燥させたフェヌグリーク、クミン、コリアンダー）アルキルピラジンメトキシピラジントリメチルアミン（魚）エステル類[編集]酢酸エチル（果物の香り）酪酸エチル（果物の香り）カプリン酸エチルカプロン酸エチルカプリル酸エチル酢酸ヘキシル（リンゴ、フローラル）酢酸イソアミル（バナナ）酪酸メチル（リンゴ、果物）サリチル酸メチル（ウィンター・グリーンの油）酪酸ペンチル（ナシ、アンズ）吉草酸ペンチル（リンゴ、パイナップル）ソトロン（メープルシロップ、カレー、フェヌグリーク）メチルフェニルグリシド酸エチル（イチゴ）フルクトン（リンゴ、果物）エーテル類[編集]アネトール（甘草、アニスの種子、ウーゾ、フェンネル）アニソール（アニスの種子）オイゲノール（チョウジ油）2,4,6-トリクロロアニソール（コルク臭）ケトン類[編集]ジヒドロジャスモン（果物、森林）1-オクテン-3-オン（血液、金属、キノコ）[1]2-アセチル-1-ピロリン（新鮮な食パン、ジャスミン米）6-アセチル-2,3,4,5-テトラヒドロピリジン（新鮮な食パン、トルティージャ、ポップコーン）ラクトン類[編集]γ-デカラクトン（強烈なモモの芳香）γ-ノナラクトン（ココナッツ）δ-オクタラクトンジャスミンラクトン（モモとアンズ）マソイアラクトン（ココナッツ）ワインラクトン（甘いココナッツの芳香）テルペン類[編集]樟脳（クスノキ）シトロネロール（バラ）リナロール（フローラル、柑橘、コリアンダー）ネロール（甘いバラの芳香）ネロリドール（森林、樹皮）α-テルピネオール（バイカウツギ）ツジョン（ビャクシ、セージ、アラスカヒノキ、ヨモギ）チモール（タイム）チオール類[編集]エタンチオール（ドリアン、リーキ）チオテルピネオール（グレープフルーツ）メタンチオールその他[編集]メチルホスフィン、ジメチルホスフィン（ニンニク、金属）[1]ネロリン（オレンジ）テトラヒドロチオフェン脚注[編集]^ a b D. Glindemann, A. Dietrich, H. Staerk, P. Kuschk, (2005). “The Two Odors of Iron when Touched or Pickled: (Skin) Carbonyl Compounds and Organophosphines”. アンゲヴァンテ・ケミー 45 (42): 7006–7009. doi:10.1002/anie.200602100. 関連項目[編集]芳香族化合物悪臭嗅覚嗅覚系嗅覚受容体フェロモン付臭外部リンク[編集]Leffingwell, commercial odorant information resource.The Good Scents Company, commercial odorant information resource.Fantastic-Flavour, commercial odorant/flavour information resource.「http://ja.wikipedia.org/w/index.php?title=芳香化合物&oldid=47480969」から取得 カテゴリ: 有機化学嗅覚\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f150"},"body":"紙布出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索紙布（しふ）は、紙糸を材料として織り上げた布である。概要[編集]紙糸を縦糸、横糸の両方に使用した物を諸紙布と言い、縦糸に絹・綿・麻糸を使い、横糸に紙糸を使用した物を絹紙布・綿紙布・麻紙布と言う。紙をそのまま使用した紙衣と異なって軽くて肌触りが良く、特に女性の夏の衣料用として使用された。紙布は江戸時代になってから生産され、『毛吹草』や『諸国万買物調方記』、『和漢三才図会』には、陸奥の白石（現在の宮城県白石市）で生産されていたと記されている。当初は奉書紙の反故紙で紙糸を作っていたが、後にはカジノキの長繊維を丹念に精選してセルロースだけの長い繊維のまま漉いた専用の紙を漉いて用いるようになった。仙台藩の白石城主片倉家は、紙布作りを奨励し、様々な技術改良がなされ、江戸中期には、幕府に特産品として献上されるようになり、京都の公家たちへの進物品にもなった。織り方は当初は平織りだけであったが、細かい皺のある縮緬織りや、斜文にした雲斉織、杉綾織、竜紋織など高級品も開発された。この紙布は、ウィーン万博に出品されて進歩賞を受賞したほか、大正博覧会にも出品されたが、やがて作られなくなった。この白石産の紙布とは別に、明治時代には雁皮を原料とした紙布で壁紙が作られるようになり、第三回内国勧業博覧会には、東京本所の今井直四郎が紙布の壁紙を出品している。「http://ja.wikipedia.org/w/index.php?title=紙布&oldid=30074244」から取得 カテゴリ: 紙衣料白石市\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f14d"},"body":"Ruby出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、プログラミング言語について記述しています。「ルビー」・「ルビ」の他の使い方については「ルビー (曖昧さ回避)」をご覧ください。Rubyパラダイム構造化、命令型、オブジェクト指向登場時期1995年設計者まつもとゆきひろ最新リリース2.0.0-p247 / 2013年6月27日（17日前） （2013-06-27）型付け強い動的型付け, ダック・タイピング主な処理系Ruby MRI, YARV, JRuby, IronRuby, MacRuby影響を受けた言語Smalltalk, LISP, Perl, Python, CLU影響を与えた言語GroovyプラットフォームクロスプラットフォームライセンスBSDライセンス、Rubyライセンスのデュアル[1]（1.9.2まではGPLとRubyのデュアル）ウェブサイトwww.ruby-lang.orgテンプレートを表示プログラミング言語>>他のプログラミング言語■カテゴリ / ■テンプレートRuby（ルビー）は、まつもとゆきひろ（通称 Matz）により開発されたオブジェクト指向スクリプト言語であり、スクリプト言語が用いられてきた領域でのオブジェクト指向プログラミングを実現する。目次1 概要2 設計思想3 実装3.1 公式な実装3.2 その他の実装4 競合言語5 例5.1 コレクション5.2 制御構造5.3 ブロック付きメソッド呼び出し5.3.1 繰り返し処理5.3.2 後処理の省力化5.3.3 本処理を後から指定5.3.4 クロージャ5.4 クラス5.5 例外処理6 Rubyの周辺技術7 Ruby で開発されたアプリケーション8 Rubyを組み込んだアプリケーション9 エピソード10 参考文献11 脚注12 関連項目13 外部リンク概要[編集]Ruby は当初1993年2月24日に生まれ、1995年12月にfj上で発表された。名称の Ruby は、プログラミング言語 Perl が6月の誕生石である Pearl（真珠）と同じ発音をすることから、まつもとの同僚の誕生石（7月）のルビーを取って名付けられた。機能として、クラス定義、ガベージコレクション、強力な正規表現処理、マルチスレッド、例外処理、イテレータ、クロージャ、Mixin、演算子オーバーロードなどがある。Perl を代替可能であることが初期の段階から重視されている。Perlと同様にグルー言語としての使い方が可能で、C言語プログラムやライブラリを呼び出す拡張モジュールを組み込むことができる。Ruby 処理系は、主にインタプリタとして実装されている（詳しくは#実装を参照）。可読性を重視した構文となっている。Ruby においては整数や文字列なども含めデータ型はすべてがオブジェクトであり、純粋なオブジェクト指向言語といえる。長らく言語仕様が明文化されず、まつもとによる実装が言語仕様に準ずるものとして扱われて来たが、2010年6月現在、JRuby や Rubinius といった互換実装の作者を中心に機械実行可能な形で明文化する RubySpec という試みが行われている。公的規格としては2011年3月22日にJIS規格（JIS X 3017）が制定され、その後2012年4月1日に日本発のプログラム言語では初めてISO/IEC規格（ISO/IEC 30170）として承認された [2]。フリーソフトウェアとして Ruby ライセンス（Ruby License や Ruby'sと表記されることもある。GPLかArtisticに似た独自ライセンスを選択するデュアルライセンス。）で配布されている。設計思想[編集]開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなくプログラミングを楽しむことである (enjoy programming)」と述べている。（ただし、まつもとによる明文化された言語仕様は存在しない。）Perlのモットー「やり方はいろいろある (There's More Than One Way To Do It; TMTOWTDI)」は「多様性は善 (Diversity is Good)」というスローガンで Ruby に引き継がれてはいるものの最重要なものではないとも述べており、非推奨な手法も可能にするとともに、そのような手法を言語仕様により使いにくくすることによって自粛を促している。これは言語仕様が「望ましい」習慣の押し付けを行うということであり、洗脳言語（Babel-17）と言われる一面でもある。実装[編集]公式な実装[編集]Rubyの公式な実装には、以下の二種類が存在する。MRI（Matz' Ruby Implementation）1.8.x以前の公式実装。まつもとゆきひろによって開発されはじめたC言語による実装であり、最も広く使われている。JRuby などに対して CRuby と呼ばれることもある。また、JRuby などに対しては、広義の意味で後述の YARV を取り込んだ 1.9.x も含んで MRI と言うこともある。YARV1.9で採用された、MRIを拡張した公式な処理系。これはソースコードをバイトコードへコンパイルした後、バイトコードを仮想機械上で実行するインタプリタである。もともとは開発中におけるその仮想機械の名前。その他の実装[編集]JRubyJava 言語による実装。純粋な Java で行われているため、プラットフォーム非依存の利用が可能。ほとんどの Ruby クラスが組み込みで提供されている。インタープリタ・実行時コンパイラ・事前コンパイラの3種類が用意されている。事前コンパイラでは、Java バイトコードへ変換し、JRuby が無くても他の Java プラットフォーム上で動作させることが可能となる。IronRuby.NET Framework 上で Ruby を動作させる実装であり、.NET Framework のライブラリと連携させることができる。JIT方式のバイトコードインタプリタ。共通言語基盤に準拠した実装（Monoなど）で動作するため、プラットフォーム非依存の利用も可能（ただし、ソースコードが .NET Framework のライブラリに依存している場合は Mono での動作は不可能）。MacRubyMac OS X 上で動作する Ruby 実装。Cocoa を含む様々なフレームワークとの連携が可能。RubyCocoa の問題点を解決するために開発されている。Rubinius仮想機械上で Ruby を実行するJIT方式のバイトコードインタプリタ。大部分が Ruby で実装されている。MagLevsmalltalk仮想マシン上で動作する実装[1]。mruby組み込みシステム向けの軽量版。家電製品の他、スマートフォン、ゲームなどでの使用を想定している。その他Parrot 上で Ruby を動作させるための実装なども開発されている。競合言語[編集]この節は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2013年2月）プログラミング言語としての Ruby は、オブジェクト指向の動的型付け言語のインタプリタ言語として人気のある言語のひとつであり、多くの分野で Perl や Python と競合する。特に Python とは共通する点が多く、このことがそれぞれの言語のユーザ同士の間で「どちらの言語が優れているか」といった論争を生んできた。しかしその論争は技術的な細部にとらわれた不毛な議論になることも多かった。ここであえて両者の細部を比較はしないが、ユーザ数や書かれたシステムの数量・質、同等な機能を持つプログラムの実行速度などを現時点で比べると世界的には Python の方が人気が高い。一方、日本では開発者が日本人であることもあり、Ruby の人気は高く書籍も多く出版されている。とはいえ2004年前後まで圧倒的なキラーアプリがなく、tDiary やバグトラッキングシステム「影舞」程度しか知られていなかったため、大きな普及には至らなかった。ところが2004年末に発表され2005年に一躍脚光を浴びた Ruby on Rails により注目を集め始めた。例[編集]基本的なコード# 文字列、数値を含め、全てがオブジェクトである-199.abs # 199\"ruby is cool\".length                          # 12\"Rick\".index(\"c\") # 2\"Nice Day Isn't It?\".split(//).uniq.sort.join  # \" '?DINaceinsty\"コレクション[編集]配列の作成と使用法a = [1, 'hi', 3.14, 1, 2, [4, 5]]a[2] # 3.14a.reverse # [[4, 5], 2, 1, 3.14, 'hi', 1]a.flatten.uniq # [1, 'hi', 3.14, 2, 4, 5]ハッシュの作成と使用法hash = {'water' => 'wet', 'fire' => 'hot'}hash = {water: 'wet', fire: 'hot'} # シンボルリテラルをキーとする場合、Ruby 1.9 からはこのような Javascript 風の表記ができる。puts hash['fire']       # 表示:  hothash.each do |key, value|puts \"#{key} is #{value}\"end# 表示:               water is wet# fire is hothash.delete_if {|key, value| key == 'water'}   # Deletes 'water' => 'wet'制御構造[編集]ほかの言語でもよくみられるような制御構造を用いることができる。if \"fablic\".length > 3puts 'ya'elseputs 'nop'end# 表示:         yalist = [1, 2, 5, 13, 21]for item in listputs itemend# 表示:         1# 2# 5# 13# 21n = 0while n < 3puts 'foobar'n += 1end# 表示:         foobar# foobar# foobar一部の制御構造は後述するイテレータで代替することができる。ブロック付きメソッド呼び出し[編集]Ruby ではブロック付きメソッド呼び出しを用いるコードが好まれることが多い。これを用いると、ユーザー定義の制御構造やコールバックなど様々な処理を簡潔に記述できるからである。ブロックとは波括弧（{、}）または do、end によって囲まれたコード列のことである。メソッド呼び出しの末尾に記述することが出来る。# { ... }method1 { puts \"Hello, World!\" }# do ... endmethod2 doputs \"Hello, world!\"endブロック付きメソッド呼び出しが繰り返し処理を主な役割としていたことから、イテレータと呼ばれていた時期がある。しかし、実際には繰り返し処理にとどまらず、様々な使われ方をしているので、最近はブロック付きメソッド呼び出し全体の総称としてイテレータという名称を用いるのは適切でないと考えられている。[3]繰り返し処理[編集]配列の各要素への繰り返し処理list = [1, 2, 5, 13, 21]list.map! {|item| item * 2} # listの各要素を2倍する処理以下はブロックを使わずに同じことを行う場合list = [1, 2, 5, 13, 21]n = 0while n < list.lengthlist[n] *= 2n += 1end指定した回数の繰り返し処理3.times { puts 'foobar' }       # 制御構造の項のwhileの例と同じ後処理の省力化[編集]ブロックの内容を実行してから、決められた後処理を行うメソッドもあるFile.open('file.txt', 'w+b') do |file|file.puts 'Wrote some text.'end # Fileはここで自動的にcloseされるこれは次の例と同様の処理を行う（ensure については例外処理の項を参照）beginfile = File.open('file.txt', 'w+b')file.puts 'Wrote some text.'ensurefile.closeend本処理を後から指定[編集]実際に行いたい処理をブロックで記述する。前項の後処理の省力化もこれの一例といえる。def bfs(list)       #配列をツリーに見立てた処理until list.empty?unit = list.shiftyield unit      #ブロックの内容を実行unit.each{|v| list.push v} if defined? unit.pushendendbfs([0,1,[2,3],4,[5,[6,7,8]],9]) {|v| p v}この例は、ツリーから要素と分枝をつぎつぎと取り出して取り出したものになんらかの処理を行うものである。メソッドの利用者は、なんらかの処理のみを記述すればよく、取り出しのアルゴリズムなど、本質的でない内容に意識を向ける必要がなくなる。クロージャ[編集]クロージャとなるようなブロックの引数渡し# オブジェクトのインスタンス変数（変数名の頭に@が付く）でブロックを記憶。def remember(&p)@block = pend# nameを受け取るブロックを引数に、上記のメソッドを呼び出す。remember {|name| puts \"Hello, \" + name + \"!\"}# 後に必要になった時点でクロージャを呼び出す。@block.call(\"John\")# 表示:\"Hello, John!\"メソッドからクロージャを返す例def create_set_and_get(value = 0)return proc {|x| value = x}, proc { value }endsetter, getter = create_set_and_getsetter.call(21)getter.call # => 21クラス[編集]次のコードはPersonという名前のクラスである。その中、まずinitializeはオブジェクトを初期化するコンストラクタである。ほかに2つのメソッドがあり、1つは比較演算子である<=>をオーバーライドしておりArray#sortによりプロパティageでソートすることができる。もう1つのオーバーライド箇所のto_sメソッドは Kernel#puts での表示の形式を整える。attr_readerは Ruby におけるメタプログラミングの例であり、attr はインスタンス変数の入出力を司る、いわゆる値を取得する getter メソッドや値を設定する setter メソッド（アクセサ）を定義する。attr_readerは getter メソッドのみの定義である。なおメソッド中では最後に評価された式が返り値となり、明示的なreturnは省略できる。class Persondef initialize(name, age)@name, @age = name, ageenddef <=>(person)@age <=> person.ageenddef to_s\"#{@name} (#{@age})\"endattr_reader :name, :ageendgroup = [ Person.new(\"John\", 20),Person.new(\"Markus\", 63),Person.new(\"Ash\", 16)]puts group.sort.reverse結果は3つの名前が年の大きい順に表示されるMarkus (63)John (20)Ash (16)例外処理[編集]例外はなにか不具合が起こったときraiseの呼び出しで発生させることができる。Ruby での例外は Exception クラスか、そのサブクラスのインスタンスである。例外にはメッセージを追加することもできるraise \"This is a message\"さらに例外のタイプも指定できるraise ArgumentError, \"Illegal arguments!\"例外はrescue節で処理することができ、次のようにコードにrescueを付加するだけであるbegin# 通常処理rescue# 例外処理。引数を省略すると、StandardErrorのサブクラスの例外のみ処理するrescue SomeError# 例外処理。SomeErrorの例外のみ処理する。ensure# 例外の発生に関わらず必ず実行される処理else# 例外が発生しなかったときに実行される処理endRubyの周辺技術[編集]分散オブジェクトを実現する dRubyRuby スクリプトに埋め込むことができる文書形式RDRuby によるRDを採用したウィキ、RWikiRuby からSDLライブラリを扱えるようにするRuby/SDLRuby から Delphi を扱えるようにする ApolloRuby によるウェブアプリケーションフレームワーク Ruby on RailsRuby の別の処理系である YARVRuby の統合開発環境 RDERuby のコードを Windows の実行形式ファイルに変換する ExerbRuby 用のライブラリ管理システムである RubyGemsApache HTTP Server に組み込むための mod rubyサーバサイドでHTMLへの埋め込み Ruby 文を実現する eRubyMicrosoft Windows の ActiveX 環境で Ruby インタープリターを呼び出す ActiveScriptRuby（Internet Explorer 限定だがHTMLに埋めこんでクライアント上で動かすスクリプト言語として Rubyを指定できるようになる）Ruby から Win32API やCOMコンポーネントを呼び出すためのライブラリー WIN32OLEJavaScript や Flash 上で動く Ruby の処理系 HotRubyRuby によるビヘイビア駆動開発のためのフレームワーク RSpecRuby で書かれたビルドツール RakeRuby で開発されたアプリケーション[編集]tDiary影舞HikiRuby on RailsGitHubRedmineBasecampRadiantCMSqwikWebWEBrickMongrelPhusion PassengerPuppetChefRubyを組み込んだアプリケーション[編集]RPGツクールXP・RPGツクールVX株式会社エンターブレインから発売されているRPG制作ソフトシリーズのうち、RPGツクールXPとRPGツクールVXでは、Ruby をツクール専用にカスタマイズした RGSSを搭載している。同シリーズの従来ソフトではあらかじめ用意された機能しか使えなかったが、RGSSにより戦闘などのシステムを一から構築する事が出来るようになった。エピソード[編集]Ruby ではブロック構造を end で終える構文が採用されているが、開発者のまつもとゆきひろは他の構文が採用される可能性があったことを述べている。当時、Emacs 上で end で終える構文をオートインデントさせた例はあまりなく、Ruby 言語用の編集モードにオートインデント機能を持たせられるかどうかが問題になっていたためである[注釈 1]。実際には数日の試行でオートインデント可能であることがわかり、現在の構文になった。C言語のような{～}を使った構文も検討されていたが、結局これは採用されなかった[4]。参考文献[編集]高橋征義・後藤裕蔵 『たのしい Ruby　Rubyではじめる気軽なプログラミング』 まつもとゆきひろ監修、ソフトバンクパブリッシング、2002年4月。ISBN 4-7973-1408-7。 - プログラム未経験者向けの入門書。高橋征義・後藤裕蔵 『たのしいRuby　Rubyではじめる気軽なプログラミング』 まつもとゆきひろ監修、ソフトバンクパブリッシング、2006年8月、第2版。ISBN 4-7973-3661-7。高橋征義・後藤裕蔵 『たのしい Ruby』 まつもとゆきひろ監修、ソフトバンクパブリッシング、2010年3月、第3版。ISBN 978-4-7973-5740-0。デビット・トーマス・アンドリュー・ハント 『プログラミングRuby　達人プログラマーガイド』 田和勝訳、まつもとゆきひろ監修、ピアソン・エデュケーション、2001年9月。ISBN 4-89471-453-1。Dave Thomas・Chad Fowler・Andy Hunt 『プログラミング Ruby 言語編』 田和勝訳、まつもとゆきひろ監修、オーム社、2006年8月、第2版。ISBN 4-274-06642-8。Dave Thomas・Chad Fowler・Andy Hunt 『プログラミング Ruby ライブラリ編』 田和勝訳、まつもとゆきひろ監修、オーム社、2006年8月、第2版。ISBN 4-274-06643-6。Dave Thomas・Chad Fowler・Andy Hunt 『プログラミング Ruby 1.9　言語編』 田和勝訳、まつもとゆきひろ監修、オーム社、2010年5月。ISBN 978-4-274-06809-6。Dave Thomas・Chad Fowler・Andy Hunt 『プログラミング Ruby 1.9　ライブラリ編』 田和勝訳、まつもとゆきひろ監修、オーム社、2010年5月。ISBN 978-4-274-06810-2。David Flanagan・まつもとゆきひろ 『プログラミング言語 Ruby』 卜部昌平監訳、長尾高弘訳、オライリー・ジャパン、2009年1月。ISBN 978-4-87311-394-4。まつもとゆきひろ・石塚圭樹 『オブジェクト指向スクリプト言語 Ruby』 アスキー〈ASCII software science : Language 11〉、1999年11月。ISBN 4-7561-3254-5。まつもとゆきひろ 『まつもとゆきひろ　コードの世界～スーパー・プログラマになる14の思考法』 日経Linux編集、日経BP社、2009年5月。ISBN 978-4-8222-3431-7。脚注[編集]^ “Ruby'sライセンスの、BSDLとのデュアルライセンスへの変更” (日本語). ruby-dev mailing list.. (2010年9月24日). http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-dev/42294 2011年4月20日閲覧。 ^ http://www.ipa.go.jp/about/press/20120402_2.html^ http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/39878^ まつもとゆきひろ 「探訪 Ruby 第6回」『Linux Magazine』56号、株式会社アスキー、2004年。^ まつもとゆきひろは1988年に Emacs に触れて以来、Emacsを使い続けている。（大竹智也 「本書に寄せて」『Emacs実践入門 思考を直感的にコード化し、開発を加速する』 技術評論社、2012年4月5日、初版第1刷、iiiからivページ。ISBN 978-4-7741-5002-4。、まつもとによる記述より）関連項目[編集]Rubyアソシエーション外部リンク[編集]ポータル FLOSSウィキメディア・コモンズには、Rubyに関連するカテゴリがあります。Ruby 公式ウェブサイトスラッシュドット・ジャパンでの まつもとゆきひろ へのインタビューOpen Directory — Ruby カテゴリRuby Application ArchiveRubyForgeRuby TutorialRubyWorldConferenceRubySpec - The Standard You Trust中高生国際 Ruby プログラミングコンテスト情報処理推進機構：プレス発表：プログラム言語 Ruby のJIS規格（JIS X 3017）制定について表・話・編・歴フリーソフトウェアとオープンソースソフトウェア全般コピーレフトフリーソフトウェアフリーソフトウェアの定義無料と自由（英語版）オープンソースソフトウェアパッケージの一覧（英語版）オープンソースのアンドロイドアプリケーションの一覧（英語版）フリーのウェブアプリケーションの一覧（英語版）フリーソフトウェアプロジェクトの一覧（英語版）/OSSホスティングサービスの比較以前はプロプライエタリだったソフトの一覧（英語版）オープンソースソフトウェアOS（英語版）AROSBSDDarwineCosFreeDOSGNUHaikuInfernoLinuxMachMINIXOpenSolarisSymbianPlan 9ReactOS開発（英語版）Basic For Qt（英語版）EclipseFreeBASICFree PascalGCCGambasJavaLLVMLuaNetBeansOpen64（英語版）PerlPHPPythonROSE（英語版）RubyTcl/Tk歴史（英語版）GNUHaiku（英語版）Linux（英語版）MozillaApplication Suite（英語版）Firefox（英語版）Thunderbird（英語版）団体Apacheソフトウェア財団Android Open Source ProjectBlender Foundation（英語版）Eclipse Foundationfreedesktop.orgフリーソフトウェア財団ヨーロッパインドラテンアメリカFSMI（英語版）GNOME FoundationGNU Project（英語版）Google CodeKDE e.V.（英語版）Linux FoundationMozilla FoundationOpen Source Geospatial Foundation（英語版）Open Source InitiativeSoftware Freedom ConservancySourceForgeSymbian FoundationThe Document FoundationXiph.Org FoundationXMPP Standards Foundation（英語版）X.Org FoundationライセンスApacheArtisticBeerware（英語版）Boost（英語版）BSDGNU GPLGNU LGPLISCMITMPLMs-PL/RLzlibパブリックドメイン/CC0（英語版）WTFPLフリーソフトウェア財団が承認したライセンス（英語版）ライセンス標準オープンソースの定義フリーソフトウェアの定義Debianフリーソフトウェアガイドライン課題バイナリ・ブロブデジタル著作権管理 (DRM)グラフィックハードウェアとの互換性（英語版）ライセンスの氾濫Mozilla関連ソフトウェアのブランド変更プロプライエタリ・ソフトウェアSCO-Linux論争（英語版）セキュリティ（英語版）ソフトウェア特許ハードウェア制限（英語版）Trusted Computing（英語版）ウィルス性ライセンスTiVo化その他代替用語（英語版）コミュニティ（英語版）Linuxディストリビューションフォーキング運動Microsoft Open Specification Promise（英語版）Revolution OSオープンソースとクローズドソースの比較（英語版）Portal:FLOSS表・話・編・歴RubyIDENetBeans ·  RubyForge ·  RadRails ·  RubyMine ·  ActiveState_Komodo実装Ruby MRI ·  YARV ·  JRuby ·  IronRuby ·  Rubinius ·  XRuby ·  MacRuby ·  RubyJS ·  HotRuby ·  mrubyアプリケーションCapistrano ·  Chef ·  Hackety Hack ·  Interactive Ruby Shell ·  Rake ·  RubyGemsライブラリー ·フレームワークAdhearsion ·  Camping ·  eRuby ·  Hobo ·  Merb ·  NArray  ·  Nitro ·  RubyCocoa ·  Ruby on Rails ·  Ramaze ·  Sinatra ·  Padrino · QtRubyサーバーソフトウェアMongrel ·  Phusion Passenger (mod_rails/mod_rack) ·  WEBrick ·  mod_rubyその他Application Archives ·  Document format ·  Book Guides ·  Ruby Central ·  日本Ruby会議カテゴリ「http://ja.wikipedia.org/w/index.php?title=Ruby&oldid=48326271」から取得 カテゴリ: プログラミング言語オブジェクト指向言語オープンソーススクリプト言語Ruby隠しカテゴリ: 出典を必要とする節のある記事/2013年1月-2月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f151"},"body":"Apache Maven出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache Maven開発元Apacheソフトウェア財団最新版3.0.4 / 2012年1月20日（17か月前） （2012-01-20）対応OSクロスプラットフォームプラットフォームJava種別プロジェクト管理ツールライセンスApache License 2.0公式サイトhttp://maven.apache.orgテンプレートを表示Apache Maven（アパッチ メイヴァン／メイヴィン）は、Java用プロジェクト管理ツールである。Apache Antに代わるものとして作られた。Apacheライセンスにて配布されているオープンソースソフトウェアである。目次1 特徴2 Maven 23 外部ツール4 外部リンク特徴[編集]このツールの大きな特徴はプラグイン拡張により様々な使い方ができることである。ソースコードのコンパイル、テスト、Javadoc生成、テストレポート生成、プロジェクトサイト生成、JAR生成、サーバへのデプロイ、WAR, EARファイル生成など様々な機能が用意されており、Antの場合にはbuild.xmlという設定ファイルに細かい指示を記述して行っていた各処理を、Mavenでは指示をコマンドラインに記述するだけで一度に実現が可能である。pom.xml（Maven1ではproject.xml）の<dependency>タグにプロジェクトで使用したいJARライブラリを指定することで、外部JARのアップデートが容易となる。従来はJARを手動でダウンロードして、手動でインストールする必要があった。この機能によってJakarta JJarというPerlのCPANやPHPのPEARに似た技術により、WindowsUpdateなどのLiveUpdate（英語版）のように容易にライブラリをアップデートできる。そのほかCVSやSubversionなどのバージョン管理システムにも対応している。開発チームでプロジェクトを共有したいとき、JARファイルをわざわざ他者に手動でダウンロード、インストール、アップデートさせる手間も省くことができ、pom.xmlファイルと必要なソースコード、リポジトリに登録されていないJARファイルを配布するだけで済むようになる。Mavenはプラグインによって拡張することも可能である。Maven 2[編集]Maven 2はJavaで書き直されて多くの点で改良されているため、Maven 1と互換性がかなり低いものの、Maven 1とMaven 2で使われるMavenのファイル名が異なることから、ひとつのMavenプロジェクトディレクトリでMaven 1とMaven 2の設定ファイル（project.xml,pom.xmlなど）を共有し、併用することができる。Apache Jelly（英語版）及びAntに対する依存性はなくなっている。また、スクリプト言語であるGroovyに対応している。Maven 2ではproject.xmlがpom.xmlになり文法が変わっている。project.propertiesはsettings.xmlに変わった。Maven 1で使用していたmaven.xmlはpom.xmlに統合されている。外部ツール[編集]Maven 1,Maven 2にはEclipse (統合開発環境)から利用可能なプラグインMevenide, Maven workshop, Maven Repo Search Plugin, m2eclipseなど、Mavenの作業を容易にするGUIベースの外部ツールが存在する。（今のところMaven2に対応しているのはMaven Repo Search Plugin, m2eclipse,IAM(q4e) のみ）外部リンク[編集]ポータル FLOSSMaven ホームページ表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.orgこの「Apache Maven」はFLOSSに関連した書きかけ項目です。この記事を加筆して下さる協力者を求めています（Portal:FLOSS）。「http://ja.wikipedia.org/w/index.php?title=Apache_Maven&oldid=47464400」から取得 カテゴリ: Apacheソフトウェア財団ソフトウェア開発ツールJavaJavaツール隠しカテゴリ: FLOSS関連のスタブ項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f152"},"body":"ペーパーナイフ出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この記事は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2013年6月）ペーパーナイフ封筒を開封するところペーパーナイフ（英: paper knife、独: Brieföffner）は、手紙を開封したり、折り畳んだ紙を切り分けるために利用される道具である。文房具の一種で、主に手紙が入れられた封筒や、本・雑誌の袋綴じを開くために利用される。つくりと原理[編集]ナイフと名が付いているが、鋭利な刃付けが成されている物は稀で、先端が尖っている以外では、その刃先を触っても安全である。その形状は柳葉状の紙の切断に用いる薄くて長く細い部分と、道具として扱うための握りとから成るが、余り強い力で使う道具でも無いため、握りも申し訳程度の、細く・薄く・軽く作られたもので、ここを指で摘んで使用する。材質的には鉄・ステンレス・プラスチックの物が多く見られるが、余り強度を必要とされないことから、青銅や真鍮・アクリル・ガラスなどといった柔らかい・もしくは脆い素材の物も見られる。特に卓上の華として美しく装飾されたものも多く、高価な物では彫金が施されていたり、象嵌や螺鈿といった物で宝飾されている物も見られる。土産物として稀に木製のペーパーナイフもある。ペーパーナイフで紙を切る原理は、折ったことにより繊維の強度が弱くなった折り目の部分を鋭利ではない刃で引きちぎることで切り分ける。この場合、鋭利な刃物だと繊維の強弱に関係なく紙を切り裂いてしまうため、折り目の通りに切れずに裁断部が刃の走った跡でいびつな形になってしまうことが多い。つまりペーパーナイフは鋭利ではないことにより折り目の形どおり真っ直ぐに紙を切り分けることができることを利点としている。用途[編集]15世紀頃にヨーロッパで活版印刷術が発明されてさまざまな印刷物が販売されるようになったが、新聞や書籍は裁断・表装されずに販売されており、購入者が自分で行う作業であった。その際にペーパーナイフは必需品であり、19世紀頃までは文字を読むことは貴族・富裕層など特権階級が行えることであったため、ステータスシンボルの一つとして上記のように豪華な装飾が施されたものが存在する。その「固く薄い・先端が鋭くなっているヘラ状の器具」という事から、紙を切断する用途以外（何かを突付いたり、隙間に突っ込んだり、掻き出したり…など）にも利用される事もあるが、稀にハサミと並んで人を殺傷する用途に用いられる事も有る。推理小説などでは好んで用いられる小道具だが、書斎などでは机の上に置かれることも多い事から、とっさに掴んで身を守るために使用される武器として登場する。ペーパーナイフそのものには封書の開封という目的に対して他の文房具よりもあきらかに容積があるため、 会社の事務用としてはカッターやはさみを代用とし、ペーパーナイフそのものを所持する人は少ない。 封書をきれいに開けることが出来る新型の文房具としては、刃を隠しながら端を滑らせるだけできれいに開封できるカッターや、回転刃によるオープナーなどが発明されており（「レターオープナー」の項を参照）、ますますペーパーナイフを見ることが少なくなっている。もうひとつの理由として土産物としては、飛行機で運ぶ場合、手荷物として運べない（預ければ運べる）ので、各地であまり製造しないことによる。しかし現在でもヨーロッパでは広く作られ、マイセンでは優美な陶器がついたペーパーナイフが売っている。ウィキメディア・コモンズには、ペーパーナイフに関連するメディアがあります。「http://ja.wikipedia.org/w/index.php?title=ペーパーナイフ&oldid=48053386」から取得 カテゴリ: 文房具ナイフ郵趣隠しカテゴリ: 出典を必要とする記事/2013年6月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f153"},"body":"月面車出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索月面車（げつめんしゃ）とは、月面上を走行するために造られた自動車のこと。目次1 ソビエト連邦の月面車（ルノホート）2 アメリカ合衆国の月面車（ルナビークル）3 日本の月面車（ルナローバ）4 中国の月面車5 ロシアの月面車6 インドの月面車7 トピック8 関連項目9 参考文献10 脚注ソビエト連邦の月面車（ルノホート）[編集]ルノホート1号詳細は「ルノホート計画」を参照ソビエト連邦はルナ計画の一環として、アメリカに先駆けて月面車を月面へ投入した。1970年11月10日にルナ17号がルノホート1号を雨の海へ、1973年1月8日にルナ21号がルノホート2号を晴れの海へ運んでいる。本来ソビエト連邦の月面車は、有人月面着陸プロジェクトの一環として開発が開始されたものであるが、有人着陸のスケジュールが遅延（最終的には断念）したことから無人走行車となった。4輪のバギーカーに似た外観のアメリカの月面車と異なり、丼鉢に8つの車輪がついたような外見ではあるが、各種ビデオカメラやX線スペクトロメーターなど充実した観測計器を搭載しているほか、丼鉢の蓋の裏に搭載した太陽電池によりバッテリーを充電させ長期間の稼働を実現させている。1号は11ヶ月にわたり10km以上、2号は4ヶ月にわたり37km以上を走行し、多くの画像や観測機器のデータなどを地球に送信してきた。さらに有人月面探査計画で着陸地点の予備調査を行うルノホート3号と4号が製造されたが（ソユーズL3計画参照）1974年の有人探査計画中止に伴い打ち上げはキャンセルされた。のちに、1986年4月26日に起きたチェルノブイリ原子力発電所事故において、ルノホートの技術を応用した無人作業車が復旧活動に活躍した。アポロ15号の船外活動時に使用された月面車アメリカ合衆国の月面車（ルナビークル）[編集]詳細は「LRV (月面車)」を参照アポロ計画の一環として、初の有人月面自動車として投入された。設計は5000万ドルでポルシェが引き受け[1]、ボーイングが製造した。全長3m、横幅1.8m、重量200kg[1]。1/4馬力のモーターを4つの車輪のハブにそれぞれ内蔵し合計1馬力[1]。電源は銀亜鉛電池[1]と太陽電池。乗員は2名。アポロ15号[1]、アポロ16号、アポロ17号の3回のミッションを通じて、宇宙飛行士の月面での移動や採取したサンプルの運搬などに用いられた。凸凹が多く砂地でタイヤがめり込みやすい月面であるが、最高速度は16km/hを記録している[1]。アポロ17号での走行距離は36kmに及んだ。日本の月面車（ルナローバ）[編集]日本のJAXAは将来独自で行うであろう月面探査を見据えて、無人の小型実験車の研究を開始している。宇宙科学研究所相模原キャンパスの一般公開日には、モデルが展示されることもある。中国の月面車[編集]中国では嫦娥3号によって、2013年に月面の「虹の入江」へ無人月面車を投入し、土壌の採取・分析や地下100メートルの地質構造調査を行うとされる。[2]月面車には太陽光パネルの他に約半月も続く極寒の月の夜を越すために機器の保温用として30年間の長期稼動が可能な原子力電池が搭載される。[3]ロシアの月面車[編集]現在、ルナグローブ計画による月探査の一環としてポーラームーンローバーを送る計画がある。インドの月面車[編集]インド宇宙研究機関もロシア連邦宇宙局と共同でチャンドラヤーン2号の計画を進めている。トピック[編集]NASAでは現在でも技術開発コンテストの一部門に月面車の開発を掲げるなど、基礎研究を続けている。2006年のコンテストでは、100万ドルの賞金額であった。関連項目[編集]探査車月面着陸Google Lunar X Prize（民間による月面探査コンテスト）アレクサンドル・ケムルジャン（ルノホートの開発者）マーズ・ローバー（火星探査車）参考文献[編集]『われらがポルシェ ポルシェなんでも事典』講談社脚注[編集]^ a b c d e f 『われらがポルシェ ポルシェなんでも事典』p.185。^ 人民網日本語版（2009年3月6日）^ レコードチャイナ（2012年7月29日）表・話・編・歴月面車運用ルノホート計画 (en) : ルノホート1号 (1970) • ルノホート2号 (1973)アポロ計画: LRV (アポロ15号, 1971 • アポロ16号, 1972 • アポロ17号, 1972)計画嫦娥3号ローバー (2013) • チャンドラヤーン2号ローバー (2014) • アストロボティック・レッド・ローバー（英語版） (2015) • 嫦娥4号ローバー (2015) • ATHLETE (2010年代) • Space Exploration Vehicle (2010年代) • Scarab (2010年代)「http://ja.wikipedia.org/w/index.php?title=月面車&oldid=48051560」から取得 カテゴリ: 月探査自動車の形態\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f155"},"body":"根の説出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索根の説（こんのせつ、Radical theory）とは、有機化合物の構造に関する古典的な説のひとつである。有機化合物は根と呼ばれる不変に近い要素をいくつか組み合わせたものであるというのが根の説の主張であった。この説はユストゥス・フォン・リービッヒによって主張され、イェンス・ベルセリウスによって電気化学的二元論を有機化合物に適用する上で使用された。しかしアンドレ・デュマ、オーギュスト・ローランらの置換反応の研究により根の不変性が覆された。そして置換の実験事実を取り入れることで根は、現在の官能基の概念へと変化していった。また根の不変性が崩れたことから、有機化合物を根の集合であるとする説の意義はほとんどなくなった。そして根を原子に解体した原子価説により有機化合物の構造は説明されるようになった。基の説（きのせつ）とも呼ばれるが、この「基」は現在の基とは異なる意味を持つ。また英語であるRadicalも現在用いるラジカルとはまったく意味が異なる。目次1 根とは2 有機化合物中の根の発見3 根の単離4 根の不変性の崩壊と概念の変化5 ヘルマン・コルベの根の説6 根の説の終焉7 参考文献根とは[編集]根という語はアントワーヌ・ラヴォアジエの化合物体系の中で最初に用いられた。この体系では、根は化合物から酸素を除いた残りの部分を意味していた。しかし、時代が下るとこの意味は変化してくる。19世紀はじめ頃には化学反応の際にバラバラにならず集団としてふるまう原子団という意味で使用されるようになった。当時知られていた反応は主に無機塩のイオンが交換する反応であったので、根は多原子イオンとほぼ同義であった（なお現在でも陰イオンのことを根と称することがある）。例えば1815年にジョセフ・ルイ・ゲイ＝リュサックはシアン根 (CN) を見出している。また、1816年にはアンドレ＝マリ・アンペールがアンモニウム根 (NH4) を見出している。1820年代に入ると有機化合物の研究が盛んになり、有機化合物中にも根が存在するかどうかが注目されていた。有機化合物中の根の発見[編集]1828年にアンドレ・デュマはエタノールから得られる化合物について研究していた。デュマはアンモニアと酸の反応との類推から、エタノールは C2H4 （現在のエチレンに相当する）と水が結合したものであり、水が別の化学種と交換することによって誘導体が得られていると考えた。これが有機化合物においても不変な要素が存在することを主張した最初の例であった。ベルセリウスがこの説 C2H4 をエテリンと命名したことから、この説をエテリン説という。また、1832年にフリードリヒ・ヴェーラーとユストゥス・フォン・リービッヒは安息香酸誘導体の研究から反応によって変化しない C7H5O の部分が存在することに気がつき、これをベンゾイル根と命名した。さらに翌年ロバート・ケインがデュマが研究したのと同じエタノール誘導体にも反応によって変化しない C2H5 の部分が気づき、これをリービッヒも翌年独立に発見しエチル根と命名した。これらの結果からリービッヒは化学反応によって変化しない根がそれぞれの有機化合物に存在することを主張した。これが根の説である。当時の有機化学界における第一人者であったイェンス・ベルセリウスは、自身の炭素や水素が陽性の根を形成し、陰性の酸素と結合するという電気化学的二元論の立場から根の説を支持した。ベルセリウスは、ベンゾイル根については真の根は C7H5 の部分で、この酸化物がベンゾイル根と考えていた。根の単離[編集]当時は分子内に存在する根は何らかの方法で単離できるものであると考えられていた。根の単離に成功したという報告はまず1839年、ローベルト・ブンゼンによってなされた。ブンゼンは有機ヒ素化合物を研究しており、酢酸カリウムと亜ヒ酸を反応させると、カコジル（ジメチルアルサニル）根 ((CH3)2As) が単離できると報告した。また、このカコジル根から誘導体を合成できることも示した。ヘルマン・コルベは酢酸を電気分解してメチル根が得られることを報告した。またさらに有機亜鉛化合物を研究していたエドワード・フランクランドは、1850年に亜鉛とヨードメタンまたはヨードエタンの反応でメチル根、エチル根が生成したと報告した。しかし、これらは後に実際には根の2量体であったことが明らかとなった。当時はまだ分子の概念が確立しておらず、組成式のみから判断した故の過ちであった。一方、シャルル・ジェラールは複分解反応の研究から、有機化合物の中の根はリービッヒが化学反応の中においてのみ現れるもので、そのような実体は存在しないという立場をとった。ジェラールの理論を受け継いだフリードリヒ・ケクレもこの立場を継承していた。根の不変性の崩壊と概念の変化[編集]一方、デュマとその弟子たちによって不変とされていた根が化学変化を起こす例が多数発見された。1834年、デュマがエタノールを塩素と反応させたところ、クロラールが生成した。これは不変と考えられていたエチル根に塩素がとりこまれ変化したことを示していた。しかし、これは大きな反響は呼ばず根の説はしばらくはそのまま存続することになる。それどころか、デュマ自身がこの実験結果の重要性には気づいていなかった。1837年にデュマはリービッヒと共同で有機化学も無機化学と同じように根によって説明できることを宣言する論文を発表している。むしろ置換反応の重要性に気づいていたのはデュマの弟子のオーギュスト・ローランであった。ローランは1836年にナフタレンのハロゲン置換体の研究から、分子の骨格部分(核)にある水素がハロゲンに置換されても物質の性質に影響をほとんど及ぼさないとする核の説を発表した。その後、デュマ自身も置換反応の重要性に気づいた。1839年に酢酸を塩素化してトリクロロ酢酸を得、ここでローランと同様に水素とハロゲンは置換されても物質の性質にほとんど影響しないという立場に変わった。そしてデュマは新たに根の説に変わる型の説を提唱した。このころ根の説の創始者であったリービッヒはすでに農芸化学の分野へと転向しており、根の説を積極的に擁護しようとする立場から離れていた。電気化学的二元論の支柱として根の説を採用したベルセリウスも多くの置換反応の例を前に根の説を変更せざるを得なくなった。そこでベルセリウスはデュマの弟子であったシャルル・ジェラールが1839年に発表した説を採用した。ジェラールの説は有機化合物は2つの根が結合したもので、複分解反応はその根の交換によるというものであった。ベルセリウスは化合物の性質において重要な根とそうでない根に分け、化合物の性質において重要な根は不変であるが、そうでない根は置換反応を起こすことができ、置換を起こしても化合物の性質に大きな影響は及ぼさないとした。例えば酢酸はベルセリウスによれば CH3•1/2C2O3•1/2H2O という形で表される。メチル根 CH3 の部分は重要でない根であり置換反応を起こしても酸という性質には影響しない。一方 C2O3 （当時の考えではシュウ酸に相当する）の部分は酸としての性質を表す部分であり変化しない。このようにして根の不変性は放棄され、特定の性質を示す根という現在の官能基に相当する概念がここで導入された。ヘルマン・コルベの根の説[編集]ベルセリウスの考えはブンゼンの弟子であったヘルマン・コルベによって引き継がれた。まずコルベは1845年にメタンスルホン酸を研究し、これが酢酸の類縁体であり CH3•1/2S2O5•1/2H2O という形で表されることを示した。しかしコルベはベルセリウスと異なり、根の不変性という点にはこだわってはいなかった。コルベは1848年にニトリルについて研究を行ない、ニトリルが R•CN という形で表され、これを加水分解することでカルボン酸 R•1/2C2O3•1/2H2O が得られることを示した。すなわちニトリルの性質を表す根 CN がカルボン酸の性質を表す根 C2O3 へと変化すると主張したのである。さらに1850年にはエタノール、アセトアルデヒド、酢酸やその誘導体の相互の関係についての研究から、これらの中に CH3•C という根が存在するとした。そして2番目の炭素（カルボニル炭素）が化学反応において外部の試薬と反応する際に中心的な役割を果たすとした。例えばエタノール (CH3•C•H2•1/2O•1/2H2O)ではカルボニル炭素は水素と結合しており、それが酸化によって脱水素されてアセトアルデヒドとなり、さらにカルボニル炭素に酸素が付加することで酢酸になると考えた。一方、根の説に対抗する型の説では含酸素化合物を水の誘導体として考えていたが、アセトアルデヒドや酢酸、アセトンのような二重結合を含む化合物をその体系の中にうまく位置づけることができなかった。その点コルベの根の説では明快にそれらの関係を説明することができた。1852年にエドワード・フランクランドは有機金属化合物の研究から原子価の概念を提唱し、有機金属化合物が金属の酸化物や塩化物の酸素や塩素をアルキル根で置換されたものであることを提唱した。1857年にコルベはこの考え方を有機化合物へと拡張し、すべての化合物が炭素の酸化物、二酸化炭素の誘導体とみなせることを提唱した。すなわちコルベもフリードリヒ・ケクレとほぼ同時期に炭素の原子価が4価であることに到達したのである。根の説の終焉[編集]炭素原子が4価である結論に至ったコルベとケクレであるが、その考え方には大きな違いがあった。コルベは原子がいくつか集合して根をつくり、根がいくつか集合して化合物をつくるという考えを持っていたのに対し、ケクレはそのような実体を持つ根の概念を否定していた。また、ケクレは炭素原子と他の原子が結合しているものと考えたのに対し、コルベは結合という概念を考えず根は単なる原子の集合であると考えていた。すでに1849年にルイ・パスツールによって酒石酸の鏡像異性体の分離がなされ、分子の空間的な形について考察がなされていた。さらに幾何異性体やジアステレオマーが発見されると、それらの相互の関係についての研究が盛んに行なわれた。1874年ヤコブス・ヘンリクス・ファント・ホッフとジョセフ・ル・ベルが独立に炭素の4つの原子価が空間的に正四面体の頂点への方向性を持つという説を提案した。この説は個々の炭素原子の特性に着目するという点で根の実在について否定的であり、また化学結合の存在を前提としており、コルベに受け入れられるものではなかった。そのためコルベは強い批判を加えたが、多くの化学者はファント・ホッフとル・ベルの理論を受け入れていった。こうしてコルベの死後、有機化学において根の説はほぼ完全に放棄されることになったのである。参考文献[編集]日本化学会編 『化学の原典 10 有機化学構造論』 学会出版センター、1976年「http://ja.wikipedia.org/w/index.php?title=根の説&oldid=47257652」から取得 カテゴリ: 化学結合有機化学化学史\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f154"},"body":"Apache Ant出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache Ant開発元Apacheソフトウェア財団最新版1.8.4 / 2012年5月23日（13か月前） （2012-05-23）対応OSクロスプラットフォーム種別ビルドツールライセンスApacheライセンス公式サイトhttp://ant.apache.org/テンプレートを表示Apache Ant（アパッチ アント）は、ビルドツールソフトウェアである。GNU make のJava版ともいえるものであり、オペレーティングシステム (OS) など特定の環境に依存しにくいビルドツールである。XML文書でビルド（ソフトウェア構築）のルールを記述することが特徴である。統合開発環境EclipseにはAntプラグインが標準で内蔵されている。元々 Apache Tomcat をビルドするために開発されたものである。Antはタスクと呼ばれる何種類ものXML要素をビルドファイル (デフォルトではbuild.xml) 上に記述してビルドのルールを作る。このタスクは、Antのプラグインとして提供されているものを外部から採り入れることで、追加することもできる。また、このタスクをAntのアプリケーションプログラミングインタフェース (API) に従ってJavaで記述することにより、自作することもできる。また近年では、Javaのみならず、IKVM.NETプロジェクトおよびMono (ソフトウェア)プロジェクトによりAnt task for IKVMCとして.NET Frameworkでの利用も促進されている。主なAntタスク[編集]javac Javaソースコードをコンパイルする。javadoc JavaソースコードからJavadocドキュメント（Java APIドキュメント）を生成する。java Javaプログラムを実行する。junit テストフレームワークJUnitを使ってJavaプログラムをテストする。junitreport junitタスクで出力した結果ファイルを用いてHTMLフォーマットなどに対応したレポートを生成する。copy ファイルをコピーする。delete ディレクトリやファイルなどを削除する。mkdir ディレクトリを作成する。ftp FTP接続を開始して、ファイルのアップロード、ダウンロードなどを可能にする。scp SCP、SFTP接続を開始して、ファイルのアップロード、ダウンロードなどを可能にする。cvs CVS接続を開始して、CVSリポジトリからのチェックアウト、コミット、アップデートを可能にする。genkey 署名つきJARファイルを作成するために必要な証明書を生成する。signjar JARファイルに署名する。native2ascii Javaソースコードなどに含まれるマルチバイト文字の文字列部分をJDKに付属している変換ツールを使ってASCIIコードに変換する。setproxy ネットワークに接続するタスクを実行する際に、プロキシサーバのアドレスを設定する。tstamp タイムスタンプを更新しAntで使われている変数 DSTAMP、TSTAMP を更新する。zip 指定したディレクトリやファイルをZIP形式で圧縮・アーカイブする。echo コンソール（コマンドライン環境）に文字列を出力する。splash 実行時に指定した時間だけスプラッシュを表示する。画像を指定することもできる。buildnumber ビルドナンバーを更新する。デフォルトでは同じディレクトリにbuild.numerという名前のファイルが自動生成され、そのファイルにビルドナンバーが記録される。ant 別のAntビルドファイルにあるタスクを読み込んで実行する。関連項目[編集]ポータル FLOSSアジャイルソフトウェア開発エクストリーム・プログラミング継続的インテグレーション外部リンク[編集]Apache Ant(英語)Apache Ant(日本語)NAnt - Apache Antの.NET Frameworkへの移植版表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Apache_Ant&oldid=46647945」から取得 カテゴリ: Apacheソフトウェア財団ソフトウェア開発ツールJavaツール\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f156"},"body":"Erlang出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、プログラミング言語のErlangについて記述しています。通信トラフィック量を表す同名の単位については「アーラン」をご覧ください。Erlangパラダイムマルチパラダイム、並行処理指向 (アクターモデル) 、関数型言語登場時期1986年開発者エリクソン最新リリースR15B03型付け動的型付け、強い型付け主な処理系Erlang影響を受けた言語Prolog影響を与えた言語Clojure、ScalaプラットフォームUNIXに似たオペレーティングシステム、Windows、Mac OS Xライセンス修正 Mozilla Public License (修正MPL)Erlang Programming - ウィキブックステンプレートを表示プログラミング言語>>他のプログラミング言語■カテゴリ / ■テンプレートErlang（アーラン）は、コンピュータにおいて汎用的な用途に使うことができる並行処理指向のプログラミング言語および実行環境。目次1 概要2 命名3 関数型言語4 並行処理指向で分散処理指向の言語5 配布6 関連項目7 脚注8 参考文献9 外部リンク概要[編集]Erlangの直列処理のサブセットの言語は、関数型言語であり、先行評価を行い、変数への代入は1回限りであり、動的型付けである。 Erlangはエリクソンにより次の条件のシステムを構築できるよう設計された。分散化された環境障害に耐性をもつ (フォルトトレラント)ある程度のリアルタイム性を備える無停止で稼働するホットスワップが可能であり、稼働中のシステムを停止すること無くErlangのプログラムを変更することができる。 Erlangは、当初はエリクソン社内部だけで使われる非公開の技術であったが、1998年にオープンソースとして公開された。 エリクソンによるErlangの実装は基本的にはインタプリタであるが、HiPEというコンパイラも同社の実装に含まれている。 ただしHiPEはErlangが動作する全てのプラットフォームで使えるわけではない。Erlangにおいては、マルチスレッドの処理の並行性はプログラム開発者（プログラマ）にとって明瞭である。 これに対し、ほとんどのプログラミング言語においては、マルチスレッドは複雑で誤りを犯しがちな分野である。 Erlangで「プロセス」(スレッド) を生成し管理する手法はごく平凡な方法である。命名[編集]Erlangは数学者のアグナー・アーラン（デンマーク語: Agner Krarup Erlang）から名前をとって命名された。 一方で、エリクソン社内で非常によく使われたためEricsson languageにちなんで命名されたと一部の人々は思っている。 当時エリクソンのコンピュータ科学研究所の所長であったビャーネ・デッカーによれば、この名前に関する2重性については意図的なものだとのことである。関数型言語[編集]Erlangのソースコードの例を示す。-module(fact).-export([fac/1]).fac(0) -> 1;fac(N) when N > 0 -> N * fac(N-1).次のソースコードはErlangによるクイックソートのアルゴリズムの実装である。%% quicksort:qsort(List)%% Sort a list of items-module(quicksort).-export([qsort/1]).qsort([]) -> [];qsort([Pivot|Rest]) ->qsort([ X || X <- Rest, X < Pivot]) ++ [Pivot] ++ qsort([ Y || Y <- Rest, Y >= Pivot]).この例では関数qsortの再帰呼び出しを行っている。 再帰呼び出しはソート処理の対象が無くなった時点で終了する。 式[ X || X <- Rest、X < Pivot]は「 XをRestの要素として、XがPivotより小さい全てのXを選択する。」と読むことができる。 このようにErlangではリストを非常に簡単に扱うことができる。 Erlangでは異なる2つのデータ型の値の間であらゆる論理式を評価できるため、式の評価は単純である。 例えば、1 < aはtrueを返す。ただしErlangにおける戻り値（trueあるいはfalse）を返す基礎的なしくみを変更する必要がある場合には、比較関数を使うことができる。 例えば、a < 1がtrueと評価される比較順序により順序付けられたリストが必要な場合などである。次のソースコードではリストをリスト要素の長さを基準にしてソートする。-module(listsort).-export([by_length/1]).by_length(Lists) ->F = fun(A,B) when is_list(A), is_list(B) ->length(A) < length(B)end,qsort(Lists, F).qsort([], _) -> [];qsort([Pivot|Rest], Smaller) ->qsort([ X || X <- Rest, Smaller(X, Pivot)], Smaller)++ [Pivot] ++qsort([ Y || Y <- Rest, not(Smaller(Y, Pivot))], Smaller).並行処理指向で分散処理指向の言語[編集]Erlangの主な特長は、並行処理のサポートである。 並行処理のサポートは、複数の「プロセス」を生成しそれらのプロセス間通信を行う基本的な機能群の簡潔で強力なセットである。 Erlangにおける「プロセス」は、Erlangのアプリケーションソフトウェアを構成する最も主要な要素である。 Erlangの「プロセス」は、OS (オペレーティングシステム) のプロセスともOSのスレッドとも異なる (それらは軽量なスレッドであり、Javaでいう「グリーンスレッド」とある程度似ている) 。 Erlangを学ぶ際はこのことに注意する必要がある。 結果としてErlangの「プロセス」は非常に軽量となっている。 Erlangの「プロセス」は約309ワードのオーバーヘッドである。 かなり多量の「プロセス」を性能を低減すること無く生成することが可能である。 2000万個の「プロセス」を使ってのベンチマークが行われたことがある[1]。これ以降の記述ではErlangにおける「プロセス」を括弧無しで言及する。Erlangにおけるプロセス間の通信は、それらプロセスの間で何も共有することなく非同期のメッセージ転送システムによって、行われる。 Erlangのプロセスは全てそれぞれの「メールボックス」をもつ。 メールボックスには他のプロセスから受信したメッセージが格納される。 その後、メールボックスに格納されたメッセージがメールボックスを所有するプロセスによって処理される。 そのときErlangのプロセスはメッセージを得るために receive という基本操作を行う。 メッセージを得る過程ではパターンマッチングが行われる。 まずメッセージ制御ルーティンが1番目のメッセージに対して各パターンがマッチするかどうか調べる。 2番目以降のメッセージに対しても同様のことを行う。 マッチングは、マッチするメッセージに出会うまで行われる。 メッセージが処理されると、メッセージはメールボックスキューから除去され、プロセスは復帰して続きの処理を行う。 Erlangの構成要素は何であれメッセージとして使うことができる。 Erlangの基本要素である整数 (integer) 、浮動小数点数 (float) 、文字 (character) 、atomも、またタプル、リスト、さらには関数さえも、メッセージとして扱うことができる。ソースコードの例を示す。Pid = spawn(Mod, Func, Args)       % execute function Func as new processPid = spawn(Node, Mod, Func, Args) % execute function Func in remote node NodePid ! a_message      % send message to the process (asynchronously)receive % receive message sent to this processa_message -> do_something;{data, Data_content} -> do_something_else(); % This is a tuple of a type atom and some data{hello, Text} -> io:format(\"Got hello message: ~s\", [Text]);{goodbye, Text} -> io:format(\"Got goodbye message: ~s\", [Text])end.Erlangでは異なるノード (コンピュータ) に分散した複数のプロセスを互いに連携させて動作させるためのサポートも組み込みで備えている (分散処理) 。 プロセスは遠隔のノードに生成することができ、遠隔ノード上のプロセスとのプロセス間通信は透過的である。 すなわち、遠隔ノード上のプロセスとのプロセス間通信は、同じノード上のプロセスとのプロセス間通信と全く同じように行われる。Erlangでの並行処理では、エラー処理の基本的な方法をサポートしている。 あるプロセスが異常をきたすと、プロセスは手際良く終了し、そのプロセスを制御しているプロセス (何らかのアクションをとることができるプロセス) にメッセージを送信する。 このエラー処理の方法により、ソースコードの保守性を高め複雑性を低減することができる。配布[編集]エリクソンはErlangをオープンソースとして、1998年に公開した。 その意図は、特定企業からの独立性を確保することと、Erlangに対する人々の認知を高めることであった。 ライブラリとリアルタイムデータベース (Mnesia) と共に配布される Erlangプログラミング言語の配布形式は、Open Telecom Platform (OTP) と呼ばれている。 エリクソンおよび数社の企業は、Erlang技術に対する商用サポートを提供している。Erlangをオープンソースとして公開する方針を採ってからは、世界中のいくつもの企業によって採用されている。 Nortel Networks、T-Mobile などの企業がErlangを採用している[2]。 ただし2008年現在の時点では、まだ広く普及し主流のプログラミング言語となる段階には至っていない。2008年現在、Erlangは活発に開発が続けられており、定期的に新リリースを公開している。 Erlangは、いくつかのUNIXに似たオペレーティングシステムおよびWindows上で使うことができる。関連項目[編集]並行計算アクターモデルガードConcurrency and Coordination Runtimeejabberd - Erlangを使って開発された XMPP/Jabber インスタントメッセージングサーバYet another web server (YAWS) - Erlangで開発された十分な機能を備え高い性能を発揮するウェブサーバTsung - 高性能なベンチマークツールWings 3D - Erlang で開発された3Dモデラ脚注[編集][ヘルプ]↑ Ulf Wiger (2005年11月14日). “Stress-testing erlang”. comp.lang.functional.misc. 2006年8月25日閲覧。↑ \"Who uses Erlang for product development?\" Erlangに関してよく尋ねられる質問集。この資料によるとErlangを最も大規模に採用している組織はエリクソン社である。エリクソン社は電気通信システムの開発にErlangを使っている。同社ではこれまで何十ものプロジェクトでErlangを採用してきた。とりわけ大規模なものは非常にスケーラブルな AXD301 ATM スイッチのプロジェクトである。Erlangを採用しているエリクソン以外の組織としては、Nortel、Deutsche Flugsicherung（航空管制を担うドイツの政府組織）、T-Mobile などが挙げられている。参考文献[編集]Joe Armstrong (2003). \"Making reliable distributed systems in the presence of hardware errors\". 博士論文 (Ph.D.) 、スウェーデン王立ストックホルム工科大学外部リンク[編集]Erlang - 公式サイトErlang - オープンディレクトリプロジェクト日本の Erlang ユーザのためのハブサイトErlang World - 日本語によるErlangの解説サイト「http://ja.wikipedia.org/w/index.php?title=Erlang&oldid=48425339」から取得 カテゴリ: プログラミング言語関数型言語オープンソース並行計算\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f157"},"body":"半合成出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索半合成（はんごうせい、英: semisynthesis）あるいは部分化学合成（英: partial chemical synthesis）は、天然資源（例えば植物材料、微生物あるいは細胞培養物）から単離された化合物を出発物質として使用する化学合成の一種である。これらの天然生体分子は通常、大きく複雑な分子である。これは、大きな分子を小さく安価なビルディングブロック（大抵の場合石油化学製品）の段階的な組み合わせにより合成する全合成とは反対である。半合成は大抵、前駆体分子が構造的に複雑過ぎる、高価過ぎる、全合成によって生産するのが非効率過ぎる時に使われる。また、半合成誘導体が元々の生体分子を活性、安定性、安全性に関して上回ることも有り得る。天然資源由来の医薬品は大抵、天然資源の採取か半合成的手法によって生産される。一つの例は麦角菌培養液から単離されるエルゴタミンからのLSDの半合成である。パクリタキセルの商業的生産もまた半合成に基づいている（タキソール全合成を参照）。抗マラリア薬であるアルテムエーテル（英語版）（Coartem（英語版）の成分）は天然に存在するアルテミシニンの半合成誘導体である。後者はラクトン基の存在のため不安定であり、ゆえにこのラクトン基���ボロヒドリドによる還元およびメトキシ化によってアセタールに置換されている[1]。脚注[編集]^ Matthias Boehm, Peter C. Fuenfschilling, Matthias Krieger, Ernst Kuesters, and Fritz Struber (2007). “An Improved Manufacturing Process for the Antimalaria Drug Coartem. Part I”. Org. Process Res. Dev. 11 (3): 336-340. doi:10.1021/op0602425. 関連項目[編集]創薬医薬品開発「http://ja.wikipedia.org/w/index.php?title=半合成&oldid=47460955」から取得 カテゴリ: 有機化学化学合成医薬品化学薬学\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f158"},"body":"日本の企業一覧 (パルプ・紙)出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索日本の企業一覧(パルプ・紙)（にほんのきぎょういちらん パルプ・かみ）は、日本のパルプ・紙企業の一覧目次1 販売（代理店＝一次卸）2 販売（卸商＝二次卸）3 製造業3.1 総合製紙業3.2 家庭紙3.3 板紙3.4 専用紙3.5 パルプ専業3.6 特殊紙3.7 紙加工品4 関連団体5 関連項目販売（代理店＝一次卸）[編集]日本紙パルプ商事国際紙パルプ商事（王子製紙系）新生紙パルプ商事丸紅紙パルプ販売三菱製紙販売（三菱製紙グループ）日本紙通商（日本製紙グループ）旭洋紙パルプ（旧・旭洋、現在は王子グループの支援下）カミ商事北越紀州販売（北越紀州製紙グループ）伊藤忠紙パルプオザックス東京紙パルプ交易（大王製紙グループ）シロキ小津産業平和紙業日藤大一洋紙王子通商（2011年10月代理店機能を旭洋紙パルプへ事業譲渡、王子グループ）丸大紙業（2011年10月1日北越紀州販売と合併）田村洋紙店（2011年10月1日北越紀州販売へ事業譲渡）販売（卸商＝二次卸）[編集]竹尾共同紙販ホールディングス製造業[編集]総合製紙業[編集]阿波製紙（東証2・3896）王子ホールディングス（東証1・3861）岡山製紙（JASDAQ・3892）興亜工業大王製紙（東証1・3880）中越パルプ工業（東証1・3877）特種東海製紙（東証1・3708）（旧・特種東海ホールディングス）東海パルプ（東証1・3706）→特種東海製紙特種製紙（東証1・3881）→特種東海製紙巴川製紙所（東証1・3878）日本製紙グループ本社（東証1・3893）日本製紙（東証1・3863）日本製紙パピリア（旧・三島製紙）（東証2・3872）福山製紙北越紀州製紙（旧・北越製紙）（東証1・3865）紀州製紙（東証1・3882）→北越紀州製紙三菱製紙（東証1・3864）家庭紙[編集]王子ネピア大分製紙小野製紙鶴見製紙日清紡ペーパープロダクツ日本製紙クレシア藤枝製紙富士里和製紙丸富製紙道栄紙業トーヨ林製紙板紙[編集]王子板紙→王子マテリア大石産業（福証・3943）大村紙業（JASDAQ・3953）ゼネラル（大証2・3890）ダイナパック（東証2・3947）中央板紙（東証1・3887）→王子板紙中央紙器工業（名証2・3952）トーモク（東証1・3946）トライウォール日本大昭和板紙→日本製紙に合併レンゴー（東証1・3941）専用紙[編集]国際チャート（JASDAQ・3956）ニッポン高度紙工業（JASDAQ・3891）ハビックス（JASDAQ・3895）光ビジネスフォーム（JASDAQ・3948）兵庫製紙丸住製紙パルプ専業[編集]特殊紙[編集]王子特殊紙→王子エフテックスユポ・コーポレーション紙加工品[編集]朝日印刷（東証2・3951）イムラ封筒（東証2・3955）ザ・パック（東証1・3950）昭和パックス（JASDAQ・3954）スーパーバッグ（東証2・3945）古林紙工（大証2・3944）関連団体[編集]日本製紙連合会日本家庭紙工業会関連項目[編集]日本の企業一覧紙製紙業段ボールトイレットペーパー「http://ja.wikipedia.org/w/index.php?title=日本の企業一覧_(パルプ・紙)&oldid=46451961」から取得 カテゴリ: 日本企業の一覧日本のパルプ・紙産業\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f15a"},"body":"MySQL出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索MySQLLinux上で実行中のGUIフロントエンド MySQL Administrator開発元オラクル(サン・マイクロシステムズ)初版1995年05月23日 (1995-05-23)最新版5.6.12- 2013年6月3日（41日前） （2013-06-03）[1][±]最新評価版5.7.1 m11- 2013年4月23日（2か月前） （2013-04-23）[±]プログラミング言語C, C++対応OSクロスプラットフォーム種別RDBMSライセンスGPL または Commercial License公式サイトwww-jp.mysql.comdev.mysql.comテンプレートを表示MySQL（マイエスキューエル）は、オラクルが開発するRDBMS（リレーショナルデータベースを管理、運用するためのシステム）の実装の一つである。目次1 概要2 シェア3 ストレージエンジン4 トランザクション5 その他の機能6 ライセンス7 歴史8 利用状況9 プラットフォーム10 開発言語11 日本語処理12 MySQLの管理ツール13 脚注14 関連項目15 リンク概要[編集]オープンソースで開発されており、GNU GPLと商用ライセンスのデュアルライセンスとなっている。他の多くのオープンソースプロジェクトと異なり、スウェーデンの単一の営利企業「MySQL AB」によって保持されていた。2008年2月26日にMySQL ABがサン・マイクロシステムズに買収されたことによってサン・マイクロシステムズの所有となった。またトレードマークおよび著作権もサン・マイクロシステムズが所有していた。2010年1月27日、サン・マイクロシステムズはオラクルに買収された。シェア[編集]世界でもっとも普及しているオープンソース・データベースとして知られており[2]、市場シェアではPostgreSQLなどの他のオープンソース・データベースを圧倒している[3]。日本でも2009年になってPostgreSQLを超えるシェアを獲得している[4]。初期のMySQLで文字コードのサポートが悪かったのが影響したが、現在はEUC、SJIS、多言語面を含むUTF-8などをサポートしている。利用企業数の割合地域MySQLPostgreSQL調査機関世界82.1%27.1%451 Group (2009年)[5]日本60.5%51.9%IPA (2009年)[4]ストレージエンジン[編集]データの保存とアクセスを行うストレージエンジンがSQLパーサとは分離独立しており、用途に応じたストレージエンジンを選択できる「マルチストレージエンジン」方式を採用している。バージョン3.23.34以降で組み込まれているInnoDBストレージエンジンは、オープンソースソフトウェア企業のInnobase社が開発したストレージエンジンであり、高い堅牢性とMVCCによる高い並列性を兼ね備えており、あらゆるアプリケーションに対応出来る人気のストレージエンジンとなっている。InnoDBはメディア障害時の更新ログによるリカバリもサポートしている。また、InnoDB登場以前から搭載されているMyISAMストレージエンジンも検索が高速であり、更新よりも参照の頻度の高いWebアプリケーションなどで活用されている。全文検索が利用できるのも、MyISAMの利点である。以前はMyISAMの方が高速であると言われることが多かったが、InnoDBの性能改善が進んだことから、高速性を求めるためにMyISAMを利用するということも減ってきている。トランザクション[編集]MySQLでは、トランザクション管理はストレージエンジンの役割であり、トランザクションを利用したければ対応したストレージエンジンを使用すればよい。InnoDBは、ACIDに準拠したトランザクションをサポートしている。一方MyISAMでは、トランザクションをサポートしていない。トランザクションが必要でないシーンは徐々に減ってきているので、最近MyISAMの出番も減りつつあるようである。その他の機能[編集]副次問い合わせ（サブクエリ）は、バージョン4.1以降でサポートされている。バージョン5.0以降では、SQL99にストアドプロシージャ、ビュー、トリガーが実装され、機能の面でも他のRDBMSに追いつきつつある。その他、標準でマスタスレーブ方式のレプリケーション機能を備えており、堅牢なデータストレージの構築が比較的容易である。ライセンス[編集]MySQLは GPL とコマーシャルライセンスのデュアルライセンス方式で提供されている[6]。基本的に、MySQLのサーバ本体とクライアントライブラリはGPLで提供される。このため、MySQLを改造し、それを再頒布する場合は、GPLに従う必要がある。また、GPLのクライアントライブラリを利用してMySQLに接続するアプリケーションを開発した場合、そのアプリケーションもGPLライセンスとしなければならない可能性がある。ただし、クライアントライブラリに関しては、アプリケーションが既定のオープンソースライセンスで公開されるのであれば、GPL以外のオープンソースライセンスで再頒布することも可能である[7]。サポートやツールが提供される有料サブスクリプションのMySQL Standard Edition, Enterprise Editionでは、コマーシャルライセンス版のバイナリが提供される。[8]。コマーシャルライセンス版では、GPLによる制約は受けない。歴史[編集]1995年5月23日 - 内部的に MySQL の最初のバージョンがリリース。1998年1月8日 - 最初の Windows 版がリリース。Windows 95 や NT 向け。2001年1月 - Version 3.23 プロダクションリリース。ベータ版は2000年6月にリリース。2003年3月 - Version 4.0 プロダクションリリース。ベータ版は2002年8月にリリース。union搭載。2004年10月 - Version 4.1 プロダクションリリース。ベータ版は2004年6月にリリース。R木、B木、サブクエリー、prepared statements搭載。2005年10月 - Version 5.0 プロダクションリリース。ベータ版は2005年3月にリリース。cursors, stored procedures, triggers, views, XA transactions搭載。2008年2月6日 - サンマイクロシステムズがMySQL ABを買収。2008年7月1日 - サン・マイクロシステムズ株式会社がMySQL株式会社（MySQLの日本法人）を吸収合併。2008年11月 - Version 5.1 プロダクションリリース。ベータ版は2005年11月にリリース。event scheduler, partitioning, plugin API, row-based replication, server log tables搭載。2010年6月1日 - 日本オラクル株式会社がサン・マイクロシステムズ株式会社を統合。2010年12月15日 - Version 5.5 プロダクションリリース(5.5.8よりGA)。デフォルトのストレージエンジンが InnoDB になり、マルチコアCPUでのパフォーマンスが改善した[9]。ベータ版(Version 5.4)は2009年4月にリリース。2013年2月5日 - Version 5.6 プロダクションリリース。InnoDB、NoSQLの機能を強化[10][11]。利用状況[編集]世界的にはこのMySQLの方が、ライバルであるFirebirdやPostgreSQLよりも多く使用されており、ウェブサイトの構築に用いるソフトウェア環境として、LAMP (Linux, Apache, MySQL, Perl・PHP・Python) の略称が知られている。Yahoo!、Facebook、Twitterなどの巨大なウェブサイトでの適用例も多く、WebアプリケーションのXOOPS、WordPress、SugarCRMなどもバックエンドのデータベースとしてMySQLを利用している。また、ウィキペディアのためのソフトウェアであるMediaWikiでもこのソフトウェアを使用している。他にも、社内用WebアプリケーションのサイボウズもMySQLを利用しており、MySQLを改造するため、有償契約をしている。世界的な傾向に反し、以前日本ではPostgreSQLの適用例がMySQLを上回っていた。2003年の時点で、オープンソース系のデータベースとして、日本では8割以上がPostgreSQLだった。その理由として、以下の理由が指摘されている。欧米において、MySQLの広報が積極的だった。MySQLの日本ユーザ会の立ち上げが遅れた。日本でのPHPのバイブル本である「PHP徹底攻略」と「PHP4徹底攻略」がPostgreSQLとの接続を想定して記述されていた。PostgreSQLの開発に日本人であるSRAの石井達夫が関わっていた。彼は上記二冊の執筆も一部担当している。Javaを開発するSun Microsystemsが、MySQLよりもPostgreSQLを推していた。ただしSun MicrosystemsがMySQLを買収したことにより、今後はMySQLをより重視していく可能性が高い。かつてのMySQLでUnicodeのサポートが不十分だった。アプリケーションの頒布形態によってはGPLではなく商用ライセンスを選択しなければならないケースがある。だが、そのような状況は徐々に変遷し、2009年の段階ではMySQLのほうがPostgreSQLよりも多く利用されているという報告がある。[12][13]プラットフォーム[編集]MySQL 5.5は次のプラットフォームでサポートされている。[14]Solaris 10 以降(SPARC (64 bit), x86_64, x86)FreeBSD 7 以降LinuxMac OS X 10.5 以降Microsoft Windows XP 以降MySQL 5.0は以下のプラットフォームでサポートされている。AIXHP-UXSolaris 8 以降SCO OpenServerSCO UnixWareTru64 UNIXBSD/OSFreeBSDNetBSDOpenBSDLinuxMac OS X 10.3 以降Microsoft Windows 2000 以降開発言語[編集]C, C++, Eiffel, Smalltalk, Java(JNI), Lisp, Perl, PHP, Python, Ruby, TclはMySQLのAPIを介してデータベースにアクセスできる。またODBCインターフェース (MyODBC) もサポートされている。MySQL自体はCおよびC++で開発されている。埋め込みSQLによる開発はサポートされていないため、オープンソースプロジェクトのOpen ESQL等が利用される[15]。日本語処理[編集]MySQL5は、sjis (Shift_JIS)、cp932（Microsoftコードページ932）、utf8（UTF-8（3バイトまで））、utf8mb4（UTF-8（4バイトまで/MySQL5.5以降でサポート））、ujis (EUC-JP) といった文字セットを指定することで、日本語の文字を含む入出力を正しく扱うことができる。sjisは、JIS X 0201およびJIS X 0208に準じたものであるが、同じ「Shift_JIS」でも、Windows環境で使用される文字の一部を正しく扱えない場合がある。これは、Windowsでは、前記の規格以外の拡張文字を含む、拡張されたShift_JISを使用しているためである。これらの文字をMySQLで正しく扱うには、sjisではなくcp932を指定する。たとえば、Microsoft AccessからUTF-8で格納するテーブルにODBCリンク経由でアクセスする場合は、MyODBCの文字セット設定をcp932にしておけば、正しく入出力できる。cp932がMySQLでサポートされたのは4.1.12からであり、それまでは、「sjisで格納し、sjisで入出力」するという設定を行い、入出力時の文字コード変換を避けることで、Windowsの拡張シフトJISで問題が起きないようにする、というのが、日本国内における「常識」であった。cp932のサポートの前にはすでにUnicodeがサポートされていたが、それらを積極的に使用する人はあまりいなかった。なぜなら、Unicodeで格納するテーブルに対してsjisで入出力を行うと、Windows環境において拡張文字が適切に変換されず文字化けが発生するため、それが「Unicode対応が不完全」「Unicodeはまだ使いものにならない」という評価を生む一因となっていたからである。Ruby on Rails、CakePHPのデフォルトはutf8だが、データベース接続設定でencodingをutf8と明示的に使用宣言しておく必要がある。MySQLの管理ツール[編集]MySQL Workbench(5.2以降)phpMyAdminphpMyBackupProNavicat for MySQLMySQL AdministratorDatabase MasterSequel ProAdminer脚注[編集][ヘルプ]^ “D.1. Changes in Release 5.6.x (Production)” (英語). MySQL 5.6 Release Notes.  MySQL.com (2013年6月3日). 2013年6月3日閲覧。^ http://db-engines.com/en/ranking^ http://www-jp.mysql.com/why-mysql/marketshare/^ a b http://www.ipa.go.jp/software/open/ossc/seika_1004.html^ 451 Group survey highlights user concerns over Oracle’s proposed ownership of MySQL^ MySQLのライセンスポリシー^ FOSS License Exception^ MySQL Editions^ 1.5. What Is New in MySQL 5.5^ Oracle>About>Press Room>Oracle Announces General Availability of MySQL 5.6^ Oracle Japan>Media centre home>ニュースリリース>MySQL5.6の一般提供開始を発表^ http://ossipedia.ipa.go.jp/doc/201^ http://www.itmedia.co.jp/enterprise/articles/1005/12/news011.html^ http://www-jp.mysql.com/support/supportedplatforms/database.html^ Open ESQL関連項目[編集]ポータル FLOSSMySQL Cluster (en:MySQL Cluster)MySQL Workbench (en:MySQL Workbench)ストレージエンジンMyISAM (en:MyISAM)InnoDBAria(以前の名称はMaria)MySQL Archive (en:MySQL Archive)MySQL Federated (en:MySQL Federated)アプリケーションとパッケージMediaWiki - MySQLをバックエンドに用いることが可能である。XAMPPMySQLからフォークしたプロジェクトMariaDBDrizzle (en:Drizzle)リンク[編集]ウィキメディア・コモンズには、MySQLに関連するカテゴリがあります。MySQL.com日本MySQLユーザ会MySQL リファレンスマニュアルPlanet MySQL 日本語版（ブログ集約サイト）MySQL developmentMySQL WeblogsMySQL Performance BlogFree MySQL 5 providerMarkus Popp's blogAndrew Gilfrin's blogRoland Bouman's blogBeat Vontobel's blogGiuseppe Maxia's blogJay Pipe's blogMike Kruckenberg's blogSheeri Kritzer's blogMySQL Database Administration Blogライセンスに関する FAQどのようにデータベースのMySQL Workbenchを使用して作成する - このチュートリアルではデータベースのMySQL Workbenchを使用して作成する方法について説明.表・話・編・歴サン・マイクロシステムズソフトウェアSolaris - OpenSolaris - SunOS - Java - JDS - JES - StarOffice（日本ではStarSuite）/OpenOffice.org - NIS/NIS+ - Sun ONE - NFS - ZFS - DTrace - Sun Grid Engine - MySQL - VirtualBox - Sun Java Directory Server - Sun Java System Web Server/Open Web Server - GlassFishハードウェアSun-1 - Sun-2 - Sun-3 - Sun386i - Sun-4 - SPARCstation - Sun Ultra series - Sun Enterprise - Sun Blade - Sun Fire - UltraSPARC T1 - SPARC - JavaStation - Sun Ray - Sun Modular Datacenter - Sun SPOT - SPARC Enterprise教育・研究Fortress - SCP - Sun COE関連人物ジョナサン・シュワルツ - アンディ・ベクトルシャイム - スコット・マクネリ - ビル・ジョイ - ビノッド・コースラ - ジェームズ・ゴスリン「http://ja.wikipedia.org/w/index.php?title=MySQL&oldid=48316025」から取得 カテゴリ: MySQLデータベース管理システムオープンソースサン・マイクロシステムズオラクル\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f159"},"body":"Firebird出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、リレーショナルデータベース管理システムについて記述しています。その他の用法については「ファイヤーバード」をご覧ください。Firebird最新版2.5.2 / 2012年11月07日対応OSWin32, Win64, Linux x86, Linux AMD64, MacOS X, Solaris, HP-UX種別RDBMSライセンスIPL, IDPL公式サイトhttp://www.firebirdsql.org/テンプレートを表示Firebird（ファイアバード）は、InterBaseから派生したオープンソースのリレーショナルデータベース管理システム。オープンソースで開発されており、Mozilla Public Licenseを元にしたInterBase Public License（商用・非商用問わず利用できるが、オリジナル〈ここではFirebirdを指す〉のソースコードを改変したプログラムを利用する場合は、その変更箇所のコードを公開しなくてはならない）によってライセンスされている。目次1 特徴2 インストール3 歴史4 管理ツール5 受賞6 外部リンク7 脚注特徴[編集]PostgreSQLのMVCC（多版同時実行制御）と同様のMGA（マルチ・ジェネレーション・アーキテクチャー）による高度なトランザクション管理機能を有する。ストアドプロシージャや、トリガー、UDF（ユーザー定義関数）等の商用データベースに通常備わっている機能を網羅している。ただしオブジェクトの命名則が厳しい、プライマリキーのAUTO INCREMENTが用意されていないなど、やや旧式な仕様もある。なおPHPなどアプリケーションからの接続には、InterBase対応の関数・ライブラリを流用できる。2007年6月に開催された「オープンソースカンファレンス2007.DB」で行われた公開ベンチマークテストでは高評価を得て、PostgreSQL、MySQLに続く第3のオープンソースリレーショナルデータベース管理システムとして注目されているが、解説書籍の出版が少ない、レンタルサーバではサポートされていないなど日本国内での認知度はまだまだ低い。特筆すべき機能として、有償ではあるが米IBフェニックス社の「IBPレプリケータ」を導入し、GUI上から設定することにより、IPネットワークで接続された複数のFirebird同士で同期処理を行なうことが可能となる。これはトリガーの機能を応用したもので、更新された箇所を同期処理用のテーブルに蓄積し、蓄積内容を設定された別のFirebirdに対し定期的に送信すると言うものである。この他にも、Firebirdのレプリケーションソフトは多数存在する。また、RDBMS側からクライアントへのコールバックを実現する、イベントアラータはFirebirdの初期開発者であるJim Starkeyの発案によるものである。インストール[編集]Windows版には専用のインストーラが用意されている。Linux版もダウンロードパッケージに含まれる「install.sh」を実行すれば自動的に「/opt」以下にインストールされる。ただしisqlコマンドを使う場合、実行環境（Fedoraなど）によっては同名の全く別のプログラムが起動してしまうので、「isql2」など重複しない別名のシンボリックリンクを作成しておく必要がある。歴史[編集]2000年6月25日、Borland 社から InterBase 6.0 のソースコードが公開され[1][2]、それから1週間のうちにSourceForge に Firebird プロジェクトが登録された[3][4]。2002年3月11日、Firebird 1.0 が Linux, Windows, Mac OS X 向けにリリースされた[5]。それから2ヵ月後には、Solaris, FreeBSD 4, HP-UX へも移植された[6]。Mozilla Foundationの新ブラウザが登場した際、一時期 \"Mozilla Firebird\" の名称を使用したため多少の混乱があったが、2004年2月10日にmozilla.orgがブラウザの名称をMozilla Firefoxに変更したことで決着した。[1]2004年2月23日、Firebird 1.5 がリリースされた[7]。 ポーティングのため2000年よりソースコードをC言語からC++へ変更する開発が行われてきたが、このリリースは初めて C++ コードベースを使った安定版である。 クエリ最適化の改良、SQL92準拠の式、SQL:1999 準拠の SAVEPOINT、明示的なロックが追加された[8]。2006年11月12日、Firebird 2.0 がリリースされた[9]。 64ビットアーキテクチャのサポート、FROM句での入れ子テーブル、ロック時のタイムアウトでの式の利用が追加された[10]。 さらに、バージョン 2.1 にて、データベーストリガ、再帰クエリ、SQL:2003準拠の MERGE 文が追加された[11]。2010年10月4日、Firebird 2.5 がリリースされた[12]。 これまでスレッドモデルで実装された Super Server と、プロセスモデルで実装された Classic Server の二つのサーバーモデルを並行して開発してきたが、バージョン 2.5 では新たに Super Classic と称するサーバーモデルが追加される。Super Classic 版では、Super Server版のボトルネックとなっていた統合型キャッシュを見直し、スレッド毎にキャッシュバッファを実装することで、これまで弱点とされてきたSMPへの対応を強化し、スケーラビリティが向上する予定である。 その他に、正規表現や外部データベースへの接続が追加された。[13]管理ツール[編集]FlameRobinDatabase MasteribWebAdmin受賞[編集]2009. SourceForge Community Choice Award: Best Project for enterprise. Finalist on Best Project and Best Project for Government.2007. SourceForge Community Choice Award: Best Project for enterprise, Best user support.外部リンク[編集]FirebirdプロジェクトホームFirebird日本ユーザー会FirebirdSQL Foundation有志によるFirebird SQLリファレンス [リンク切れ]FIREBIRD WIKI脚注[編集]^ “Inprise/Borland Introduces InterBase 6.0 Now Free and Open Source on Linux, Windows, and Solaris”. (2000年7月16日).  オリジナルの2004年12月6日時点によるアーカイブ。. http://web.archive.org/web/20041206174134/www.borland.com/news/press_releases/2000/07_16_00_ib6.html 2009年1月29日閲覧。 ^ “Borland.com: Inprise/Borland Introduces Interbase 6.0 Now Free and Open Source on Linux”.  Linux Today. 2009年1月29日閲覧。^ “Firebird History”. 2009年1月31日閲覧。^ Paul Reeves. “What's happening to InterBase”.  Borland User Group、2頁. 2009年1月29日閲覧。^ “IBPhoenix Community News Archive” (2000年3月11日). 2009年1月29日閲覧。^ “IBPhoenix Community News Archive” (2000年4月11日). 2009年1月29日閲覧。^ “Firebird Relational Database 1.5 Final Out”. Slashdot. (2004年2月23日). http://developers.slashdot.org/article.pl?sid=04/02/23/201230 2009年1月31日閲覧。 ^ Helen Borrie (2007年11月30日). “Firebird 1.5.5 Release Notes”.  Firebird Project. 2009年1月31日閲覧。^ Dmitry Yemanov. “Firebird 2.0 Final Release Launches in Prague”. 2009年2月5日閲覧。^ Helen Borrie (2009年1月22日). “Firebird 2.0.5 Release Notes”. 2009年2月5日閲覧。^ Helen Borrie (2008年7月15日). “Firebird 2.1 Release Notes”. 2009年2月7日閲覧。^ Alexey Kovyazin. “Firebird 2.5 Introduces New Audit Features and Improved Scalability”. 2010年10月6日閲覧。^ Helen Borrie (2008年7月2日). “Firebird 2.5 Release Notes”. 2009年2月9日閲覧。「http://ja.wikipedia.org/w/index.php?title=Firebird&oldid=48283915」から取得 カテゴリ: データベース管理システムオープンソース隠しカテゴリ: 外部リンクがリンク切れになっている記事/2011年10月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f15c"},"body":"Hadoop出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この「Hadoop」はFLOSSに関連した書きかけ項目です。この記事を加筆して下さる協力者を求めています（Portal:FLOSS）。Apache Hadoop開発元Apacheソフトウェア財団最新版1.2.0 / 2013年5月13日（2か月前） （2013-05-13）[1]最新評価版2.0.5-alpha / 2013年6月6日（38日前） （2013-06-06）}[1]プログラミング言語Java対応OSクロスプラットフォームサポート状況Active種別分散ファイルシステムライセンスApache License 2.0公式サイトhttp://hadoop.apache.org/テンプレートを表示Apache Hadoopは大規模データの分散処理を支えるJavaソフトウェアフレームワークであり、フリーソフトウェアとして配布されている。[2]Hadoopはアプリケーションが数千ノードおよびペタバイト級のデータを処理することを可能としている。HadoopはGoogleのMapReduceおよびGoogle File System(GFS)論文に触発されたものである。HadoopはApacheのトップレベルプロジェクトの1つであり、世界規模の開発貢献者コミュニティによって開発され、使用されている。[3]目次1 アーキテクチャ1.1 Hadoop分散ファイルシステム1.2 ジョブトラッカーとタスクトラッカー: MapReduceエンジン1.3 他のアプリケーション2 主要なユーザ2.1 Yahoo!におけるHadoop2.2 他のユーザ3 Amazon EC2/S3サービスにおけるHadoop4 Sun Grid EngineにおけるHadoop5 参考文献6 脚注7 関連事項8 外部リンクアーキテクチャ[編集]Hadoopは、Hadoop がサポートするファイルシステムへのアクセスを提供するHadoop Commonで構成する。ここで、「Rack Awareness」とは、サーバクラスタの地理的位置を考慮した最適化の考えである。つまり、異なる地理的位置にあるサーバ間の網伝送(network traffic)を最小にするということである。[4] 2008年6月現在、下記のファイルシステムをサポートしている。HDFS: Hadoop独自のファイルシステムである。HDFSは各OSが提供するファイルシステム上で動作し、 数ペタバイトの容量まで拡張するよう設計している。Amazon S3: このファイルシステムは、Amazon Elastic Compute Cloud (EC2) 環境で構築したクラスタ上で動作する。なお、このAmazon S3 ファイルシステムはRack-awarenessが考慮されておらず、すべてリモートサイトで動作する。CloudStore（旧 Kosmos Distributed File System）: HDFSのようなRack-Awarenessなファイルシステム。FTP: すべてのデータをFTPによりアクセス可能なリモートサーバに格納する。Read-only HTTP and HTTPS.Hadoop分散ファイルシステム[編集]Hadoop分散ファイルシステム(HDFS)は大きなファイル（理想的には64MBの倍数[5]）を複数の計算機にまたがり格納することができる。HDFS はデータの複製を複数のホストに格納することで信頼性を確保しているため、各ホストはRAIDを必要としない。デフォルトのレプリケーション数3のとき、データは3つのノードに保存する。この場合、2つのデータを同じラック内のノードに、残りひとつを異なるラックに保存する。HDFSはデータノード (Data node) のクラスタにより構成する。データノードはそれぞれ、HDFS独自のブロック転送プロトコルによりデータブロックを転送する。データノードはまたHTTPによりデータを提供することができ、WEBブラウザ等のクライアントからのアクセスを処理できる。データノード間はお互いに通信し、データ再配置、データコピー、冗長性維持を行うことができる。HDFSはネームノード (Name node) と呼ばれる唯一の特殊なノードを必要とする。ネームノードは、HDFSにおけるsingle point of failureである。ネームノードがダウンした場合、ファイルシステムはオフラインとなる。その後ネームノードが復旧した際には、ネームノードは未実行のすべてのオペレーションをリプレイする必要がある。このリプレイ処理は、クラスタの規模が大きい場合、時に30分以上を要する場合もある。[6] 一方、HDFSはセカンダリ・ネームノードと呼ばれる機能を有している。この名前は、プライマリ・ネームノードがオフラインとなった時セカンダリ・ネームノードが代替するかのように誤解を与える。しかしながら実際は、セカンダリ・ネームノードは定期的にプライマリノードに接続し、その保存されているディレクトリ情報のスナップショットをダウンロードする。セカンダリ・ネームノードはプライマリ・ネームノードの編集ログを用い、最新のディレクトリ構造を作成する。HDFSは、通常のオペレーティングシステムにマウントできないことはまた制限のひとつである。ジョブ実行の前後にはしばしばHDFSとデータの入出力が必要になるが、マウントできないため不便である。LinuxなどいくつかのUNIXシステムでは、Filesystem in Userspaceによりこの問題を解決しているものもある。データの複製を3回行うことは高コストである。コスト軽減のため、HDFSの最近のバージョンではErasure符号をサポートし、同じファイルの複数のブロックを結合しパリティブロックを生成している。HDFSではこのパリティブロックを非同期で生成することにより、複製生成数を3から2に減らしている。これにより、必要とされる物理ストレージ領域が3倍から約2.2倍に減少しているとの報告がある。ジョブトラッカーとタスクトラッカー: MapReduceエンジン[編集]ファイルシステムの上にMapReduceエンジンが動作する。MapReduceエンジンはひとつのジョブトラッカーを持ち、クライアントアプリケーションはこのジョブトラッカーに向けてMapReduceジョブを投入する。ジョブが投入されると、ジョブトラッカーはクラスタ中の利用可能なタスクトラッカーに仕事を依頼する。この時、できるだけデータに近くで仕事が行われるように努力を払う。Rack awareなファイルシステムにより、ジョブトラッカーはどのノードがデータを保持しているか、そしてどのマシンが近くにあるかを知ることができる。これによりメイン・バックボーン・ネットワークの通信トラフィックを抑える。タスクトラッカーが落ちるかタイムアウトすると、その部分のタスクは再スケジュールされる。ジョブトラッカーが落ちると、実行中の仕事は失われる。Hadoopバージョン0.21にはチェックポイントの機能が加えられた。ジョブトラッカーはそれまでの結果をファイルシステムに記録する。ジョブトラッカーが起動した時には、そのように記録されたデータを探す。このため中断したところから仕事を再開することができる。それ以前のバージョンのHadoopでは、ジョブトラッカーが再開した時にはすべての実行中の仕事は失われる。このアプローチには以下の欠点が知られている。仕事のタスクトラッカーへの割り当てはとても単純である。各タスクトラッカーはある数の利用可能なスロットを持つ(例えば4スロット)。アクティブなMapまたはReduceタスク1つはスロットを1つ使用する。ジョブトラッカーはデータに最も近い利用可能なスロットを持つタスクトラッカーに仕事を割り当てる。このとき割り当てたマシンの実際の負荷を考慮しないので、実際には利用できないかもしれない。あるタスクトラッカーがとても遅い場合、特にジョブの終りでは他のすべてが1つの遅いタスクの待ちに入り、全体のMapReduceジョブの完了が遅れてしまう。しかし、投機的実行を用いると1つのタスクを複数のスレーブ・ノードで実行することができる。他のアプリケーション[編集]主要なユーザ[編集]Yahoo!におけるHadoop[編集]他のユーザ[編集]Yahoo! 以外にも様々な組織がHadoopを使って大規模分散システムを構築している。以下に例を挙げる:[7][8]A9.comFacebookFox Interactive MediaIBMImageShackISIJoostLast.fmPowersetニューヨーク・タイムズRackspaceスカイアーチネットワークスVeohMetaweb楽天Amazon EC2/S3サービスにおけるHadoop[編集]Sun Grid EngineにおけるHadoop[編集]HadoopにおけるSun Grid Engine ― および於分散コンピューティング/コンピュータ・クラスター環境におけるジョブ管理システム。[9]参考文献[編集]日経BP出版局著 「クラウド大全 サービス詳細から基盤技術まで」2009年 ISBN10 4822283887脚注[編集]^ a b “Hadoop Releases”.  Hadoop.apache.org. 2013年6月16日閲覧。^ Hadoop Overview^ Hadoop Users List^ http://hadoop.apache.org/core/docs/r0.17.2/hdfs_user_guide.html#Rack+Awareness^ The Hadoop Distributed File System: Architecture and Design^ Improve Namenode startup performance. \"Default scenario for 20 million files with the max Java heap size set to 14GB : 40 minutes. Tuning various Java options such as young size, parallel garbage collection, initial Java heap size : 14 minutes\"^ PoweredBy^ Apache HadoopやApache CassandraなどをはじめとするOSS（オープンソースソフトウエア）を活用^ HDFS-Aware Scheduling With Grid Engine関連事項[編集]NutchHBaseAster Data Systemsクラウド・コンピューティング外部リンク[編集]Hadoop公式サイト日本語訳(あしたのオープンソース研究所)Database Landscape Map – December 2012表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Hadoop&oldid=48182025」から取得 カテゴリ: JavaオープンソースApacheソフトウェア財団クラウドコンピューティング隠しカテゴリ: FLOSS関連のスタブ項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f15b"},"body":"R言語出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Rパラダイムマルチパラダイム 関数型 オブジェクト指向 命令型登場時期1996年設計者Ross Ihaka ・ Robert Gentleman開発者R Development Core Team最新リリース3.0.1 / 2013年5月16日（61日前） （2013-05-16）型付け動的型付け主な処理系GNU R影響を受けた言語S言語 SchemeプラットフォームクロスプラットフォームライセンスGNU GPLウェブサイトThe R Project for Statistical Computingテンプレートを表示R言語(あーるげんご)は、オープンソースであり、フリーソフトウェアの統計解析向けのプログラミング言語及びその開発実行環境である。R言語はニュージーランドのオークランド大学のRoss IhakaとRobert Gentlemanにより作られた。現在ではR Development Core Team(S言語開発者であるJohn M. Chambersも参画している[1]。)によりメンテナンスと拡張がなされている。なお、R言語の仕様を実装した処理系の呼称名はプロジェクトを支援するフリーソフトウェア財団によれば『GNU R』である[2]が、他の実装形態が存在しないために日本語での慣用的呼称に倣って、当記事では、仕様・実装を纏めて適宜にR言語や単にR等と呼ぶ。目次1 特徴1.1 ベクトル処理言語1.2 統計に適した解析環境1.3 高速な組込み関数群1.4 視覚化に優れたグラフ機能1.5 データ互換性1.6 ユーザープログラムを配信・利用できるCRANネットワーク機能1.7 教育現場から実務・研究現場へ永続的に利用可能2 言語仕様2.1 制御構造・サブルーチン2.2 オブジェクト指向2.3 データ型2.3.1 ベクトルとリスト2.3.2 データフレーム3 機能3.1 データ入出力3.2 データのプロット3.3 ワークスペースの保存4 その他4.1 日本語対応4.2 プログラムの入手4.3 パッケージ4.4 CUIとGUI4.5 処理速度4.6 持続可能な統計環境4.7 最近の展開5 脚注6 関連項目7 外部リンク特徴[編集]R言語は文法的には、統計解析部分はAT&Tベル研究所が開発したS言語を参考としており、またデータ処理部分はSchemeの影響を受けている。(S言語は1998年にACMのソフトウェアシステム賞を獲得した。)ベクトル処理言語[編集]R言語は「ベクトル処理」と呼ばれる実行機構により、柔軟な処理を簡便な記法で実現する。R言語で言う「ベクトル」とは数学的用語のベクトルとはやや異なり「構造を持ったデータ集合」という「リスト」に近い意味を持つ。数学的ベクトル・行列のみならず、配列・リスト・テーブル(データフレーム)・集合・時系列などといった複雑な構造を持ったデータも宣言無く変数に納められる。ベクトルは複数の要素を持ち得るが、例えば、リストの要素が更にテーブルや時系列の配列などであるといった「入れ子構造」であってよい。このおかげで複雑なデータ構造が他愛もなく構築・管理できる。予約語としてRに組込まれた演算も関数もベクトルを扱える。ユーザー定義関数をベクトル対応にするための関数もある。ベクトル処理に拠って演算も関数も特別な制御を要さずベクトルの全要素に作用するため、プログラム全体の制御構造が単純化して意味が明瞭になるという効用が期待できる。上手く使えば、通常他の言語で複数要素を処理する時の「目的とする計算の本質とかけ離れたアルゴリズム(例えば、カウンターを使ったループや条件分岐等)」から解放され得る場合も多い。例として、『円周率をモンテカルロ法で近似する計算』を挙げる。(簡約のために、第一象限のみ計算して4倍する。)s<-100000x<-runif(s)y<-runif(s)sum(x^2+y^2<=1)*4/s『 <- 』は代入(この場合『 = 』とも書けるが推奨はされていない)、『 runif(a) 』は一様乱数を a 個作りベクトルで返す関数、『 a^2 』は a の二乗、『 sum(a<=b) 』は関係式 a<=b が真であるようなベクトル要素の個数、を意味する。ここで、ごく普通の数式によって、条件分け計算を複数回行なう指示が暗黙のうちになされることに注目されたい。プログラム全体を読めば 「[[標本 (統計学)|サンプル]]数十万個として、一様乱数で xy のサンプルをつくり、半径1の円弧内に入ったサンプルだけを数える」という計算の本質を反映した記述ができることが見て取れる。そして、このままRに入力すれば計算が実行できる。代入『 <- 』は「付値」と呼ばれる関数でもあり、以下のように一行に書き換えても意味は同じ。sum(runif(s<-100000)^2+runif(s)^2<=1)*4/sまた、付値記号に矢印を用いると代入の向きを左右に使い分けられる。ベクトルは「論理添字(元のベクトルと要素数が等しい論理値ベクトルを用いた添字指定)」で要素の絞り込みができ、その結果をそのまま付値対象として利用できる。以下はFizzBuzz問題の解答例である。1:100 ->n ->Ans   #       1から100までの整数ベクトル生成させる(n:加工前の数列・Ans:加工後の結果用数列)Ans[n %% 3==0 ->FizzSet]<-\"Fizz\"   #       3の倍数FizzSet相当のAns要素を文字列Fizzに置き換えるAns[n %% 5==0 ->BuzzSet]<-\"Buzz\"   #       5の倍数BuzzSet相当のAns要素を文字列Buzzに置き換えるAns[FizzSet & BuzzSet]<-\"FizzBuzz\"     #       両者の共通集合相当のAns要素を文字列FizzBizzに置き換えるprint(noquote(Ans)) #       引用符を除いて出力させるイテレーターとしての for をはじめ各種制御命令も充実しているので、ベクトル記述とは適材適所に使い分けられる。統計に適した解析環境[編集]最小限の労力で見通しよく解析するために工夫された命令体系を備えている。ベクトル、配列、行列、データフレーム(テーブルに相当)、リスト、時系列、などの動的型付けデータ型。(後出「データ型」参照)高階関数(データとして関数を操作する関数)をベクトル処理として記述できる『モデル式』の導入により、複雑な統計モデル記述と曲線あてはめ等のモデルフィット指示を簡潔で統一的に表現できる無限大・非数・欠損値定数集合計算や複素数計算の実装しているd(確率密度)・p(累積確率)・q(分位点)・r(乱数生成)の4機能と分布名を組合せる命名規則を持つ多次元確率分布機能関数[3]sample関数による数値・複素数・文字列などの[[標本 (統計学)|標本]]抽出(サンプリング)記述オブジェクト指向。関数・代入式もオブジェクト(後出の「オブジェクト指向」を参照のこと)単純な構文・データ型宣言不要・名前空間(後出の「仕様」を参照のこと)文字列・式の相互変換やパターンマッチング検索・編集などの文字列操作対話的処理だけでなくバッチ処理も可能である解析手法の比較検証には欠かせない「定番の検証用データ集」画像処理・音声合成・GIS・テキストマイニングなどCRANによって日々強化される拡張機能擬似乱数生成法としてメルセンヌ・ツイスタ(デフォルト設定)や他の多種の生成法が選択できる高速な組込み関数群[編集]インタープリタでありながらも行列などの複雑なデータ構造に最適化された高速な組込み関数群を持つ(後出の「処理速度」を参照のこと)更なる高速計算が要求される場合にはC・C++・FORTRANなどの外部プログラムと動的リンクしての拡張できる視覚化に優れたグラフ機能[編集]データのグラフ・図解化機能が柔軟でありインフォグラフィック環境とでも呼べるほど高度なグラフ作成ソフト機能を持つうえにユーザー独自の図解定義もプログラムが容易であるグラフ画像を多くの画像フォーマット・商業印刷品質で出力できる(後出の「データのプロット」を参照のこと)データ互換性[編集]他の統計ソフト(Excelなど)のデータ読込[4](後出の「データ入出力」を参照のこと) 手軽なデータソース例として、csvフォーマットのファイルを『 read.csv(\"ファイル名\") 』と命令する事で、Rの標準的なテーブルデータ形式であるデータフレームに自動変換して読込ませられる。ODBC対応により各種データベースにアクセスできるユーザープログラムを配信・利用できるCRANネットワーク機能[編集]世界中のRユーザが開発したRプログラム(ライブラリ)(これを「パッケージ」と呼ぶ)がCRAN(The Comprehensive R Archive Network)と呼ばれるネットワークで配信されており、それらをR環境単独でオンラインでダウンロード・インストール・アップグレードと一連の管理が可能である。R-Forge等の他のサーバーも設定できる。CRANはRにシームレス統合されているため利用可能な機能(基本機能・オプションプログラムの両方)は日々増加拡張している[5]。(後出の「パッケージ」・「最近の展開」を参照のこと)教育現場から実務・研究現場へ永続的に利用可能[編集]マルチプラットフォーム・オープンソースで無償であるため誰もが同一作業環境を構築できる「命令の文法が単純である」・「高水準な統計解析と視覚化機能・永続的な利用に耐える」などの理由で教育機関において[[統計学#教育|統計学教育]]や統計処理を必要とする講義で利用し易いうえにプログラミングに手間取る事なく統計解析の教育・学習に専念できて解析のプロフェッショナルな道具であるので学習スキルは後々も実践で活かせる(後出の「プログラムの入手」・「持続可能な統計環境」・「最近の展開」を参照のこと)言語仕様[編集]Rの構成には広義の関数型言語の一つであるSchemeの影響を受けているためにリストを基本にした内部処理・遅延評価・静的スコープなどの特徴を持つ。なお、表記法にはCの影響がある。制御構造・サブルーチン[編集]for ・ if ・ while ・ repeat ・ switch ・ break といった近代的な構造化構文をサポートする。自前の関数(手続き)を定義することができ、自前の二項演算子を定義することもできる。関数は function 関数で生成する。次に、階乗を計算する自前の関数を生成し、 toyfactorial として参照可能にする例を示す。toyfactorial<-function (n) {if (n<=0) return(NA)f<-function(i) {if (i==1) return(1) else return(i*Recall(i-1))}return(f(n))}これは実用的ではないが、関数のネスティング・再帰呼び出し・スコープの例として挙げる。RはPascalやModula-2のように関数のネスティングが可能である。この例では、関数内部で更に局所的な関数を生成し、 f として参照している。スコープもPascal等と同様辞書式で関数 f の中ではその外側にある toyfactorial の変数が「見える」。 str は局所変数なので、関数の外側に同じ名前の変数があっても影響を与えない。ただし、Rは呼び出しスタックを遡る動的スコープも実現可能である。 f の内部では自分の名前を参照することができないので、自分自身を再帰的に呼び出すために Recall 関数を用いている。関数型の引数を利用することもでき、その場合複数の関数が互いに呼び出しあうことができ、また無名の関数をその場で定義して関数型の引数として渡すことができる。一種の複文のような用途に用いられる。NAは統計処理においては欠くことのできない特殊なデータで、データが無効であることを示す。Rの関数はそれ自体がオブジェクトであり、ある関数自体を外から参照したり書き換えたりすることができる。関数の本体部分を返す body 関数・仮引数リストを返す formals 関数・関数に付随する環境を返す environment 関数などが用意されている。渡された式そのものを操作することも可能で、特定の環境(名前とポインタのリスト)の下で与えられた式を評価する eval 関数・渡された式の要素を環境に応じて置き換える substitute 関数・式を文字列に分解する deparse 関数等がある。関数呼び出しも一種のリストとして処理されており、次のように call 関数を用いて、関数名と引数のリストから関数呼び出しオブジェクトを生成できる。x <- 1:3y <- 2:4z <- call('plot', x, y)eval(z)関数はファイルから読み込むこともでき、更には、パッケージとして一纏まりにすることもできる。オブジェクト指向[編集]Rには継承やメソッドの実行時ディスパッチといったオブジェクト指向プログラミングの手法が取り入られており、数多くの総称的な (generic) 関数を持つ。これは同じ関数名であっても、取り扱うオブジェクトが属しているクラスによって独自の方法で処理を行うものである。Rでは、クラスはオブジェクトに付随する属性として扱われるものの一つであり、リストとして保管されている。データ型[編集]数値型(複素数を含む)、文字型、論理型といった基本的な型、ベクトル、リスト、行列といった統計処理や情報処理に必要な型を備えている。前述のように関数それ自体もデータである。データフレームは配列ないしリストの拡張版で、コラム毎に異なったデータ型を持つことができるため、表の形で表現されたデータを格納/操作するのに有用である。データフレームは行列から生成することもあるが、ここではリストとの関連で説明する。ベクトルとリスト[編集]ベクトル型は、データをある順序で並べたものである。 2:5 または c(2, 3, 4, 5) は数値型データ2, 3, 4, 5をこの順序で並べたものである。変数 a, b を同じ要素数をもつ数値型データのベクトルとすると、 a + b は両ベクトルを要素毎に加算してできた、同じ要素数の数値型ベクトルを返す。 a + 1 はベクトル a の各要素に1を加算したベクトルを返す。 c('猫', '猫', '犬') のように文字(列)型・論理型データを要素とするベクトルを作ることもできる。リスト型は様々な型のデータを並べたものである。ベクトルのリストやリストのリストも可能である。 list 関数によって生成できる。f1 <- c('猫','猫','犬')f2 <- c(1, 2, 3)f <- list(field1=f1, field2=f2)文字型データを要素とするベクトル f1 ・数値型データを要素とするベクトル f2 からリスト f が生成される。 field1, field2 はリストの要素を指す「タグ」である。LISP風のdotted pair listも実装されているので必要に応じて用いられる。データフレーム[編集]さて、上記の2つのベクトル f1, f2 の要素数は等しい。このような場合、リストをデータフレームに変換できる。df<-data.frame(f, row.names=c('たま ', 'みけ', 'ぽち'))dfはデータフレーム型変数であり、各ROW(以下「行」)に「たま」「みけ」「ぽち」のラベルがつく。もうすこし大きな表、例えば種性別月齢愛らしさたま猫♀15しろ猫♂24くろ猫♂15みけ猫♀35ぶち猫♂123とら猫♂182みゃぁ猫♀304猫じゃ猫♂800ぽち犬♀25ころ犬♀105たろ犬♂403じろ犬♂403じんぺい犬♂502わん犬♀604のらくろ犬♂1005を例えば「犬猫」という名前の変数にデータフレームとして付値(手続型言語の代入に相当する)すると、その内容は> 犬猫種 性別 月齢 愛らしさたま 猫 ♀ 1 5しろ 猫 ♂ 2 4くろ 猫 ♂ 1 5みけ 猫 ♀ 3 5ぶち 猫 ♂ 12 3とら 猫 ♂ 18 2みゃぁ 猫 ♀ 30 4猫じゃ 猫 ♂ 80 0ぽち 犬 ♀ 2 5ころ 犬 ♀ 10 5たろ 犬 ♂ 40 3じろ 犬 ♂ 40 3じんぺい 犬 ♂ 50 2わん 犬 ♀ 60 4のらくろ 犬 ♂ 100 5のように、本来のデータをよく表現するものとなっている。それだけでなく、「猫」「犬」「♀」「♂」などの文字データは内部的に因子ないしカテゴリに変換されている。データフレームから特定のデータコラムを抽出するには 変数名$タグ名 、例えば 犬猫$月齢 とする。特定のデータ行だけを抽出するには subset 関数または要素の指定 [ ] を用いる。例えば猫<-subset(犬猫, 犬猫['種']=='猫')犬<-犬猫[犬猫['種']=='犬',]t.test(猫$愛らしさ,犬$愛らしさ)は「愛らしさ」の平均値を猫と犬の間でt検定する。(この例では、 p-value = 0.6537 である。)機能[編集]Rには標準状態でも統計、検定、解析向けの強力な関数が備わっており、必要に応じて新たな関数を定義することができ(既述のとおり、CやFORTRANなどによって記述し、外部でコンパイルした関数を呼び出すこともできる。)、自分でプログラムを書かなくても、多くのパッケージを利用できる。これに加えて、便利な入出力機能、グラフ作成機能を備えている。データ入出力[編集]ベクトルを読み込む scan 関数や簡易にデータフレームを読み込むことのできる read.table 関数等のようにテキストファイル入出力用のさまざまな関数が用意されている。また、市販の統計解析パッケージSPSS・SAS等の独自形式バイナリデータを直接扱うこともできる。画像をバイナリデータとして読むこともでき、読み込み後は行列として扱うことができるので、画像処理にも用い得る。パイプやソケット(ポート番号参照)を扱う関数も用意されている。データのプロット[編集]plot 関数によって多彩なプロットができる。 plot は総称的な関数であり、引数として渡されたデータの種類によって、自動的に様々なグラフを描き分ける。他にヒストグラムを描画する関数、イメージを描画する関数など高レベルの描画関数がある。これらはデフォルトでも機能するが、細かなパラメーターを指定することもできる。加えて、単に線を引いたり点を打ったりする低レベルの描画関数も用意されているため、好みのグラフを生成することができる。プロットは画面に対して行われるだけでなく、PDF・SVG・PS・PNGといった形式の出力を直接行うこともできる。デフォルト状態でのRのプロット例図にデフォルトでのプロット例を示す。上から順に plot(犬猫$種, 犬猫$性別) ・ plot(sin(seq(0, 2 *pi, 0.1))) ・ image(x <- -50:50, x, x %*% t(x)) の実行結果である。 seq 関数は等差級数からなるベクトルを生成する。 %*% は行列の積を計算する演算子、 t は転置行列を生成する関数である。最初の例では先に扱った動物種毎の性比を表示、次の例では正弦関数(自動的にベクトルの添字が横軸となり、ベクトル生成式が縦軸のラベルとなっている)を表示し、最後の例では、引数を評価する中でベクトルを生成してxに代入し、積を計算し、その各要素の値を色の濃さで表現している。ワークスペースの保存[編集]現在の作業状況に名前を付けて保存し、後に再利用することができる。コマンドを発行するコンソールの内容も保存できるので、どのような処理を行って結果を得たかを確実に記録し、再現することができる。発見的操作を伴う研究用途では極めて重要な要素である。その他[編集]日本語対応[編集]日本語に対応しており、関数名・変数名・コメントなどに日本語を使える。プログラムの入手[編集]CRANからダウンロード・インストールすれば直ちに利用開始できる。動作環境はマルチプラットフォームに対応し、Windows・Mac OS X・UNIX・Linuxで動作する。アップデートは精力的に継続され、ソースコードもCRANにて公開されている。パッケージ[編集]Rの用語でパッケージとはR言語のプログラムを配布用の形式に保存したものを言う。関数やデータセット・リファレンスマニュアルなどが一纏めにされた、いわばでき合いのアプリケーション・関数ライブラリ・データベースなどと言える。 Rには予め幾つかの標準パッケージが添付されており、例えば、3層ニューラルネット(nnet)等が直ぐに利用できる。CRANを使い、インターネット越しに随時パッケージの一覧検索・ダウンロード・インストール・作業領域へのロード・アップデートをRシステムが管理する。パッケージ間で関数を引用しあう依存関係も自動的に処理され、ユーザーが気を配らなくて良い。Rユーザーから見ると、CRANはRとシームレスに統合された機能の一部になっている。 世界中のRユーザーが作成したパッケージがCRANで公開されており、これらは自由に使用できる。CRANはR資産の知識共有メカニズムとも言え、CRANによってRの機能は日々強化されている。R本体のみでも機能は潤沢だが、第一線ユーザー達の実務経験が反映した豊富なパッケージ群は大きな助力となり得る。パッケージのダウンロードは自由に手動でできるが、相互依存関係の解決やインストール・アップデート・ロード管理は人手で行なうと煩わしいので、そのための機能を備えているRシステムに一元管理させるのが推奨される。 パッケージの管理をR自体が行なうためには、予め何れかのCRANサイトを手元のRシステムに登録設定しておく必要がある。設定は一度行なえば良い。[6]なお、パッケージを用いなければ上記設定をしなくてもR言語を使うことはできるし、オフラインのみでRを使用しても問題は無い。パッケージが必要になった時に改めてCRANに接続するようにすれば良い。因みに、Rユーザー自身がパッケージを作成するためのツールキットは標準パッケージとしてRに添付されている。CUIとGUI[編集]Rは以下の標準インタフェース画面を通じて用いる。コマンド入力や出力をCUIで行う「コンソールウィンドウ」コマンドやデータの文字列を編集しそれらをコンソールへ入力する「Rエディタ」ロードしたオブジェクトを管理する「ワークスペースブラウザ」データテーブルをスプレッドシート状の形式で編集できる「データエディタ」CRANからパッケージをインストールするための「パッケージインストーラ」インストール済みパッケージのロード管理をする「パッケージマネージャ」各パッケージに含まれているデータセットをブラウズする「データマネージャ」基本設定を行う「環境設定」厳密に言えば、この方式はマルチウインドウのGUIと言えなくはないが、Rを操作する「コンソールウィンドウ」は「命令をテキスト入力して使うCUI」である。この点についてユーザーの間でも商業ソフトに見られるようなマウスオペレーションを望む声は多く、それに呼応してR CommanderというGUIがCRANからパッケージとして提供されている。R標準以外のGUIを利用する方法として、RStudio・Tinn-Rがある。なお、他にも、GNUの時系列解析環境であるgretlがあり、そのGUIを通じてRを操作できる。(gretlはR以外に対しても使用できる。)また、データ分析プロセスをフローチャート式に描くことでプログラムできるR AnalyticFlowというソフトウェアも企業から無償提供されている。(後出の「外部リンク」を参照のこと)処理速度[編集]インタプリタ言語であることから、R言語の処理速度は不当に低く評価されることが多い。しかしS言語商用版であるS-PLUSよりも多くの場合高速であるばかりか、汎用行列系言語のスタンダードとも言えるMATLABやその派生語のGNU Octave・Scilabよりも総合的に高速であるという評価例がある。(後出の「外部リンク」を参照のこと)「特徴」にもあるとおり、「統計計算に特化した情報処理」機能を充分生かしてこそ高い生産性を発揮できる。生産性の最たる「計算速度」への効果に関しては、基本的な作法が幾つも提唱されている。Rプログラムの高速化を目指すときは、R言語に組み込みの関数群が充分に高速化されているので、これらを活用すべきである。組み込み関数と同じ機能を新たにコーディングすることは避けなければならない。ベクトルを纏めて扱える関数がある場合では、それを用いる。ベクトル要素ごとに分けて処理すると、速度は低下する。論理判断を含んだループ処理をするのは、多くの場合、間違った方法である。それに替えて論理添字集合の操作で一挙に答えを出すといった方法が推奨される。(R言語に限らず行列系言語何れにおいても、高速化するには「forやrepeatといったループ系の命令を無駄に使わず、極力ベクトル化(あるいは行列化)する」ことが基本である。)持続可能な統計環境[編集]教育課程から実務への移行や職務環境の変化が生じると、利用可能な計算資源というものは変わってしまう。R言語の登場以前は、学術論文など社会的信頼性を要求される統計データの処理環境といえば高額なプロプライエタリソフトウェアばかりが前提とされた。だが、これでは継続的な予算がつかなくなれば環境のサポートやアップデートは停止してしまい、極端な話、予算が元から無い立場に異動してしまうと在来の統計処理が何もできなくなる事態になり兼ねない。統計家にとっては、今まで習得し錬成した手法と蓄積したデータとその運用方法は例え環境が変化しようとも継承できなくては困る。この意味から、他に多く存在するプロプライエタリ・「生かすも殺すも版権保持者の都合次第」というような統計処理ツールと比べ、R言語のようなオープンソースで、それゆえ、CRANパッケージ等によって日々機能拡張し得る、つまり、「フリーソフトウェアの精神に則り永続的で世界規模な集合知に支えられ、無償でありながら高い信頼に値する」統計環境というのは、統計家の長期的な生産性に大きく寄与する「持続可能な統計環境」と言える。最近の展開[編集]Rパッケージ数の飛躍的な増大に見られるとおり、統計学を超えて学問分野や業界を問わず、金融工学・時系列分析・機械学習・データマイニング・バイオインフォマティクスなど、柔軟なデータ解析や視覚化そして知識共有の需要に応え得るR言語の普及は世界的な広がりを見せている。近年では、生命科学分野のためのRパッケージプロジェクトのBioconductorが立ち上がり、既に多くのゲノムスケール関連のパッケージが配布されている。ゲノムスケールデータの諸情報、即ち、大規模遺伝子発現プロファイル・質量分析データ・蛋白質相互作用データなどを解析するプログラムやデータをRパッケージとしてRユーザーに配布する仕組みである。また、現在では嘗てSAS一辺倒だったFDA(アメリカ食品医薬品局)への薬事申請や報告の際にもRが用いられている[7]。SPSSでは、2009年より製品名をPASW Statisticsと改め、R言語との連携強化を発表した。SPSSのインタフェースからR言語の機能を使える[8]。2009年7月にSAS Instituteは\"R Interface Coming to SAS/IML Studio\"によってSASからR言語へのインタフェースを提供することを発表した[9]。SAS InstituteのWebサイトには、新たな統計手法は大抵の場合は真先にR言語上で実装されるという現状を踏まえて、SASユーザーの要望に応えてインタフェースの提供を行なう、との旨が述べられている。脚注[編集]^ R Project Contributors （英語）^ GNU R （英語）^ Rにおける確率分布 （日本語）^ Rがインポート・エクスポートできるデータ形式 （日本語）^ CRANパッケージリスト （日本語）^ CRAN国内ミラーの使い方 （日本語）^ RとFDA （日本語）^ IBM RユーザーのためのIBM SPSS Statistics Developer （日本語）^ R Interface Now Available in SAS/IML Studio （英語）関連項目[編集]S言語外部リンク[編集]ウィキメディア・コモンズには、R言語に関連するカテゴリがあります。The R Project for Statistical Computing （英語） R言語のオープンソース実装The Comprehensive R Archive Network （英語） CRANMirrors （英語） CRANのミラーサイト一覧CRAN Packages By Name （英語） CRANで公開されているR用パッケージの一覧CRAN Task Views （英語）R-Forge （英語）Software Map （英語） R-Forgeで公開されているR用パッケージの一覧The R Journal （英語）R Developer Page （英語）R - Documentation （英語） Rの公式マニュアル 『Introduction to R』R: A Language and Environment for Statistical Computing Reference Index (PDF) （英語）R Installation and Administration An Introduction to R R Language Definition R Data Import/Export Writing R Extensions R Internals R FAQ (PDF) （英語）R Installation and Administration An Introduction to R R Language Definition R Data Import/Export Writing R Extensions R Internals R FAQ（英語）Using R for Data Analysis and Graphics Introduction, Code and Commentary (PDF) （英語）Kuhnert+Venables-R_Course_Notes.zip (ZIP) （英語） An Introduction to R: Software for Statistical Modelling & ComputingR GUI Projects （英語）The R manual （英語）Quick-R （英語）R Reference Card R reference card (PDF) （英語） Rの関数早見表R （英語） Free Software FoundationのRプロジェクトページ(GNU Projectのひとつ)R Wiki （英語） R ProjectのWikiRweb （英語） ブラウザでR言語を体験できるwebアプリケーションサイトR Commander （英語） 【R用パッケージ】 Rcmdr(RをGUIで操作できる)［連載]フリーソフトによるデータ解析・マイニング 第38回 Rコマンダー: Rcmdr (1) (PDF) Rコマンダー: Rcmdr (1) （日本語）［連載]フリーソフトによるデータ解析・マイニング 第39回 Rコマンダー: Rcmdr (2) (PDF) Rコマンダー: Rcmdr (2) （日本語）無料統計ソフトEZR (Easy R) （日本語） 【Rcmdr用プラグイン】 RをGUIで操作できる(『R Commander』を組み込んでいる)Rstudio （英語） R用IDETinn-R （英語） R用IDE (Windows用)R User Configurationについて （日本語） Rのユーザ個別設定を行うユーティリティ (Windows用)Ra, the R just-in-time compiler （英語） Rのループ処理を10倍速にするJITの試みBenchmark （英語） Speed comparison of various number crunching packages (R言語の処理速度評価)RSeek.org R-project Search Engine （英語） R言語専門の検索エンジン (R言語に関係する内容のページに偏った検索結果を提供する)seekR （日本語） 上記の日本語版RjpWiki 一覧 （日本語） Rの日本語情報とキーパースンの拠点統計解析フリーソフトRの備忘録 (PDF) R-Tips （日本語） 『The R Tips ―データ解析環境Rの基本技・グラフィックス活用集―』(Rの解説書)のオンライン版R 統計言語 R の関連ドキュメントの和訳 manuals-jp R の日本語文章 （日本語） Rの公式マニュアル 『Introduction to R』 の和訳R 基本統計関数マニュアル (PDF) （日本語）Rのインストールと管理 R入門 R言語定義 Rのデータ取り込み/出力 Rの拡張を書く (PDF) （日本語）Rのインストールと管理 R入門 R言語定義 Rのデータ取り込み/出力 Rの拡張を書く (PDF) （日本語）Rのインストールと管理 R入門 R言語定義 Rのデータ取り込み/出力 Rの拡張を書く (PDF) （日本語）R-FAQ日本語訳 （日本語）ビジネス統計解析 （日本語） Rの導入方法から具体的な言語文法や事例を交えた基本操作を解説した資料が公開されているR による統計処理 （日本語） 『Rによる統計解析』(Rの解説書) サポートページRの備忘録 （日本語）R、R言語、R環境・・・・・・ R、R言語、R環境・・・・・・ （日本語）R統計解析入門: 統計解析 テクニカルデータプレゼンテーション （日本語）租界<R>の門前にて -- 統計言語「R」との極私的格闘記録 （日本語）Cookbook for R （英語）R Graph Gallery （英語）R Graphical Manual （英語）Google's R Style Guide （英語）Data Analysts Captivated by R’s Power （英語） Rの紹介統計解析のための専用言語R(R言語)とは （日本語） Rの概要統計分析フリーソフト「R」 （日本語） RのチュートリアルRプログラム （日本語） Rのチュートリアルサーバー・クリニック: データとの格闘にはRが便利 （日本語）データ解析言語Rによる統計的プログラミング 第1回 豊富な統計機能で遊ぶ 第2回 機能プログラミングとデータ操作 第3回 再利用可能なオブジェクト指向プログラミング （日本語）ggplot2 （英語） 【R用パッケージ】 グラフ描画用高機能関数群ggplot2 （英語） ggplot2 ドキュメントggplot2 Quick Reference （英語）R AnalyticFlow （日本語） フローチャートを描くことで高度なデータ分析を実現するR用ソフトウェアBioconductor （英語） ゲノムデータ解析R用パッケージ集STATISTICA （英語） 「FDA公認のRと連動可能」を謳っている統計ソフトウェアstatconn （英語） RとExcelやCalcなどの他アプリとの相互連携サービスソフトウェアMeCab: Yet Another Part-of-Speech and Morphological Analyzer （日本語） オープンソース 形態素解析エンジンRMeCab （日本語） データ解析・グラフィックス環境 R から日本語形態素解析ソフト和布蕪(MeCab)を呼び出して使うインターフェイスcabocha - Yet Another Japanese Dependency Structure Analyzer （日本語） Support Vector Machines に基づく日本語係り受け解析器RCaBoCha （日本語） 日本語の係り受け関係を R で解析できるようにするR-bloggers | R news & tutorials from the web （英語）Ross Ihaka's Home Page （英語） Ross Ihaka 公式ページPaul Murrell's Home Page （英語） Paul Murrell 公式ページ表・話・編・歴数値解析ソフトウェアフリーウェアADMB（英語版）EulerFreeFem++（英語版）FreeMatGenius（英語版）Gmsh（英語版）GNU OctavegretlOpenFOAM（英語版）RSageSALOME（英語版）ScilabプロプライエタリDADiSP（英語版）GAUSS（英語版）LabVIEWMATLABMathematicaSpeakeasy（英語版）VisSim（英語版）一覧（英語版）比較（英語版）数式処理システム数式処理システムの一覧「http://ja.wikipedia.org/w/index.php?title=R言語&oldid=48500971」から取得 カテゴリ: 数値解析ソフトウェア統計処理ツールオープンソースGNUプロジェクトオブジェクト指向言語関数型言語プログラミング言語\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f15e"},"body":"Apache Tomcat出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache Tomcat開発元Apache Software Foundation最新版7.0.42 / 2013年7月2日（12日前） （2013-07-02） [1]プログラミング言語Java対応OSクロスプラットフォームプラットフォームJavaプラットフォームサポート状況開発中種別Servlet containerHTTP webサーバーライセンスApache License 2.0公式サイトtomcat.apache.orgテンプレートを表示Apache Tomcat (アパッチ トムキャット) は、Java Servlet や JavaServer Pages (JSP) を実行するためのサーブレットコンテナ（サーブレットエンジン）である。Apache License, Version 2.0を採用したオープンソースソフトウェアであり、商用利用も多い[要出典]。バージョン 7.0 は、Java Servlet 3.0、JavaServer Pages 2.2対応で、Java 6 以降が必要[2]。2005年以降、Apacheソフトウェア財団のトップレベルプロジェクトのひとつであるApache Tomcat Project 内で開発されている [3]。それ以前はかつて存在していたJakartaプロジェクト内で開発されていた。目次1 構成2 リファレンス実装としてのApache Tomcat3 HTTPサーバーとの連携4 脚注5 外部リンク構成[編集]Tomcat 5.0から、Jasper2を含む。Catalina - Servlet コンテナCoyote - HTTPサーバーJasper, Jasper2 - JavaServer Pagesリファレンス実装としてのApache Tomcat[編集]サーブレットやJSPのオフィシャルなリファレンス実装に使用されてはいるが、リファレンス実装そのものではない。HTTPサーバーとの連携[編集]Apache Tomcat は安定して動作し、静的コンテンツのHTTPサーバーとしても使えるので単体で用いることもできる。また、Tomcat 以外のHTTPサーバーがHTTPリクエストを受け付け、必要に応じてサーブレットコンテナにリクエストを渡すという構成でHTTPサーバーと連携させて用いることもできる。ただし、別 HTTP サーバーとコネクタ連携をすると、Advanced IO (Comet) など一部の機能が使えなくなる。例えば、Apache HTTP Server とコネクタモジュールを用いて連携を行う場合、Apache Tomcat 側では mod_jk をコネクタとして配布している。また、Apache 2.2以降は mod_jk とは別な方法として、mod_proxy_ajp モジュールを用いる方法もある。脚注[編集][ヘルプ]^ “Tomcat 7.0のドキュメントのページ”. 2013年7月9日閲覧。 “Apache Tomcat 7.0.42のPGP署名”. 2013年7月9日閲覧。^ “Apache Tomcat Versions”. 2013年3月28日閲覧。^ “The Jakarta Site - News & Status - 2005 Oct-Dec”. 2013年7月9日閲覧。外部リンク[編集]Apache Tomcat表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Apache_Tomcat&oldid=48436459」から取得 カテゴリ: Apacheソフトウェア財団オープンソースJavaWebサーバ隠しカテゴリ: 出典を必要とする記述のある記事/2013年3月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f15f"},"body":"NoSQL出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索NoSQL（一般に”Not only SQL”と解釈される）とは、リレーショナルデータベース管理システム (RDBMS) 以外のデータベース管理システムを指すおおまかな分類語である。リレーショナルデータベースをやみくもに使用してきた長い歴史を打破し、それ以外のデータベースの利用・発展を促進させようとする運動の標語としての意味合いを持つ。関係モデルではないデータストアの特徴として、固定されたスキーマに縛られないこと、関係モデルの結合操作を利用しないこと（場合によっては単にそのような機能が欠落しているだけ）、水平スケーラビリティが確保しやすい事が多いこと、トランザクションを利用できないものが多いことなどが挙げられる。学術的な世界では、この種のデータベースのことを構造型ストレージ (英: structured storage) と呼ぶことが多い[1][2][3][4]。NoSQL系データベース管理システムには、データの格納および取得が高度に最適化されているものが多い。その最適化のために機能性を最小限にしているものもある。「値」およびそれを取得するための「キー」だけを格納できるKey-Value型データベースは、その最たる例である。NoSQL系データベース管理システムが有用な場面は、関係モデルを必要としないデータを扱う時や、大量のデータを扱う時である。用途は多様であり、数百万のkey-valueペアを格納したり、数個程度の連想配列を格納したり、数百万の構造的データを格納したりと、様々に使われる。この構造は、大規模なデータを統計的に解析したり、増えつづける情報をリアルタイムに解析するのにも便利である。産業界での有名な実装として、GoogleのBigTable、アマゾンのAmazon DynamoDBなどがある。オープンソースの実装も数多く存在し、例えばMongoDB、 Redis、Apache HBase、Apache Cassandraなどがある。目次1 歴史2 アーキテクチャ3 分類4 オープンソースのプロジェクト一覧5 参考文献6 関連項目歴史[編集]NoSQLという用語は1998年、SQLインターフェイスを持たない軽量な関係データベースのオープンソースソフトウェアの名前として最初に用いられた。その著者Carlo StrozziはNoSQL運動について、「関係モデル全体と一線を画すものであるから、『NoREL』などと名づけられるべきだった」と主張している[5]。この用語は、Last.fmのJohan Oskarssonの呼びかけによって2009年初頭に開催されたオープンソースの分散データベースについての会合において、Rackspace（英語版）の従業員Eric Evansによって再導入された[6]。この名前はMySQL、MS SQL、PostgreSQLなど関係データベースのシステムで広く用いられていた命名法を参照して付けられたものであり、ACID保証を提供しないような非関係型の分散データストアの勃興を表現する意図が込められていた。NoSQL運動が普及するに従い、その名前のもつネガティブな印象（SQLは不要である、など）が問題となり議論が起こっている。Eric EvansはNoSQLをNot only SQLのバクロニムとして理解するのが好ましいとしている[7]。アーキテクチャ[編集]現代的な関係データベースは、小規模の高頻度なトランザクションか、巨大だが書き込みをほとんど伴わないトランザクションに最適化されて設計されているため、近年必要とされてきている大規模データに基づく (英: data-intensive) 応用事例では性能が劣化してしまう[8]。そのような応用の例として、検索のための文書のインデキシング、トラフィックの高いウェブサイトのサーバ、ストリーミングデータの配布などがあり、Diggのgreen badge[9]、Facebookのインボックスの検索、eBayのシステム全体などがその実例である。NoSQLのアーキテクチャにおいては、結果整合性のみを保証するなどして一貫性の保証を弱く設計したり、トランザクションをひとつのデータアイテムに限るという制限を設けたりすることが多い。補助的なミドルウェアの層を付加することによって完全なACID保証を提供している場合もある[10]。いくつかのNoSQLシステムは分散アーキテクチャを採用している。そのようなシステムでは、多くの場合は分散ハッシュテーブルを用いて、データを複数のサーバーに、冗長性を持たせながら配置する。これにより、サーバーを追加するだけでシステムを容易にスケールアップさせることができ、障害への耐性も強くなる[11]。分類[編集]NoSQL には、主要なものとして、以下のものがある[12]。キー・バリュー型 (Key Value Store) - キーに対してバリュー（値）という単純な構造。Amazon DynamoDB, Basho Riak, Redisなど。大半はバリューとして単純なバイナリデータ（BLOB）のみが格納できるが、 Redisのようにリスト、マップ、ソート済みセットといったリッチなデータ構造をサポートするものもある。またバリューに加えて、タグやメタデータと呼ばれる追加情報が格納できるものも多い。日本発のものには okuyama, Hibari などがある。ソート済みカラム指向 - 行キーに対してカラム（名前と値の組み合わせ）の集合を持つ。行ごとに好きな名前のカラムを好きな数だけ格納できる。カラムはカラム名によってソートされるため、例えばカラム名に時刻を使うことで１行の中に時系列のデータを格納することできる。Apache Cassandra, Apache HBaseなど。ドキュメント指向 - XMLやJSONといった、 スキーマレスでデータ構造が柔軟なもの。MongoDB, Apache CouchDB など。XMLデータベースなどのシステムでは、XQueryを利用できるものもある。オープンソースのプロジェクト一覧[編集]Apache Cassandra - 分散データベース、ソート済みカラム指向型Apache CouchDB - ドキュメント指向型Apache HBase - 分散データベース、ソート済みカラム指向型ArangoDB - multi-model databaseBasho Riak - 分散データベース、キー・バリュー型ChordlessDb4o - オブジェクトデータベース（Javaオブジェクトなどの格納）GT.MHibari - 分散データベース、キー・バリュー型（日本発）Hypertable - 分散データベース、ソート済みカラム指向型MemcachedbMnesia - 分散データベースMongoDB - 分散データベース、ドキュメント指向型okuyama - 分散データベース、キー・バリュー型（日本発）Project Voldemort - 分散データベース、キー・バリュー型Redis - インメモリ・データベース、キー・バリュー型（リスト、マップ、ソート済みセットなど）SimpleDBNeo4j - グラフ型DEXBaseXeXistAllegroGraphOrientDBInfiniteGraph - グラフ型Sones GraphDBInfoGridHyperGraphDB参考文献[編集]^ Hamilton, James (2009年11月3日). “Perspectives: One Size Does Not Fit All”. 2009年11月13日閲覧。^ Lakshman, Avinash; Malik, Prashant. Cassandra — A Decentralized Structured Storage System. Cornell University. http://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf 2009年11月13日閲覧。. ^ Chang, Fay; Jeffrey Dean, Sanjay Ghemawat, Wilson C. Hsieh, Deborah A. Wallach, Mike Burrows, Tushar Chandra, Andrew Fikes, and Robert E. Gruber. Bigtable: A Distributed Storage System for Structured Data. Google. http://labs.google.com/papers/bigtable-osdi06.pdf 2009年11月13日閲覧。. ^ Kellerman, Jim. “HBase: structured storage of sparse data for Hadoop”. 2009年11月13日閲覧。^ “NoSQL Relational Database Management System: Home Page”.  Strozzi.it (2007年10月2日). 2010年3月29日閲覧。^ “NOSQL 2009”.  Blog.sym-link.com (2009年5月12日). 2010年3月29日閲覧。^ “NoSQL: What's in a name?”.  Eric Evans's Weblog (2009年10月30日). 2010年5月31日閲覧。^ Agrawal, Rakesh et al. (2008). “The Claremont report on database research”. SIGMOD Record (ACM) 37 (3): 9--19. doi:http://doi.acm.org/10.1145/1462571.1462573. ISSN 0163-5808. ^ “Looking to the future with Cassandra | Digg About”.  About.digg.com (2009年9月9日). 2010年3月29日閲覧。^ 例：“CloudTPS: Scalable Transactions for Web Applications in the Cloud”.  Globule.org. 2010年3月29日閲覧。^ “Cassandra: Structured Storage System over a P2P Network (PDF)”. 2010年3月29日閲覧。^ Database Landscape Map – December 2012関連項目[編集]構造型ストレージ（英語版）データベースマネジメントシステムの一覧（英語版）Triplestore（英語版）CAP定理「http://ja.wikipedia.org/w/index.php?title=NoSQL&oldid=46776029」から取得 カテゴリ: データベースデータベース管理システムNoSQLデータベースクラウドコンピューティング\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f160"},"body":"ヒドロキシ化合物出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索ヒドロキシ化合物（ひどろきしかごうぶつ、hydroxy compound）は、元素や炭化水素にヒドロキシ基（-OH）が結合しているものである。ヒドロキシ化合物は水素結合が可能であることが大きな特徴であり、ヒドロキシ基に結合している炭化水素の炭素数が多いほど沸点が高くなる。炭化水素にヒドロキシ基が結合したものをアルコールという。芳香環上にヒドロキシ基がある場合はアルコールではなくフェノール（類）と呼ぶ。基本的にヒドロキシ化合物は水素結合により、水との親和性を示すため水に溶けるものが多い。関連項目[編集]アルデヒドこの項目は、化学に関連した書きかけの項目です。この項目を加筆・訂正などしてくださる協力者を求めています（プロジェクト:化学／Portal:化学）。「http://ja.wikipedia.org/w/index.php?title=ヒドロキシ化合物&oldid=30181348」から取得 カテゴリ: 有機化学隠しカテゴリ: 化学関連のスタブ項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f162"},"body":"有機化学出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この記事は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2011年10月）有機化学（ゆうきかがく、英語：organic chemistry）は、有機化合物の製法、構造、用途、性質についての研究をする化学の部門である[1]。構造有機化学、反応有機化学（有機反応論）、合成有機化学、生物有機化学などの分野がある。炭素化合物の多くは有機化合物であるが、100を超える元素の中で炭素の化合物だけが特に取り上げられる理由は、現在知られている化合物のうち、炭素以外の元素のみからなるものは、炭素を含むものにはるかに及ばない[要出典]。また、生体を構成するタンパク質や核酸、糖、脂質といった化合物はすべて炭素化合物である[2]。これは、炭素が −C−C−, −C−O−, −C−N− といった連鎖を任意の数だけ繰り返して共有結合できる唯一の元素だからである[要出典]。ケイ素はいくぶん似た性質を持つが、炭素に比べると Si−Si 結合やSi=Si結合等の安定度が低いために炭素ほどの多様性をもたない[要出典]。目次1 歴史2 実験操作3 炭素骨格と官能基4 脚注・出典4.1 脚注4.2 出典5 関連項目6 外部リンク歴史[編集]「有機化合物」、「生気論」、および「化学の歴史」も参照有機化学が誕生する以前から人類は様々な有機物を利用していた。食料については言うに及ばず、麝香や樟脳等の香料、石鹸やアルコール等がその好例である。石鹸は油脂を植物灰中の金属塩と反応させて作られていた。従って有機化学の始まりを定義するのは異論のあるところである。初期の有機化学は有機物が持つ性質を分析することであったと考えられる。何故ならば有機物は人工的には合成することができず、生命の神秘的な力によって生まれると考えられていたからである[要出典]（生気論）。二酸化炭素などは炭や木を燃やせば作ることができるため、生命力に依らない無機物であるとされた。つまるところ、人によって作ることができず、生物によってのみ作ることができる物質が有機物であると考えられていたのである。化学における生気論は1828年にドイツのフリードリヒ・ヴェーラーによって打ち破られた。彼は、シアン酸アンモニウムの加熱によって有機物である尿素が得られることを示したのである。これ以降も様々な有機物が合成されるに至り生気論は崩壊した。これによって有機物の定義は変化した。その後、様々な有機化合物の性質が調べられ数々の反応が発見された。その中で特筆すべきものとして芳香族化合物の発見があげられる。最初に見つかった芳香族化合物はベンゼンである。ベンゼンの構造はフリードリヒ・ケクレによって示された[注 1]が、二重結合を有する物質の割に反応性が低いことや、置換誘導体の種類が少ないなど奇妙な性質を持っていることが分かった。この奇妙な性質の原因が解明されるのは量子力学が導入されてからである。さらに時代が下って1934年、ウォーレス・カロザースによって最初の合成高分子であるナイロンが作り出された。やがて有機化学の発展と共にゴムや接着剤、樹脂などが合成されるようになり、靴下から宇宙船まで様々な分野に応用されている。有機化学は元来生物を構成する物質を扱う学問であり、生化学とごく密接に関連している。有機化学における手法は、生化学における化学反応の理解や、生体物質の解析などに応用される。現在では、有機化学は生化学や高分子化学の基礎として位置づけられている。実験操作[編集]有機化学の基本的な実験操作は、現代では、かなり洗練され、実験の安全性および結果の妥当性を保証するものとして、ほぼ確立されているので、実験者はまずそれらをしっかりと身につけることが求められる。 ただし、各手順は研究者によって微妙に異なることもあり、時にはそこから流派（出身研究室）を推測することも可能である。実験器具の一覧単離・精製（ろ過、抽出、カラムクロマトグラフィー、再結晶/再沈殿、蒸留）構造決定（核磁気共鳴、質量分析、元素分析、赤外分光法、X線構造解析）炭素骨格と官能基[編集]有機化学で化合物の合成方法を考える場合、炭素骨格の構築と官能基の変換に大別することが多い。一般の有機化合物は、鎖式炭化水素（アルカン、アルケン、アルキン）あるいは環式有機化合物（シクロアルカン、芳香族炭化水素、複素環式化合物など）を骨格とし、そこに官能基（ヒドロキシ基、カルボキシル基など）が結合した構造を持っている。官能基を変換することは比較的容易である。例えば、アルコールは適当な酸化剤を用いることによって、アルデヒドあるいはカルボン酸に変換でき、カルボン酸からさらにアミドやエステルへと変換することが可能である（官能基については基に詳しい説明がある）。一方、炭素骨格を構築することはなかなか難しい。古くからアルドール反応やグリニャール反応が用いられてきたが、期待する炭素骨格を効率よく合成することは困難であった。しかし、近年では鈴木カップリングやメタセシス反応など、効率の良い反応が開発され、タキソールやシガトキシンのような複雑で巨大な分子も全合成することが可能となっている。脚注・出典[編集][ヘルプ]脚注[編集]^ ただし、「ケクレがベンゼンの構造を示した」というエピソードについては異論も唱えられている。本件の詳細はケクレの項目を参照のこと。ベンゼンの構造として別にプリズマンやデュワーベンゼンが提唱されたが、結局却下された。出典[編集]^ 『岩波 理化学辞典』岩波書店^ 存在比からすれば、寧ろ無機化合物が多い。関連項目[編集]ウィキブックスに有機化学関連の解説書・教科書があります。ポータル 化学全般IUPAC命名法 - 酸と塩基 - 酸化と還元 - 加水分解 - 立体化学（化学構造、投影式、光学異性体、不斉炭素原子、絶対配置、立体配置）有機化合物炭化水素（アルカン、アルケン）- 不飽和炭化水素 - 芳香族炭化水素 - 複素環式化合物置換基 - ハロゲン化アルキル - カルボン酸（酸アミド、酸ハライド、酸無水物）生体物質核酸塩基 - ヌクレオシド - ヌクレオチド - 核酸アミノ酸 - ポリペプチド - タンパク質糖 - 単糖 - 二糖 - 多糖（デンプン、セルロース） - 糖鎖脂質 - 炭水化物化学工業石油 - 高分子（生体高分子、ゴム、樹脂、合成繊維） - 無機化学 - 油脂その他生物学と有機化学の年表外部リンク[編集]有機化学美術館表・話・編・歴化学物理化学反応速度論 · 化学物理学 · 電気化学 · 地球化学 · 光化学 · 量子化学 · 固体化学 · 分光学 · 表面科学 · 熱化学有機化学生化学 · 生物有機化学 · 生物物理化学 · ケミカルバイオロジー · 医薬品化学 · 有機化学 · 有機金属化学 · 薬学 · 物理有機化学（英語版） · 高分子化学無機化学生物無機化学 · クラスター化学（英語版） · 無機化学 · 材料科学 · 核化学その他分析化学 · 宇宙化学 · 化学教育（英語版） · クリックケミストリー · 計算化学 · 環境化学 · グリーンサスティナブルケミストリー · 超分子化学（英語版） · 理論化学 · 湿式化学（英語版）生体物質の一覧（英語版） · 無機化合物の一覧 · 有機化合物の一覧（英語版） · 周期表「http://ja.wikipedia.org/w/index.php?title=有機化学&oldid=48489918」から取得 カテゴリ: 化学有機化学科学史有機化合物隠しカテゴリ: 出典を必要とする記事/2011年10月出典を必要とする記述のある記事/2013年7月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f161"},"body":"PostgreSQL出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索PostgreSQL開発元PostgreSQL Global Development Group最新版9.2.4 / 2013年4月4日（3か月前） （2013-04-04）最新評価版9.3 beta 2 / 2013年6月27日（17日前） （2013-06-27）プログラミング言語C対応OSクロスプラットフォーム種別オブジェクト関係データベースライセンスThe PostgreSQL License公式サイトwww.postgresql.orgテンプレートを表示PostgreSQL（ぽすとぐれすきゅーえる: 発音例）は、BSDライセンスに類似するライセンス[1]により配布されているオープンソースのオブジェクト関係データベース管理システム (ORDBMS) である。その名称は Ingres の後継を意味する「Post-Ingres」に由来している。単純に「Postgres」や「ポスグレ」と呼称されることも多い。目次1 概要1.1 市場シェア1.2 プラットフォーム2 特徴2.1 関数2.2 インデックス2.3 トリガ2.4 ルール2.5 データ型2.6 ユーザ定義オブジェクト2.7 バキューム2.8 パーティショニング2.9 全文検索2.10 レプリケーション2.11 その他の特徴3 性能3.1 CPU スケーラビリティ3.2 更新処理3.3 ベンチマーク4 周辺ツール4.1 管理ツール4.1.1 psql4.1.2 pgAdmin4.1.3 phpPgAdmin4.1.4 その他4.2 レプリケーション・アドオン4.3 接続インタフェース5 歴史5.1 バージョン履歴6 受賞7 脚注8 参考書籍9 外部リンク概要[編集]PostgreSQLはIllustraや、Illustraを買収しその技術を採りいれたInformixとともにオブジェクト関係データベース管理システムを実装してきた。[2] 問い合わせ言語には SQL を用いており、SQL92, 99の大部分と、2003, 2008の一部をサポートしている。(一覧 サポートあり / なし)市場シェア[編集]世界的な利用状況を見ると、2012年の時点ではオープンソースDBの中でのそれぞれのシェアを考えると、MySQL系 70%（Mysql56%、MariaDB 14%）、MongoDB 15%となり、PostgreSQLが占めるシェアは14%程度である。[1]日本国内シェアについてはMySQL系 66%（Mysql50%、MariaDB 16%）、PostgreSQL 8% と、世界的なシェアとは状況が異なる。[2]プラットフォーム[編集]UNIX系列、Linux、Microsoft Windows、OS/2 など多くのOSで動作する。Windowsにおいては、バージョン7.4以前はCygwinを必要としたが、バージョン8.0以降はネイティブで動作する。32ビット / 64ビット の両アーキテクチャ上で動作する。32ビット版では共有バッファサイズが最大2GBに制限されるが、64ビット版では上限は無い。配布形態は、ソースコードや RPM の他、EnterpriseDB 社よりGUIインストーラが提供されている。このパッケージにはGUIの管理ツールであるpgAdminやドライバ等の追加インストーラが同梱されている。特徴[編集]関数[編集]関数（ストアドファンクション）によりサーバで実行される処理のまとまりを定義できる。 関数の定義には SQL の他、分岐やループをサポートする下記の言語で実装することが可能である。 言語によっては関数をデータベーストリガとして実行することもできる。PL/pgSQLOracle Databaseで用いられるPL/SQLを参考にして実装されたビルトイン言語。PL/PSMSQL:2003 規格の SQL/PSM に則った構文を持つ。[3]スクリプト言語PL/Perl, PL/php, PL/Python, PL/Ruby, PL/sh, PL/Tcl, PL/Luaコンパイラ言語C言語, PL/Java統計処理言語PL/RPostgreSQL は行を返却する関数を定義することができる。 関数の出力は複数の行であり、クエリの中でテーブルと同様に扱うことができる。実行するユーザまたは定義したユーザのどちらの権限で実行されるかを指定して関数を定義できる。インデックス[編集]PostgreSQL は組み込みで以下のインデックスをサポートしている。 また、ユーザ定義インデックスを追加することもできる。B+木ハッシュテーブルGiST (汎用検索ツリー, 多次元木)GIN (汎用転置インデックス)PostgreSQL のインデックスには以下の特徴がある。必要に応じて逆順でスキャンできる。逆順スキャン用のインデックスを別に定義する必要は無い。式インデックス (関数インデックス) を定義できる。複数の列の値を引数に取る関数の結果をインデックス化する。部分インデックス (条件付きインデックス) を定義できる。条件を指定し、条件に適合する行のみをインデックス化することで、インデックスのサイズを縮小できる。クエリオプティマイザ (planner) は複数のインデックスを同時に使用するクエリ実行計画を作成できる。複数のインデックスの結果をメモリ上のビットマップとして併せ、そのビットマップに対応する行をテーブルから取得する。トリガ[編集]データベーストリガは SQL データ操作言語 (SQL DML) の文 (INSERT, UPDATE / UPDATE OF, DELETE, TRUNCATE) を実行した際に呼び出される。 利用例として、INSERT 文で挿入される値が妥当かの検証がある。 トリガが実行される条件は WHEN 句で与えることができる。トリガはテーブルに対してのみ定義できる。 ビューに対するトリガが必要な場合には、代わりにルールを使用する。 複数のトリガが定義されている場合、アルファベット順に実行される。トリガで実行される処理は関数として定義する。 トリガ用の関数の定義には SQL 関数は使用できないが、PL/pgSQL やその他の多くの関数用言語を使うことができる。ルール[編集]ルールにより SQL の内部表現である「クエリ木」を書き換えることができる。 一般的なルールの用途は更新可能ビューを実現することであり、標準 SQL で規定される \"INSTEAD OF\" トリガ の代わりに用いられる。データ型[編集]多くのデータ型が利用できる。配列 / 複合型任意の精度を持つ数値可変長文字列 / 可変長バイト列日時, 日付, 時刻, 時間差分 (タイムゾーンの有無を指定可能)ブーリアン型幾何型（点、線分、円、矩形、多角形）IPv4 / IPv6 アドレス, MAC アドレスXML 型、UUID 型, 列挙型（8.3以降）可変長文字列と可変長バイト列には最大で 1GB を格納できる。一定のサイズを上回るデータ値は TOAST と呼ばれる機能により自動的に圧縮され別領域に配置される。そのため、ページサイズ (通常8KB) を上回るサイズの行であっても保存できる。さらに、ユーザがデータ型を追加することもでき、それに対してインデックスを作成することもできる。 利用例として、GIS 用の型を GiST インデックスで検索可能な PostGIS プロジェクトがある。ユーザ定義オブジェクト[編集]ユーザはほとんどのデータベース・オブジェクトを追加できる。データ型 (TYPE) と データの定義域 (DOMAIN)関数 (FUNCTION) と集約 (AGGREGATE)演算子 (OPERATOR)型変換 (CAST)文字コード変換 (CONVERSION)手続き言語 (LANGUAGE)全文検索の設定 (TEXT SEARCH CONFIGURATION)インデックス・アクセス・メソッドバキューム[編集]バキューム (VACUUM) とは、追記型アーキテクチャにおける不要領域を回収し、再利用またはOSに返却する処理である。 なお、バージョン8.3からはHeap-Only Tuples (HOT) が採用され、インデックスの変更を伴わない更新については、削除された行を直ちに再利用することが可能となり、バキュームの必要な頻度は下がった。PostgreSQLは、MVCCの実現のため、追記型のアーキテクチャを採用している。 データを削除する際は実際のレコードは削除せず、該当行に削除マークを付けるのみである。 更新の際も内部的には削除と挿入を同時に行っている。 そのため、更新・削除が繰り返されるテーブルにおいては、たとえ理論的な行数が変わらなくとも、更新・運用を重ねるごとに物理的なファイルサイズが増加する。肥大化によるパフォーマンスの劣化を回避するため、次節に述べるバキューム作業を定期的に行う必要がある。各バージョンによって以下の差異がある。7.1 以前データベースファイル内の未使用領域を解放しOSに返却する処理のみをサポートする。このVACUUMでは、処理中のテーブルに対して排他ロックが獲得されるため、VACUUMの間は対象テーブルへのアクセスがブロックされる。システムの規模やテーブルの行数にもよるが、本バージョンにおいてシステムの停止を伴わない運用は困難であった。7.2以前の動作を FULL 方式 (VACUUM FULL) とし、新たにコンカレント方式 (VACUUM) が実装された。現在、単にバキュームと言った場合、後者のコンカレントバキュームを指す。コンカレントバキュームでは、テーブルの排他ロックを伴わずに不要領域の回収を行う。不要領域に対して再利用可能フラグを付けるのみの処理となるため、コンカレントバキュームを行っても基本的にデータベースの物理的なサイズは縮小しない。しかし、以降の更新・挿入において、このとき回収した領域が優先的に使用され、更新・削除によるファイルサイズの肥大を防止できる。7.3インデックスもコンカレントバキュームの対象になり、肥大化から回復させるための定期的にインデックスを再編成 (REINDEX) する必要が無くなった。これによりデータベース・オブジェクトの排他ロックを要するメンテナンスが不要になり、無停止での運用が可能になった。7.4自動的にバキュームを行う contrib/pg_autovacuum モジュールが提供された。autovacuum はシステムを監視し、INSERT/UPDATE/DELETE の回数などの統計情報を利用して、適切なタイミングで適切なテーブルのみに対してバキュームを行う。このため、高度な知識を要すことなく、不要領域の増加を十分に抑えることが可能となった。なお、自動バキューム処理の際に参照される統計情報の記録はデフォルトでオフとなっているため、本機能を利用する際は統計情報の記録オプションもオンにする必要がある。8.0バキュームは多くのI/Oが必要なため、負荷の高い処理である。バキューム実行中のシステムの全体の性能悪化を防ぐため、バキュームを行う速度を制限する機能が追加された。ただし、バキューム自体の処理時間はその分多く要する。8.1contribより提供されていた自動バキューム (autovacuum) 機能が本体に統合された。不要領域の監視が効率化され、コマンドで発行した VACUUM との連携が可能になった。8.2トランザクションIDの周回がテーブル単位で管理されるようになり、定期的にデータベース単位でバキュームを行う必要が無くなった。テーブル単位のバキュームのみが必要である。また複数のバキュームを並列して実行した際の回収効率が向上した。8.3自動バキューム機能が標準で有効とされ、複数のテーブルに並列してバキュームを行うようになった。加えて Heap-Only Tuplesの採用により、バキューム自体の必要性が低減した。8.4Visibility Map で処理が必要なページを追跡するようになり、バキュームが高速化された。また空き領域のあるページを管理する Free Space Map のメモリ管理が自動化された。9.0VACUUM FULL が CLUSTER と類似の処理に変更され、高速化された。パーティショニング[編集]テーブル・パーティショニングは継承を用いて実現する。 これは、Oracle Database 7 のパーティション・ビューに近い実装である。テーブルを作成する際、他テーブルを���親」テーブルとして指定し、継承関係を定義できる。 「子」テーブルに挿入された行は、親テーブルを参照した際にも取得される。 親テーブルに対する列の追加やCHECK制約の定義は自動的に子テーブルにも反映されるが、外部キーや一意性制約は継承をサポートしていない。パーティショニングされたテーブルへは親テーブルを通してアクセスする。 SELECT, UPDATE, DELETE 文は子テーブルを含むよう展開されるが、クエリの条件が CHECK 制約に適合しない子テーブルは設定により自動的に除外することもできるため効率よく処理できる。INSERT については子テーブルを直接指定するか、親テーブルにトリガを作成することで挿入先を指示する必要がある。全文検索[編集]LIKE 述語と正規表現による文字列検索のほか、全文検索の機能を持つ。バージョン 8.3 以降は組み込みで、それ以前のバージョンでは contrib/tsearch2 として提供されている。この全文検索では文字列から単語を抽出し、転置テーブル (GIN) または単語空間を多次元木 (GiST) とするインデックスを作成できる。SQL/MM の全文検索とは異なり、「@@」演算子を使用する独自の文法で検索を行う。SELECT * FROM テーブル WHERE to_tsvector(文字列カラム) @@ to_tsquery('検索クエリ')標準では日本語の文字列から単語を抽出するパーサを持たないが、外部拡張である textsearch-ja を使用することで形態素解析による検索が可能となる。また、標準の全文検索以外にも、Ludia, textsearch_senna (Senna を使用), pgestraier (Hyper Estraier), pgRast (Rast) などが外部拡張として存在する。レプリケーション[編集]PostgreSQL 9.0 より、組み込みのバイナリ・レプリケーションをサポートする。[4] トランザクションログを転送し、全てのデータベース・ファイルの変更をコミット後に他のサーバへ非同期に転送する。 単一マスタと複数スレーブを構成でき、スレーブは参照の問い合わせを受け付ける。 参照処理を複数のノードで負荷分散するスケールアウトが可能である。その他の特徴[編集]副問合せ (サブクエリ)結合 (自然結合, 左外結合, 右外結合, 完全外結合)制約 (外部キー, 一意性制約, CHECK制約)トランザクション / サブトランザクション (SAVEPOINT) / 2相コミットオンライン・バックアップ (論理 / 物理)バックアップ直後からデータ障害直前までの任意の時点への復旧 (en:Point-in-time recovery)SSLでの接続表領域性能[編集]CPU スケーラビリティ[編集]バージョン 8.1 以降 CPU スケーラビリティは大幅に改善された。 以降、改善を積み重ね、中規模のハードウェアであればスケーラビリティを十分に確保できるRDBMSとなっている。なお、バージョン 9.2 では、少なくとも64コアのサーバマシン上でCPUスケールすることが確認されている。[3]7.4 以前スケーラビリティはページ置換アルゴリズムとして採用されていた LRU により抑制されていた。ページを参照するたびにバッファ・プール全体を排他ロックしていたため、スケーラビリティは低かった。SMP 構成で 4CPU 程度が限界だった。8.0LRU に代わり ARC が採用された（ただし、特許侵害の回避のため途中で 2Q に変更された[4]）。ARC によりキャッシュヒット率は向上したものの、排他制御にオーバーヘッドが生じた。また、サブトランザクションをサポートするため追加された排他制御も新たなロック競合を生んだ。スケーラビリティは以前のバージョンと比較してむしろ低下しており、2CPU 程度で頭打ちになった。8.1ページ置換アルゴリズムはクロックに変更され、スケーラビリティが大幅に向上した。ページの参照には共有ロックのみが必要であるため並行してアクセスが可能になった。8CPU 程度が上限となった。[5] [6]8.2ページを管理するハッシュテーブルのロックが16個に分割され、共有ロックの実装に使用されるスピンロックへのアクセスが分散された。他にスピンロックの実装やサブトランザクションの排他制御が改良され、16CPU までのスケーラビリティが確認されている。[7]更新処理[編集]過去のバージョンの PostgreSQL は他の関係データベース管理システム (RDBMS) と比較して更新処理が遅いと言われていた。追記型アーキテクチャが採用されており、更新処理は削除と挿入の組み合わせとして実現されていた。特に挿入の際にインデックスのキーを追加する必要がある点で性能差が生じていた。しかし、バージョン 8.3 にて Heap-Only Tuples (HOT) と呼ばれる機能が採用され、インデックスのキーとなっている列の値に変更が無い場合にはインデックスの更新を回避できるようになった。HOT により約2倍のスループット向上が確認されている。[8]ベンチマーク[編集]業界標準の規格に則ったベンチマーク結果として 2007年8月の サン・マイクロシステムズ (Sun) による報告がある。以下のハードウェアを使用し、813.73 SPECjAppServer2004 JOPS@Standard であった。[9]PostgreSQL 8.2.4Sun Java System Application Server 9.1 (商用版 GlassFish)Solaris 10en:Sun Fire T2000 (UltraSPARC T1 1.2GHz : 4スレッド × 8コア × 1個)周辺ツール[編集]管理ツール[編集]PostgreSQL専用もしくは各種データベース汎用のデータベース接続クライアントを利用して管理できる。psql[編集]psql は PostgreSQL 付属のコマンドライン・プログラムである。 SQL を直接入力またはファイルから読み込んで実行するほか、スキーマ情報の表示などのメタコマンドを持つ。 また、SQL 構文やテーブル名などをタブキーにより入力補完できる。pgAdmin[編集]pgAdmin は GUI の管理インタフェースである。 Artistic License で配布される オープンソースソフトウェア (OSS) である。 多くのプラットフォームで動作し、日本語を含む多くの言語が利用できる。 また、専用の SQL エディタは psql と同様の入力補完機能を持つ。 Microsoft SQL Server Management Studio と似たインタフェースでデータベースを操作できる。phpPgAdmin[編集]phpPgAdminはウェブベースの管理ツールである。PHPで作られており GPL で配布されている。名称はphpMyAdminと似ているが、製品同士の関連性は無く、操作性はかなり異なる。その他[編集]Webmin (OSS)Navicat PostgreSQL (商用)SQLMaestro (商用)Database Master (商用)レプリケーション・アドオン[編集]PostgreSQL はバージョン 9.0 よりレプリケーションを標準でサポートするが、サードパーティー製のオプション・ソフトウェアも利用できる。各種レプリケーションソフトウェアの概要名前方式開発元特徴Slony-I非同期型マスタスレーブJan Wieckバージョンアップやバックアップにも利用できる。Mammoth Replicator非同期型マスタスレーブCommand Prompt, Inc.BSDライセンス。Londiste非同期型マスタスレーブSkype堅牢性と扱いの容易さを目標とするツール。Python製。Bucardo非同期型マルチマスタGreg Sabino MullaneBSDライセンス。PGCluster同期型マルチマスタ三谷篤ロードバランサ機能を備える。Postgres-R同期型マルチマスタMarkus Wanner継続して開発中。Cybercluster同期型マルチマスタCybertecBSDライセンス。pgpool-II同期型プロキシサーバSRA OSS Inc.フェイルオーバー機能を備える。Sequoia同期型プロキシサーバ／ドライバContinuent Inc.他DBMSにも接続できる。PostgresForest同期型プロキシドライバNTTデータJDBCラッパ。Fermion同期型マルチマスタ株式会社Murakumo検索および更新処理の負荷分散、自動フェイルオーバー機能、マルチキャストを用いたノードの自動追加処理機能を備える。接続インタフェース[編集]PostgreSQL はクライアントサーバモデルであり、データベースへの接続は主に TCP/IP ポート番号 5432 を用いて通信を行う。通信プロトコルは「フロントエンド/バックエンドプロトコル[5]」として公開されている。各プログラミング言語ごとの接続インタフェース言語名前ライセンス開発元ClibpqBSD本体同梱psqlODBCLGPLhttp://psqlodbc.projects.postgresql.org/ODBCngGPLhttps://projects.commandprompt.com/public/odbcng/C (埋め込みSQL)ecpgBSD本体同梱C++libpqxxBSDhttp://pqxx.org/development/libpqxx/JavaJDBC TYPE4BSDhttp://jdbc.postgresql.org/.NET (C#, VB)NpgsqlBSDhttp://npgsql.projects.postgresql.org/dotConnect for PostgreSQLhttp://www.devart.com/dotconnect/postgresql/OleDBPgOleDbLGPLhttp://pgfoundry.org/projects/oledb/PerlDBD::PgArtistic, GPLhttp://search.cpan.org/dist/DBD-Pg/Pythonpy-postgresqlBSDhttp://python.projects.postgresql.org/PyGreSQLBSDhttp://www.pygresql.org/psycopg2GPLhttp://www.initd.org/pg8000BSDhttp://pybrary.net/pg8000/PHPphp_pgsqlPHP Licensehttp://jp2.php.net/pgsqlRubyruby-pgRuby Licensehttp://rubyforge.org/projects/ruby-pg/歴史[編集]マイケル・ストーンブレーカーは、自分が開発を主導した関係データベース管理システム (RDBMS) であるIngres の商業化事業を一段落させると、カリフォルニア大学バークリー校 (UCB) に戻り、同校で新たなプロジェクトを開始した。 プロジェクトの名称は Postgres と名づけられた。 このプロジェクト名称は、Ingres の後継を意味する Post-Ingres に由来している。 Postgresプロジェクトは、関係モデルを使ったこれまでの既存のデータベース管理システムの限界に対処することを目的として、開始された。 最も重要な課題は、これまでのDBMSではユーザが自分で新たな定義域 (ドメイン、型) を既存の単純な定義域をもとにして定義できない点であった。 Postgresでは型 (定義域) を完全にサポートするために必要な最小限の機能だけを導入した。 Postgres ではデータベースが関係を「理解」すると言われ、「規則」に従って自然な方法で関連する関係 (リレーション、表、テーブル) から情報を得ることができた。 ユーザ自身が型を定義する機能に加えて、関連を完全に記述できる機能も備えていた。 プロジェクトは他にも、追記型メディア (光ディスクなど) への対応、大容量記憶装置への対応、推論、オブジェクト指向型データモデルなどを、取り入れた。 実装においては、データベースとアプリケーションソフトウェアの間の新たなインタフェースを実験的に導入した。プロジェクトチームは、1986年からPostgresシステムの基盤を説明した多数の論文を公表した。 1988年、Postgres のプロトタイプバージョンを公開した。 1989年6月、少数のユーザに対してPostgresバージョン1を公開した。 1990年10月、ルールシステム (RULE) を実装し直したバージョン2を公開した。 1991年、バージョン3を公開した。 バージョン3では、ルールシステムが再度実装し直され、複数の記憶装置を管理する機構が追加され、クエリエンジンが改良された。 1993年には、非常に多くのユーザが、プロジェクトに対して、サポートと追加機能を要望して、圧倒させるほどの状態となっていた。 1993年、主として雑然とした部分をきれいにしたことを内容とするバージョン4.2が公開された。 バージョン4.2が公開された後、Postgres プロジェクトは終了した。 Postgres は広く使われたが、保守はユーザに任されていた。マイケル・ストーンブレーカーと Paula Hawthorn は、Postgresを商業化するために、Illustra Information Technologies 社を創業して、Illustraの製品名で開発・販売した。その技術は IBM Informix Dynamic Server (IDS) に導入されている。一方、オープンソースの世界のソフトウェア開発者たちは、Postgres のコピーを入手してシステムのさらなる開発を進めることができた。 なぜならカリフォルニア大学バークリー校 (UCB) は、Postgres をオープンソースライセンスであるBSDライセンスのもとで公開していたからである。 1994年に、カリフォルニア大学バークリー校 (UCB) の大学院生であった Andrew Yu と Jolly Chen は、システムの問い合わせ言語のインタプリタを、Ingres を基にした QUEL のインタプリタから、SQL のインタプリタに置き換える作業を行った。 SQLインタプリタを備えたこのシステムは、Postgres95 と呼ばれた。 Postgres95 のソースコードは、ワールドワイドウェブに公開された。1996年7月に Hub.Org Networking Services の Marc Fournier は、大学外の組織としては最初に、開発用サーバをオープンソースソフトウェア開発のために活動する人々に、提供した。 Postgres95プロジェクトは、Bruce Momjian と Vadim B. Mikheev とともに、カリフォルニア大学バークリー校 (UCB) に由来するソースコードを堅牢にする作業を始めた。 1996年8月1日に、Postgres95の最初のオープンソースのバージョンが公開された。1996年に Postgres95 プロジェクトは、プロジェクトの名称を、SQL のサポートをしているという意味をこめて PostgreSQLに変更した。 1997年1月に PostgreSQL プロジェクトとしての最初のバージョンである、PostgreSQL バージョン 6.0 が公開された。 このときから、インターネットを通じて世界中のデータベース開発者のグループがPostgreSQLの開発に参加し、共同作業によるプロジェクトをうまく調整する体制ができあがった。1999年7月23日、日本PostgreSQLユーザ会が設立し、任意団体として活動を開始した。[6]2001年以降には PostgreSQL を商用サポートする会社が現れた。2001年 Command Prompt, Inc. (Mammoth Replicator; レプリケーション)2003年 SRAOSS (PowerGres, PowerGRES Plus)PowerGRES Plusは富士通とSRAOSSが開発したRDBMSであり、SRAOSSがPostgreSQLより開発した商用RDB『PowerGres』をベースとして、ストレージ管理部分に富士通『Symfoware Server』のものを移植している。2005年 EnterpriseDB 社 (Postgres Plus; Oracle との互換性向上)2005年 Greenplum 社 (BizGres; データウェアハウスやBI向け)2006年2月1日、日本PostgreSQLユーザ会は NPO として再編成された。2011年7月 オープンソースデータベース技術者認定試験(OSS-DB Exam)において基準のRDBMSとして採用された。バージョン履歴[編集]PostgreSQLのバージョンは「x.y.z」(x、y、zはそれぞれ整数) で表現される。「x.y」の部分がメジャーバージョン、「z」がマイナーバージョンである[10]。1986年 - カリフォルニア大学バークレー校 (UCB) でマイケル・ストーンブレーカーがPOSTGRESプロジェクトを発足1987年 - プロトタイプが完成、翌年のACM-SIGMODコンファレンスで紹介される1989年 - POSTGRES 1 を限定的にリリース1990年 - POSTGRES 2 のリリース。前バージョンの批評をもとにルールシステムが再設計された。1991年 - POSTGRES 3 のリリース。複数ストレージの管理機構追加等1993年 - POSTGRES 4.2 をもってカリフォルニア大学バークレー校におけるPOSTGRESプロジェクトが終了ver.リリース日追加機能0.011995-05-01POSTGRESのソースコードを元にした Postgres95 のリリース1.01995-09-05SQL LIKE構文などを実装した Postgres95 の正式リリース6.01997-01-29PostgreSQL と名称を変え、POSTGRESプロジェクトの連番に戻された6.11997-06-086.21997-10-026.31998-03-01副問い合わせ, PL/Tcl6.41998-10-30PL/pgSQL, マルチバイト文字列サポート, ビュー6.51999-06-09MVCC, 一時表, CASE, INTERSECT, EXCEPT7.02000-05-08外部キー制約7.12001-04-13WAL, TOAST, OUTER JOIN7.22002-02-04コンカレントVACUUM, PL/Python7.32002-11-27スキーマ, ドメイン, PREPARE7.42003-11-17IPv6, information_schema8.02005-01-19Microsoft Windows対応, SAVEPOINT, PITR, 表領域 [11]8.12005-11-082相コミット, ROLE, 行共有ロック, テーブル・パーティショニング [12]8.22006-12-05ウォームスタンバイ, GIN [13]8.32008-02-04更新処理性能の向上, XMLデータ型, 全文検索, JIS X 0213, ENUM型, UUID型 [14]8.42009-07-01再帰クエリ, ウィンドウ関数, 列単位のアクセス制御, SQLと関数の性能解析機能 [15]9.02010-09-20レプリケーション, 一括権限変更, 匿名プロシージャ, 64bit Windows サポート, 移動平均, 列/条件トリガ, 一意性制約の遅延, 排他制約 [16]9.12011-09-12同期レプリケーション, 外部テーブル, パッケージ管理, UNLOGGEDテーブル, 更新可能なWITH句, 近傍検索, SELinux権限制御[17]9.22012-09-10インデックスオンリースキャン, カスケードレプリケーション, JSON型, 範囲型[18]受賞[編集]2008年の時点で、PostgreSQL は以下の受賞をしている。[7]1999 LinuxWorld Editor's Choice Award for Best Database2000 Linux Journal Editors' Choice Awards for Best Database2002 Linux New Media Editors Choice Award for Best Database2003 Linux Journal Editors' Choice Awards for Best Database2004 Linux New Media Award For Best Database2004 Linux Journal Editors' Choice Awards for Best Database2004 ArsTechnica Best Server Application Award2005 Linux Journal Editors' Choice Awards for Best Database2006 Linux Journal Editors' Choice Awards for Best Database2008 Developer.com Product of the Year, Database Tool脚注[編集]^ “PostgreSQL: License”.  PostgreSQL Global Development Group (2010年). 2010年11月3日閲覧。^ マイケル・ストーンブレーカー (1986). “Object management in POSTGRES using procedures”. International Workshop on Object-Oriented Database Systems. IEEE Computer Society Press. ISBN 0-8186-0734-3. ^ Robert Haas (2012年4月3日). “Did I Say 32 Cores? How about 64?”. 2012年11月3日閲覧。^ PostgreSQL 文書, \"リリース8.0.2\"^ OSS iPedia, \"DBT-1によるPostgreSQL8.1の32ビットマシン(IA32)でのCPUスケーラビリティに関する考察(チューニング有り) \"^ OSS iPedia, \"DBT-1によるパッチを適用したPostgreSQL8.1.2の32ビットマシン(IA32)でのCPUスケーラビリティに関する考察(チューニング有り) \"^ Doug Tolbert (Unisys), \"Scaling PostgreSQL on SMP Architectures -- An Update\" (PGCon 2007)^ 【PostgreSQLウォッチ】第35回 性能を大幅に改善するPostgreSQL 8.3の新機能「HOT」とは^ “SPECjAppServer2004 Result”.  SPEC (2007年7月4日). 2009年1月2日閲覧。^ 鈴木啓修 「PostgreSQLと高可用性システム/大規模システム PostgreSQLの進化の足跡」『WEB+DB PRESS Vol.48』 技術評論社、2009年1月25日、初版第1刷、104ページ。^ “リリースノート 8.0”. PostgreSQL 文書 (2005年1月19日). 2009年8月29日閲覧。^ “リリースノート 8.1”. PostgreSQL 文書 (2005年11月8日). 2009年8月29日閲覧。^ “リリースノート 8.2”. PostgreSQL 文書 (2006年12月5日). 2009年8月29日閲覧。^ “リリースノート 8.3”. PostgreSQL 文書 (2008年2月4日). 2009年8月29日閲覧。^ “リリースノート 8.4”. PostgreSQL 文書 (2009年7月1日). 2009年8月29日閲覧。^ “リリースノート 9.0”. PostgreSQL 文書 (2010年9月20日). 2010年10月6日閲覧。^ “リリースノート 9.1”. PostgreSQL 文書 (2011年9月12日). 2011年11月12日閲覧。^ “リリースノート 9.2”. PostgreSQL 文書 (2012年9月10日). 2012年11月3日閲覧。参考書籍[編集]笠原辰仁, 北川俊広, 坂井潔, 坂本昌彦, 佐藤友章 『PostgreSQL徹底入門 第3版』 翔泳社、2011年。ISBN 978-4798123356。高塚遙, 松田亮一, 田中ナルミ, 吉岡肇 『新標準PostgreSQL』 ソフトバンククリエイティブ、2009年。ISBN 978-4797354713。石井達夫 『今すぐ導入!PHP×PostgreSQLで作る最強Webシステム』 技術評論社、2009年。ISBN 978-4774138930。浅羽義之, 石田朗雄, 稲葉香理, 永安悟史 『PostgreSQL徹底入門 第2版』 翔泳社、2008年。ISBN 978-4798115054。鈴木啓修 『PostgreSQL完全機能リファレンス』 秀和システム、2006年。ISBN 978-4798014951。三木秀治 『PHP & PostgreSQLで作る実用Webシステム』 毎日コミュニケーションズ、2006年。ISBN 978-4839921194。外部リンク[編集]ウィキメディア・コモンズには、PostgreSQLに関連するカテゴリがあります。ウィキブックスにPostgreSQL関連の解説書・教科書があります。PostgreSQL本家サイト (一次配布先)PostgreSQL WikiPgFoundry (関連プロジェクト)NPO法人 日本PostgreSQLユーザ会PostgreSQL日本語ドキュメントLet's Postgres (JPUGポータル)PostgreSQL Information Page 石井達夫によるPostgreSQLの紹介ページPostgreSQL Notes for Japanese くわむらじゅんによるPostgreSQLの紹介ページPlanet PostgreSQL (Blogの集約)ポータル FLOSS表・話・編・歴データベース管理システムデータモデル - 関係モデル - データベース設計 - 正規化 - 参照整合性 - 関係代数 - 関係論理 - データベース管理システム - 関係データベース管理システム - オブジェクト関係データベース - 分散データベース - トランザクション処理概念データベース - ACID - CRUD - NULL - 候補キー - 外部キー - 主キー - スーパーキー - 代理キーオブジェクト関係 (表) - ビュー - トランザクション - ログ - トリガ - 索引 - ストアドプロシージャ - カーソル - 分割SQLSELECT - INSERT - UPDATE - MERGE - DELETE - JOIN - CREATE - DROP - COMMIT - ROLLBACK - TRUNCATE - ALTER - WHERE - SAVEPOINT構成要素並行性制御 - データ辞書 - JDBC - ODBC - データベース言語 - 問い合わせ言語 - クエリ最適化 - クエリ実行計画データベース製品: 関係データベース管理システムの比較 - データベース接続クライアント「http://ja.wikipedia.org/w/index.php?title=PostgreSQL&oldid=48406652」から取得 カテゴリ: PostgreSQLデータベース管理システムオープンソース\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f15d"},"body":"MongoDB出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目の参考文献は、一次資料や記事主題の関係者による情報源に頼っています。信頼できる第三者情報源とされる出典の追加が求められています。（2013年2月）MongoDB開発元10gen初版2009最新版2.4.1 / 2013年3月23日（3か月前） （2013-03-23）プログラミング言語C++対応OSクロスプラットフォーム対応言語英語種別ドキュメント指向データベースライセンスGNU AGPL v3.0 (ドライバはApache license）公式サイトhttp://www.mongodb.org/テンプレートを表示MongoDB は、オープンソースのドキュメント指向データベースである。C++言語で記述されており、開発とサポートは10genによって行なわれている。[1] MongoDBはRDBMSではなく、いわゆるNoSQLと呼ばれるデータベースに分類されるものである。RDBMSのようにレコードをテーブルに格納するのではなく、「ドキュメント」と呼ばれる構造的データをJSONライクな形式で表現し、そのドキュメントの集合を「コレクション」として管理する（このデータの物理的な格納はBSONと呼ばれるJSONのバイナリ版といえる形式で行われる）。コレクションはRDBMSのような固定的なスキーマを持たない。ドキュメントには複雑な階層構造を持たせることもでき、それらの構造に含まれるフィールドを指定したクエリやインデクス生成も簡単な指定によって行える。RDBMSのように高度な結合操作を効率的に行うことはできないが、データの追加・更新・削除・クエリは高速に行うことができる。また、アプリケーションは自身の構造やデータ型に合った自然な形でデータを格納することができるため、扱うデータの特性によっては、RDBMSよりも容易かつ迅速に開発を行うことができる可能性がある。Mongoという名前は、英語で「ばかでかい」を意味する \"humongous\" に由来する。MongoDBの開発は10genによって2007年10月から開始され、最初の公開リリースは2009年2月に行われた。[2]目次1 特徴1.1 アドホックなクエリ1.2 ネストされたフィールドのクエリ1.3 インデックス1.4 集約1.5 ファイルストレージ1.6 サーバサイドJavaScript実行1.7 Cappedコレクション2 デプロイ2.1 言語サポート2.2 レプリケーション2.2.1 マスタ/スレーブ2.2.2 レプリカセット2.3 Sharding3 管理とグラフィカルフロントエンド3.1 公式ツール3.2 監視3.3 GUI4 ライセンスとサポート5 批判6 有名な利用者7 関連項目8 References9 外部リンク特徴[編集]特徴の一部:整合的なUTF-8エンコーディング。非UTF-8データも、特殊なバイナリデータ型によって保存・取得できる。クロスプラットフォームのサポート: バイナリは、Windows, Linux, OS X, Solarisで利用できる。MongoDBはほとんどのリトルエンディアンシステムで利用できる。豊富なデータ型: 日付、正規表現、バイナリ型、コード、など（すべてのBSONデータ型）クエリ結果にカーソルが使えるなどアドホックなクエリ[編集]MongoDBでは、任意のフィールドを好きな時にクエリできる。フィールドの完全一致に加えて、範囲をもつクエリ、正規表現検索など様々な種類のクエリが使える。ユーザ定義のJavaScript関数を述語として使うこともできる（関数がtrueを返したときにドキュメントがマッチする）。クエリでは、（全フィールドをとりだす代わりに）指定したフィールドだけを取り出せる。また、ソートを行ったり、結果の数を制限したり、一部をスキップすることもできる。ネストされたフィールドのクエリ[編集]埋め込みオブジェクトおよび配列にも「たどりつく」ことができる。以下のオブジェクトが users コレクションに挿入されているとする：{\"username\" : \"bob\",\"address\" : {\"street\" : \"123 Main Street\",\"city\" : \"Springfield\",\"state\" : \"NY\"}}このドキュメント（およびNYの住所をもつすべてのドキュメント）は、以下のクエリで取得できる:> db.users.find({\"address.state\" : \"NY\"})配列の要素を指定することもできる：> db.food.insert({\"fruit\" : [\"peach\", \"plum\", \"pear\"]})> db.food.find({\"fruit\" : \"pear\"})インデックス[編集]MongoDBは、追加のインデックスをサポートする。インデックスは、単一キー、複合キー、ユニーク/非ユニーク、地理空間インデクス[3]をサポートする。ネストされたフィールドもインデックスできるし、配列型をインデックスすると配列内の各要素がインデックスされる。MongoDBのクエリオプティマイザはクエリの実行時にいくつかのクエリ計画を試し、最速のものを選択する。定期的に再サンプリングを行う。開発者は使用されるインデックスを `explain` 関数で見ることができ、 `hint` 関数で異なるインデックスを参照できる。インデックスはいつでも作成・削除できる。集約[編集]アドホックなクエリに加えて、MongoDBは集約のためのいくつかのツールをサポートしている。これには、SQLのGRUOP BYに似たgroup関数や、MapReduce[4]などがある。ファイルストレージ[編集]MondoDBは、GridFS[5]と呼ばれるプロトコルを実装しており、これを使うことで大きなファイルをデータベースに格納・取得することができる。このファイルストレージ機構はnginx[6]やlighttpd [7]のプラグインからも使用できる。サーバサイドJavaScript実行[編集]JavaScriptはMondoDBにおけるLingua franca(共通語)であり、クエリや集約関数(MapReduce等)で使用したり、データベースに直接送信して実行できる。クエリでのJavaScriptの例:> db.foo.find({$where : function() { return this.x == this.y; }})データベースに送信して実行させるコードの例:> db.eval(function(name) { return \"Hello, \"+name; }, [\"Joe\"])これは \"Hello, Joe\" を返す。JavaScriptの変数はデータベースに格納でき、他のJavaScriptからグローバル変数として利用できる。関数を含むすべての正当なJavaScript型を格納できるため、JavaScriptを「ストアドプロシージャ」として利用できる。Cappedコレクション[編集]MongoDBは、Cappedコレクションと呼ばれる固定サイズのコレクションもサポートしている[8]。Cappedコレクションはサイズ（オプションで要素数も使える）を指定して作成される。capped collectionsは、挿入した順にコレクションを管理する: 指定したサイズに到達したら、古いものから順に削除される。Cappedコレクションでは、tailable cursor[9]と呼ばれる特殊なカーソルを利用できる。このカーソルの名前は `tail -f` に由来し、結果を返し終えてもクローズせずに待機し続けて、それ以降に追加されたドキュメントを返却しつづける。デプロイ[編集]MongoDBはソースファイルからビルドすることもできるが、より一般的にはバイナリパッケージからインストールされる。多くのLinuxパッケージ管理システムはMongoDBのパッケージを含んでいる: CentOSとFedora,[10] DebianとUbuntu,[11] Gentoo[12], Arch Linux。[13] 公式Webサイトから入手することもできる。[14]MongoDBはメモリマップトファイルを用いるため、32-bitシステムではサイズが2GBに制限される。[15] MongoDBのサーバはリトルエンディアンのシステムのみで動作する。ただし、ほとんどのドライバはビッグエンディアンのシステムでも動作する。言語サポート[編集]MongoDBは、以下の言語に公式ドライバを提供している:C言語[16]C++[17]C#[18]Haskell[19]Java[20]JavaScript[21]Lisp[22]Perl[23]PHP[24]Python[25]Ruby[26]Scala[27]非公式のドライバも大量に存在する: C#と.NET,[18] ColdFusion,[28] Delphi,[29] Erlang,[30][31] Factor,[32] Fantom,[33] Go,[34] JVM languages (Clojure, Groovy,[35] Scala, etc.),[36] Lua,[37] node.js,[38] HTTP REST,[39] Ruby,[40] Racket,[41] Smalltalk[42]レプリケーション[編集]MongoDBはマスタ/スレーブのレプリケーションをサポートする。マスタは書き込みと読み込みを実行できる。スレーブは、マスタからデータをコピーして、読み込みとバックアップのために利用できる（書き込みはできない）。MondoDBは、各操作について、最低でも N 個のサーバにレプリケートされることを開発者に保証することができる。マスタ/スレーブ[編集]操作はマスタに対して行われ、スレーブはデータに対するすべての変更をレプリケートする。例: マスタ/スレーブのペアをローカルで起動する:$ mkdir -p ~/dbs/master ~/dbs/slave$ ./mongod--master --port 10000 --dbpath ~/dbs/master$ ./mongod--slave --port 10001 --dbpath ~/dbs/slave --source localhost:10000レプリカセット[編集]レプリカセットはマスタ/スレーブに似ているが、マスタがダウンしたときにスレーブ間で自動投票を行って、スレーブの1つを新たなマスタにする機能を持つ。Sharding[編集]MongoDBは、Sharding[43]というシステムによって水平スケーリングが可能である。これはBigTableやPNUTSのスケーリングモデルに非常に良く似ている。開発者はshardキーを選択し、このキーがデータをどのように分散させるかを決める。データ中のキーを元にデータを分散させるshardが決められる。（一つのshardは1つ以上のスレーブを持つマスタである）アプリケーションはいくつかの操作を行う際に、shardingされたクラスタと対話していることを認識している必要がある。例えば \"findAndModify\" クエリは、shardされたコレクションからクエリをするときにshardキーを含む必要がある。[44] アプリケーションは、`mongos`と呼ばれる特別なルーティングプロセスと対話する。このプロセスは、shardクラスタを単一のMongoDBサーバに見えるようにする。`mongos`プロセスはどのデータがどのshardにあるかを知っており、クライアントのリクエストを適切にルーティングする。すべてのリクエストはこのプロセスを通して流れる: リクエストやレスポンスを転送するだけでなく、必要に応じてマージやソートも行う。 `mongos`プロセスはいくつでも実行できるが、通常は1つのアプリケーションに対して1つが推奨される。管理とグラフィカルフロントエンド[編集]公式ツール[編集]最もパワフルで便利な管理ツールはデータベースシェルの mongo である。このシェルは、データベースの内容を閲覧・挿入・削除・更新する機能を提供すると同時に、レプリケーション情報を取得したり、shadingを設定したり、サーバを停止したり、JavaScriptを実行したりすることができる。mongoは、SpiderMonkeyの上に構築されているため、MondoDBサーバに接続できると同時に、完全なJavaScriptシェルでもある。管理情報にはWebベースのadminインタフェースを通してもアクセスできる。これは、現在のサーバ情報を送信するシンプルなHTMLのWebページである。デフォルトでは、このインタフェースにはデータベースのポートの1000番上のポート (http://localhost:28017) からアクセスできる。--norestオプションによってこの機能を無効化できる。mongostat は、直近の統計情報のシンプルな一覧を表示するコマンドラインツールである。挿入された数、更新された数, 削除された数, クエリの数, 実行されたコマンドの数, データベースがロックされた時間のパーセンテージ、メモリの使用状況などを表示する。mongosniff は、MongoDBのネットワークトラフィックを覗くツールである。監視[編集]MongoDBを監視するためのプラグインが存在する:munin[45]ganglia[46]scout[47]cacti[48]GUI[編集]データの可視化を助けるいくつかのGUIが開発されている:Fang of Mongo[49] - DjangoとjQueryで作られたWebベースのUIFuton4Mongo[50] - CouchDBのFuton WebインタフェースのクローンMongo3[51] - RubyベースのインタフェースMongoHub[52] - MongoDBを管理するためのネイティブなOS XアプリケーションOpricot[53] - PHPで書かれたWebベースのMongoDBシェルDatabase Master - WindowsベースのMongoDB管理ツール。RDBMSもサポートするBI Studio - WindowsベースのMongoDB管理ツール。RDBMSもサポートするRockMongo - PHPベースライセンスとサポート[編集]MongoDBは、GNU Affero General Public Licenseライセンスの下で利用できる。言語ドライバはApache Licenseライセンスの下で利用できる。[54]批判[編集]データの永続性が保証されないという指摘がある[55]。有名な利用者[編集]MTV Networks[56]craigslist[57]Disney Interactive Media Group[58]Wordnik[59]diaspora[60]Shutterfly[61]foursquare[62]bit.ly[63]The New York Times[64]SourceForge[65]Business Insider[66]Etsy[67]CERN LHC[68]Thumbtack[69]AppScale[70]Uber[71]関連項目[編集]ポータル Free softwareドキュメント指向データベースNoSQLCouchDBReferences[編集]^ MongoDB website^ MongoDB Blog - March 2010^ Geospatial indexes^ MapReduce^ GridFS^ NGINX^ lighttpd^ capped collections^ [1]^ CentOS and Fedora^ Debian and Ubuntu,^ Gentoo^ Arch Linux^ official website^ [2]^ C driver^ C++ driver^ a b C# driver^ Haskell driver^ Java driver^ JavaScript driver^ [3]^ Perl driver^ PHP driver^ Python driver^ Ruby driver^ Casbah, the officially supported Scala Driver for MongoDB^ ColdFusion driver^ Delphi^ Emongo Erlang driver^ Erlmongo Erlang driver^ Factor driver^ Fantom driver^ gomongo Go driver^ GMongo^ JVM language center^ LuaMongo^ node.js driver^ REST interface^ rmongo^ [4]^ Smalltalk driver^ sharding^ [5]^ Munin plugin^ Ganglia plugin^ Scout slow-query plugin^ Cacti plugin^ Fang of Mongo^ Futon4Mongo^ Mongo3^ MongoHub^ Opricot^ The AGPL - MongoDB Blog: May 5, 2009^ Broken by Design: MongoDB Fault Tolerance^ “MongoDB Powering MTV's Web Properties” (2011年5月10日). 2011年7月6日閲覧。^ “MongoDB live at craigslist” (2011年5月16日). 2011年7月6日閲覧。^ “Disney Central Services Storage: Leveraging Knowledge and skillsets” (2011年5月24日). 2011年7月6日閲覧。^ “12 Months with MongoDB” (2010年10月25日). 2011年5月24日閲覧。^ “MongoDB - diasporatest.com” (2010年12月23日). 2010年12月23日閲覧。^ “Implementing MongoDB at Shutterfly - Presentation at MongoSF” (2010年4月30日). 2010年6月28日閲覧。^ “MongoDB at foursquare - Presentation at MongoNYC” (2010年5月21日). 2010年6月28日閲覧。^ “bit.ly user history, auto-sharded - Presentation at MongoNYC” (2010年5月21日). 2010年6月28日閲覧。^ Maher, Jacqueline (2010年5月25日). “Building a Better Submission Form”. NYTimes Open Blog. http://open.blogs.nytimes.com/2010/05/25/building-a-better-submission-form/ 2010年6月28日閲覧。 ^ “How Python, TurboGears, and MongoDB are Transforming SourceForge.net”.  PyCon 2010 (2010年2月20日). 2010年6月28日閲覧。^ “How This Web Site Uses MongoDB”.  Business Insider (2010年11月6日). 2010年6月28日閲覧。^ “MongoDB at Etsy”.  Code as Craft: Etsy Developer Blog (2010年5月19日). 2010年6月28日閲覧。 [リンク切れ]^ “Holy Large Hadron Collider, Batman!”.  The MongoDB NoSQL Database Blog (2010年6月3日). 2010年8月3日閲覧。^ “Building Our Own Tracking Engine With MongoDB”.  Thumbtack Blog (2011年5月3日). 2011年5月15日閲覧。^ http://appscale.cs.ucsb.edu/datastores.html#mongodb^ “Node.js Meetup: Distributed Web Architectures ? Curtis Chambers, Uber | JoyentCloud:”. 2011年8月12日閲覧。外部リンク[編集]MongoDB公式ページ「英語」MongoDBドキュメンテーション公式ページ「日本語」MongoDBの薄い本「入門の全訳」この項目は、ソフトウェアに関連した書きかけの項目です。この項目を加筆・訂正などしてくださる協力者を求めています（プロジェクト:コンピュータ/Portal:コンピュータ）。「http://ja.wikipedia.org/w/index.php?title=MongoDB&oldid=47913961」から取得 カテゴリ: NoSQLデータベースオープンソースデータベース管理システムドキュメント指向データベース分散システム隠しカテゴリ: 外部リンクがリンク切れになっている記事/2010年10月内容の精度・確度に欠けている可能性のある記事ソフトウェア関連のスタブ\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f163"},"body":"Hibari (dbms)出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Hibari開発元Hibari developers初版2010年7月最新版v0.1.10 / 2013年2月4日（4か月前） （2013-02-04）プログラミング言語Erlang対応OSクロスプラットフォーム対応言語日本語、英語サポート状況活発種別分散キー・バリューストア、 NoSQLライセンスApache License 2.0公式サイトhttps://github.com/hibari/hibariテンプレートを表示ポータル FLOSSHibari（ひばり）はデータの強い整合性と高可用性を保証するスケールアウト型分散キー・バリューストア。NoSQLデータベースに分類される。東京に本社を置くクラウディアン社（旧ジェミナイ・モバイル・テクノロジーズ）が、モバイル・メッセージングに適したデータベースとして2005年から開発を始め、2010年7月27日にオープンソースソフトウェアとして公開した。[1] [2]　日本の大手Webメールのストレージとして採用された実績があるHibariは漢字で「雲雀」と書き「クラウドの小鳥」を表す。クラウドコンピューティングに適し、SNS（ソーシャルネットワーク）のような、わずか１日でテラバイトもしくはペタバイト規模のデータを生み出すようなサービスで使用できる。目次1 特徴2 クライアントインターフェイス3 外部リンク4 参考文献特徴[編集]Hibariはノード間のデータ複製にチェイン・レプリケーション方式[3][4][5]を採用し、データの持続性や複製されたデータ間の強い整合性を保証する。他の多くの NoSQL と異なり、マイクロトランザクションと呼ばれる限られた範囲のキーに対するアトミックなトランザクションをサポートする。Hibariはデータ操作のレイテンシ（遅延時間）が短く、特にRead操作と200KB前後の大きなバリューの扱いにおいて、他の多くのスケールアウト型 NoSQLよりも高い性能を発揮する[6]。Hibariは一般的なIAサーバー（x86サーバー）だけでなく、ARMアーキテクチャのスケールアウト型サーバーなどでも動作する。サービスの稼働中にサーバーノードを追加することで、処理性能とデータ格納容量をリニアにスケールさせることができ、ある商用サービスでは1つのHibariクラスタで約60台のIAサーバーが用いられている。Hibariクラスタの上限台数ははっきりとしていないが、ノード間の通信帯域がボトルネックになるケースが多い。2013年時点の標準的なサーバーハードウエア構成では、事実上の上限は250台程度と考えられている。Hibariは分散システムに適したプログラミング言語Erlangで書かれており、高負荷時でも高い安定性を誇る。Hibariの各ノードは数年間無停止で稼働できることが実運用で確認されており、ソフトウェアのアップグレードもサービス無停止で行える。またJavaで書かれたNoSQLと異なり、64GB程度の大容量のRAMを搭載したサーバーでも、256MB程度の小容量のRAMを搭載した組み込み向けハードウェアでも良好に動作する。クライアントインターフェイス[編集]HibariはクライアントAPIとして Amazon S3、JSON-RPC、Universal Binary Protocol に対応し、Apache Thrift に対応する予定もある。またプログラミング言語 Erlang からのアクセスにも対応している。Hibariにアクセスできる言語には Java、C言語、C++、Python、Ruby などがある。外部リンク[編集]HibariプロジェクトホームページHibari アプリケーション開発者ガイド講義資料：実機によるRiakとHibariのNOSQLハンズオン参考文献[編集]^ 日経コンピュータ ニュース：ジェミナイ、独自開発キー・バリュー型データストア「Hibari」をオープンソース化^ クラウディアン プレスリリース：Big Dataに最適なデータベース、Hibari(雲雀)のオープンソース化について^ クラウディアン製品情報：Hibari NoSQLデータベース^ Chain Replication for Supporting. High Throughput and Availability（PDF形式）^ Chain Replication in Theory and in Practice（PDF形式）^ Hibari White Paper（PDF形式）「http://ja.wikipedia.org/w/index.php?title=Hibari_(dbms)&oldid=46687164」から取得 カテゴリ: クラウドコンピューティングデータベース管理システムNoSQLデータベース分散処理\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f164"},"body":"Apache Axis2出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache Axis2開発元Apache Software Foundation最新版1.6.2(Java) / 2012年4月17日（14か月前） （2012-04-17）1.6.0(C言語) / 2009年4月20日（4年前） （2009-04-20）プログラミング言語Java、C言語対応OSクロスプラットフォーム種別WebサービスライセンスApache License 2.0公式サイトhttp://ws.apache.org/axis2テンプレートを表示Apache Axis2（アパッチ・アクシス・ツー）は、JavaとXML技術に基づいたWebサービスのフレームワーク。Apacheプロダクトのひとつ。概要[編集]Apache Axis（以下、Axis1）ではWS-ReliableMessagingやWS-Security、WS-AddressingなどのAxis1登場後に制定されたプロトコルへの対処やWSDLなどへの対応が求められていたが、Axis1では柔軟性がないため対応できず放棄された。そして1から書き直されたのがAxis2である。SOAPフレームワークを取り扱うApacheプロダクトとしてはApache SOAPから数えること3代目である。基本的には内部構造が大幅にブラッシュアップされたAxis1の拡張である。外部リンク[編集]Apache Axis2（英語）表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.orgこの「Apache Axis2」はFLOSSに関連した書きかけ項目です。この記事を加筆して下さる協力者を求めています（Portal:FLOSS）。「http://ja.wikipedia.org/w/index.php?title=Apache_Axis2&oldid=46752899」から取得 カテゴリ: Apacheソフトウェア財団JavaXML隠しカテゴリ: FLOSS関連のスタブ項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f165"},"body":"Apache CouchDB出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache CouchDBCouchDB's Futon Administration Interface, User database作者Damien Katz, Jan Lehnardt, Noah Slater, Christopher Lenz, J. Chris Anderson, Paul Davis, Adam Kocoloski, Jason Davies, Benoît Chesneau, Filipe Manana, Robert Newson開発元Apache Software Foundation初版2005最新版1.2.0 / 2012年4月6日（14か月前） （2012-04-06）プログラミング言語Erlang対応OSクロスプラットフォーム対応言語Englishサポート状況Active種別ドキュメント指向データベースライセンスApache License 2.0公式サイトcouchdb.apache.orgテンプレートを表示Apache CouchDB とは、ドキュメント指向のオープンソースデータベース。主に、Erlangで書かれている。NoSQL のグループに属し、複数台にスケールするように設計されている。Apache CouchDB は Couchbase と Cloudant によってサポートされている。機能[編集]ドキュメントストレージACID セマンティックスMap/Reduce ビューとインデックス分散アーキテクチャとレプリケーションREST API結果整合性外部リンク[編集]公式ウェブサイト表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Apache_CouchDB&oldid=46753800」から取得 カテゴリ: NoSQLデータベースデータベース管理システムドキュメント指向データベースApacheソフトウェア財団\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f166"},"body":"宇宙探査機出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この記事は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2012年6月）土星探査機カッシーニ宇宙探査機（うちゅうたんさき、英語：space probe）は、地球以外の天体を探査する目的で宇宙に放出された無人の人工物体（探査機）である。宇宙に存在する、惑星、衛星、太陽、彗星、小惑星などの探査を目的とする。現在は技術の限界から太陽系内の探査にとどまっているが、遠い将来は太陽系の外へ探査機を飛ばすことを考える科学者もいる。目次1 宇宙探査の歴史1.1 最も近い地球外天体「月」1.2 内太陽系の探査1.3 外太陽系の探査1.4 彗星探査1.5 火星への再挑戦1.6 小惑星探査1.7 再び月へ1.8 国際協力体制2 探査機・探査計画の一覧2.1 アメリカ合衆国2.2 ソビエト連邦 / ロシア2.3 日本2.4 欧州宇宙機関2.5 中国2.6 インド2.7 国際共同ミッション3 脚注4 関連項目5 外部リンク宇宙探査の歴史[編集]人類の宇宙探査は人類にとって最も身近で実際に距離も最も近い「月」から始まった。人類の月への興味は古くから物語（『竹取物語』など）として語られており、産業革命以降の急速な技術発展が人類の知的好奇心を満たすべく宇宙探査機を直接地球外の天体の周囲（もしくは天体表面）に送って調べることができるようになったのである。最も近い地球外天体「月」[編集]ルナ16号詳細は「月探査」を参照人類史上初めて地球以外の天体を目指した探査機は、ソビエト連邦のルナ1号である。ルナ1号は月にはじめて接近し、本来は衝突させる計画であったが軌道を外れて月をかすめるコースを取り、そのまま太陽をまわる人工惑星となった。次のルナ2号は人類史上初めて月面に到達、衝突に成功した。さらにルナ9号で月面への軟着陸を世界ではじめて成功。着陸したのみで研究成果は少なかったが、初めて他の天体に着陸を果たした功績は大きい。さらにルナシリーズは続き、ルナ16号は月の土壌サンプルを無人探査機で持ち帰り、ルナ17号は無人月面車（ルノホート）を走らせ、さまざまな調査を行った。一方、冷戦の中で宇宙技術がソ連に遅れる形となったアメリカ合衆国は激しく対抗し、宇宙開発競争が行われる事となった。アメリカはパイオニア計画・レインジャー計画を皮切りに、サーベイヤー1号を月面に軟着陸させ、次々に無人探査機を送り込んだ。1960年代に有人のアポロ計画に挑み、アポロ11号によって遂に人類を月面に送り込んだ。失敗した13号を除いて17号まで延べ12人が月面を歩いた。ソ連も有人月旅行計画があったものの、大型ロケットの開発失敗によって頓挫した。内太陽系の探査[編集]マリナー2号内太陽系の宇宙探査も、月面探査競争と並行し、主に米ソを中心として行われた。アメリカはマリナー探査機を用い、金星・水星・火星に接近して写真撮影を行った。また火星にはバイキング1号・2号を連続で着陸に成功させ、火星地表の写真を撮影したほか、さまざまな調査を行った。一方のソ連は、金星にベネラ探査機を送り込んで軟着陸に成功し、初めて金星表面の写真撮影に成功した。また、金星の温度・気圧などを測定し、その環境を世界に知らしめた。同時期に火星にはマルス3号を送り込んで軟着陸に成功したが、大規模な砂嵐の真っ只中に着陸したため、20秒後に信号が途絶え、失敗した。1990年代後半に入って、日本や欧州なども惑星探査に本格的に進出した。日本の宇宙航空研究開発機構 (JAXA) は火星探査機（のぞみ）を送るものの、地球スイングバイで軌道変更に失敗し、最終的に火星周回軌道への投入を断念、人工惑星となった。2010年6月には金星探査機 (あかつき) を打ち上げ、同年12月に金星周回軌道に投入する予定であったが失敗した。また、欧州宇宙機関 (ESA) と共同で水星探査機（ベピ・コロンボ）を送る予定となっている。欧州も火星探査機を投入している。マーズ・エクスプレスは2003年末に火星周回軌道に到達し数々の成果を挙げたが、火星表面への着陸機投入には失敗した。外太陽系の探査[編集]ボイジャー火星より遠くの宇宙探査は、もはやアメリカの独擅場となった。パイオニア10号・11号とボイジャー1号は立て続けに木星と土星に接近し、写真撮影を行った。そして次のボイジャー2号は、木星・土星を撮影・調査した後、天王星・海王星をはじめて探査した[1]。これらの調査により、木星・天王星・海王星にも土星同様に「環」が確認されたほか、ボイジャーは数々の衛星を撮影した。これら4機の探査機には、いずれ他の太陽系に届くとの希望を込め、異星人あてのメッセージが積み込まれている。できる限り地球独自の習慣によらず科学的に来歴を明らかにする工夫が凝らされているが、パイオニア10・11号に積載されたメッセージ板に刻まれた男女の裸体のイラストをも含めて、これらの異星人あてのメッセージをめぐっては、様々な議論が交わされた。ボイジャー計画が終了すると、アメリカは再度木星を目指し、ガリレオをスペースシャトルから発射した。木星に到達したガリレオは、木星大気中に探査機を投下し、大気圧で押しつぶされるまでの数十分間に渡って、地球にデータを送信した。一方ソ連の消滅によって、宇宙事業全てを引き継いだロシアは宇宙探査を行う余裕はなくなっている。アメリカはさらに欧州宇宙機関と共同でカッシーニを打ち上げ、土星に接近した。さらに衛星タイタンに探査機ホイヘンス・プローブを投下し、着陸に成功した。ボイジャーが唯一探査を行わなかった冥王星や、さらにその外側に広がるエッジワース・カイパーベルトに向けても、2006年にニュー・ホライズンズを打ち上げ、冥王星へは2015年の到達を予定している（なお、冥王星が惑星から準惑星に変更されたのは打ち上げから約半年後のことである）。20世紀終盤まではアメリカの独擅場だった外惑星探査にも、1997年、すでに豊富な実績のあるアメリカとの国際共同という形であるが、土星探査機のカッシーニによって欧州宇宙機関の本格的な外惑星探査への参入が始まり、遅れて同様に、日本の宇宙航空研究開発機構も、アメリカ、欧州との3機関国際共同プロジェクトとして、2020年頃の木星圏探査機ラプラスによって、外惑星探査に参入する予定[2][3]である。彗星探査[編集]さきがけ詳細は「彗星#彗星探査機による観測」を参照1986年にハレー彗星が地球に接近することを契機に、欧州宇宙機関（ジオット）や日本の宇宙科学研究所（さきがけ、すいせい）が本格的な宇宙探査機を送り込むようになり、ソ連も彗星探査機（ベガ1号・2号）を送り込むことになったが、アメリカはハレー彗星専用の探査機は送り込まずに欧州宇宙機関と共同で運用していた太陽系探査機（アイス）をハレー彗星に接近する軌道にのせ、3カ国1地域による共同観測が行われた。これらのハレー彗星探査機群はハレー艦隊と呼ばれた。その後アメリカはディープ・インパクトやスターダストなどを彗星に送り込み、それらの成果も挙がりつつある。火星への再挑戦[編集]オポチュニティ詳細は「火星探査」および「火星探査機」を参照1990年代後半から、アメリカは再び火星探査を開始した。まず1997年にマーズ・パスファインダーが着陸に成功、地上のデジタル写真撮影のほか、岩の成分分析を行った。1998年にマーズ・グローバル・サーベイヤーが火星周回軌道に乗って詳細な地図作りを開始した。1999年到着予定のマーズ・サーベイヤー99は軌道投入に失敗したが、2004年にスピリットとオポチュニティの2機が着陸に成功、火星に海があったことを示した。2012年にはキュリオシティが着陸に成功し、生命を保持できる可能性について調査をする予定である。小惑星探査[編集]はやぶさ詳細は「小惑星#探査の歴史」を参照ガリレオが1991年と1993年に小惑星帯を通り抜ける際、それぞれ (951) ガスプラと (243) イダの撮影を行い、映像を送ってきたのが最も初期の小惑星探査である。本格的な小惑星探査は、1996年2月に打ち上げられ、1997年7月に (253) マティルドへ接近、2000年2月に (433) エロスへ到達したNEARシューメーカーが最初である。それに続く日本のはやぶさ (MUSES-C) は2003年5月に打ち上げられ、2005年9月に (25143) イトカワへ到達し、2010年6月に地球へ帰還した。また、アメリカ合衆国でもドーン探査機が (1) ケレス（準惑星）と (4) ベスタを目指して2007年9月に打ち上げられた。さらに、現在冥王星に向かって飛行を続けているニュー・ホライズンズも、小惑星帯で (132524) APLの撮影を行ったほか、ケンタウルス族に属する (83982) クラントルの探査を行う計画である。なお、小惑星からのサンプルリターンに関しては、地球に帰還した「はやぶさ」が試みており、微細粒子ではあるが1500個以上のサンプルが回収できていることが確認されている。サンプルリターンは計画中の「オシリス」「はやぶさ2」の両探査機でも予定されている。再び月へ[編集]1990年代に入り、日本が次々と月探査計画（ひてん（1990年）/LUNAR-A（計画中止）/かぐや（2007年-2009年））を発表・実施し、欧州（スマート1（2003年-2006年））や中国（嫦娥1号（2007年-2009年））やインド（チャンドラヤーン1号（2008年-2009年））も独自に月探査機を送り込むこととなった。アメリカも月の資源探査や有人基地化と火星有人探査への布石などから数多くの月探査機を送り込むようになっている。また、グーグルとXプライズ財団が民間での月探査に賞金を設定している (Google Lunar X Prize)。国際協力体制[編集]最初の本格的な協力体制はハレー彗星探査のときに行われた（ハレー艦隊を参照）。その後は大規模な国際協力はなかったが、2007年3月4日に京都で行われた国際宇宙探査戦略にかかる京都ワークショップにおいて、2007年以降の月探査も含む今後の太陽系探査についてワークショップに参加した14の宇宙機関により国際協力体制を早期に構築することが確認された。探査機・探査計画の一覧[編集]詳細は「宇宙探査機の一覧」を参照アメリカ合衆国[編集]マーズ・グローバル・サーベイヤーパイオニア計画：月に接近通過レインジャー計画：月に突入しつつ写真を撮影ルナ・オービター計画：月周回サーベイヤー計画：月に着陸、写真を撮影、地表データの送信アポロ計画：月への有人飛行マリナー計画：水星、金星、火星の探査バイキング計画：火星に着陸パイオニア・ヴィーナス計画：金星、ハレー彗星の探査パイオニア10・11号：木星、土星を通過観測後、太陽系外へボイジャー計画：木星、土星、天王星、海王星を通過観測後、太陽系外へクレメンタイン計画：月探査計画マゼラン：金星周回ガリレオ：小惑星イダ及びガスプラに接近、木星周回、プローブ投下マーズ・オブザーバーマーズ・グローバル・サーベイヤーマーズ・クライメイト・オービターマーズ・ポーラー・ランダー2001マーズ・オデッセイマーズ・エクスプロレーション・ローバー：スピリット、オポチュニティマーズ・リコネッサンス・オービター：火星極軌道周回。2005年8月打ち上げ、2006年3月火星到達マーズ・テレコミュニケーション・オービター：計画中止ディスカバリー計画：オフザシェルフを活用した低コストで効率のよい宇宙探査計画NEARシューメーカー：小惑星エロスの探査マーズ・パスファインダー：火星探査ルナ・プロスペクター：月の氷の存在を調査ジェネシス：太陽風に含まれる塵を採取ディープ・インパクト：テンペル第1彗星の探査メッセンジャー：水星探査スターダスト：ヴィルト第2彗星に接近、サンプルリターンASPERA-3：火星大気と太陽風の関係の調査CONTOUR：エンケ彗星 (2P)、シュワスマン・ワハマン第3彗星 (73P) の探査（失敗）ドーン：準惑星ケレス、小惑星ベスタに接近調査ケプラー：太陽系外惑星探査GRAIL：月の重力場の観測オリジン計画：宇宙、太陽系、生命の起源を調査する計画ニュー・ミレニアム計画：21世紀の探査計画で必要となる技術を確立する計画ディープ・スペース1号：小惑星ブライユとボレリー彗星の近接探査ディープ・スペース2号：火星探査（通信不能）ニュー・フロンティア計画：比較的新規開発要素の多い低コストな宇宙探査計画ニュー・ホライズンズ：冥王星、太陽系外縁天体の探査ジュノー：木星探査オシリス・レックス：小惑星探査、サンプルリターンマーズ・スカウト：火星探査計画フェニックス：着陸探査機メイヴン：大気観測を目的とした周回探査機JIMO：エウロパの海を調査目的とする探査機（中止）ソビ���ト連邦 / ロシア[編集]ルナ計画：月探査ゾンド計画：月探査ベネラ計画：金星探査マルス計画：火星探査フォボス計画：火星探査（失敗）ベガ計画：金星、ハレー彗星探査マルス96計画：火星探査（失敗）フォボス・グルント：火星探査日本[編集]さきがけ：ハレー彗星、惑星間空間探査ひてん、はごろも：月スイングバイ・エアロブレーキ実証、月周回はやぶさ、ミネルバ：小惑星「イトカワ」の探査、サンプルリターンLUNAR-A：月探査（中止）かぐや、おきな、おうな：月周回IKAROS：ソーラー電力セイル実証、惑星間空間探査PLANET計画すいせい：ハレー彗星の探査のぞみ：火星周回（失敗）あかつき：金星探査欧州宇宙機関[編集]ジオット：ハレー彗星探査マーズ・エクスプレス：火星周回、着陸機ビーグル2（失敗）スマート1：月探査ロゼッタ：小惑星・彗星探査ヴィーナス・エクスプレス：金星探査オーロラ計画：火星探査中国[編集]嫦娥計画：月探査インド[編集]チャンドラヤーン1号：月探査国際共同ミッション[編集]ハレーアルマダ：（日米欧ソ）ハレー彗星探査ISEE-3/ICE：（米欧）太陽風・彗星ユリシーズ：（米欧）太陽極軌道探査機カッシーニ：（米欧）土星周回・タイタンにホイヘンス・プローブ投下（ESAと共同）ベピ・コロンボ：（日欧）水星探査はやぶさ2：（日本、協力先ドイツかも？）小惑星探査、サンプルリターンはやぶさMk2 / マルコ・ポーロ（仮称）：（日欧）小惑星探査、サンプルリターンラプラス：（日米欧）木星とその衛星（特にエウロパ）の探査タンデム：（米欧）土星とその衛星（特にタイタン、エンケラドゥス）の探査蛍火1号：（中露）火星探査脚注[編集]^ もともとボイジャー計画は、20世紀末の惑星直列を利用して木星から海王星までを一度に探査する「グランドツアー計画」としてスタートしたもので、当初のプランでは冥王星も含まれていた。米国の宇宙開発見直しに伴って計画が縮小され、1号は冥王星、2号は天王星・海王星探査も可能な軌道を取りながらも、打ち上げ段階では土星までの探査しか予算が認められていなかった。その後ボイジャー1号は土星の衛星タイタンを詳しく観測するために冥王星へ向かう軌道から外れたが、ボイジャー2号はミッションの延長にかかる予算が承認されたことで当初計画通りの探査が行われることとなった。^ 最初期は日本と欧州の共同プロジェクトとしての企画であったが、最終的には豊富な外惑星探査の実績を持つNASAとも共同で行うことになった。^ 国際共同木星圏総合探査計画WG設立提案書 (pdf)関連項目[編集]宇宙探査機の一覧火星探査機エアロシェル - ランダーラジオ・コントロールスイングバイ人工惑星人工惑星一覧外部リンク[編集]ウィキメディア・コモンズには、宇宙探査機に関連するカテゴリがあります。宇宙科学研究本部「http://ja.wikipedia.org/w/index.php?title=宇宙探査機&oldid=48059207」から取得 カテゴリ: 宇宙探査機天文学天文学に関する記事隠しカテゴリ: 出典を必要とする記事/2012年6月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f168"},"body":"水和物出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索塩化コバルト(II)無水和物塩化コバルト(II)六水和物水和物（すいわぶつ、Hydrate）とは、無機化学および有機化学において、水分子を含む物質のことを表す用語である。含まれる水のことは、水和水と呼ぶ。水和水の数によって、一水和物、二水和物、三水和物、……となる。多いものでは硫酸アルミニウムの十七水和物などもある。水和水の多い化合物には過飽和を起こすものもある。酢酸ナトリウムやチオ硫酸ナトリウムが例として挙げられる。ただし、水和水があるからといって水に溶けやすいとは限らない。硫酸カルシウムなどがその例である。水和物の化学的性質[編集]水和水は加熱すると失われるが、100℃以上での加熱を必要とするものもある。加熱の程度によって様々な割合の水和物の生じる化合物もある。炭酸ナトリウム十水和物のように、自らの結晶水に溶ける化合物もある。水和物を持つ化合物は、無水物に比べ、水に溶けやすい性質を持つ。結晶水を持つ化合物の無水物が水に溶けるとき、発熱反応となる。これは、物質が結晶水を取り込んでから水に解けるためである。また、乾燥した空気によって自然に結晶水を失う現象を風解という。しかし、潮解は、結晶水とは関係ない現象である。無機化合物から有機化合物まで様々な化合物に存在する。無機化合物のうち、金属化合物は、水和水と錯体を生じていることも多い。たとえば、硫酸銅の青色は、銅と水の錯体の色で、熱して水和水をなくすと、白い粉末になり、これを無水硫酸銅という。硫酸銅は、五水和物である。一方、塩化コバルトの場合は、六水和物が赤紫色に対し、無水物は青色である。関連項目[編集]結晶水受動的防火性能「http://ja.wikipedia.org/w/index.php?title=水和物&oldid=47487525」から取得 カテゴリ: 有機化学無機化学錯体化学化学物質水\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f169"},"body":"新聞出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、情報メディアについて記述しています。判例集の略語については「法律新聞」を、中国語の「新聞」（新闻）については「ニュース」をご覧ください。この記事は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2010年3月）新聞（しんぶん）は、事件、事故や政治や経済や芸能やスポーツや国際情勢などの動向などのニュースを報じるためのメディアで、記事文章や写真、図面などが紙（新聞紙）に印刷され綴じていないものである。新聞目次1 概説1.1 主な分類1.2 新聞と社会2 制作過程3 歴史3.1 前史3.2 近代4 語源5 各国別日刊紙の成人人口1,000人当たりの部数6 日本の新聞7 インターネット新聞8 その他9 脚注10 関連項目概説[編集]新聞は世界規模の出来事から国内外、地域内、さらにはコミュニティの内部などの情報伝達手段として様々なものが発行されている。その中でも新聞社と呼ばれる新聞・報道を専門とした会社組織・報道機関が発行する新聞は情報の影響する範囲が広範囲であり、マスメディアと呼ばれる。影響力は発行部数にほぼ比例する。小さなコミュニティの内部でも、例えば学校単位で発行する学級新聞や地域で発行する地域広報などがある。様々な新聞（リスボン）書籍よりページ数が少ない場合が多い（英国紙）ブランケット判新聞を広げた様子（バチカン紙）紙質は悪く、古くなると変色する（スウェーデン紙）主な分類[編集]刊行間隔による分類日刊紙夕刊紙週刊紙旬刊紙月刊紙季刊紙配布地域による分類全国紙地方紙ブロック紙内容による分類一般紙専門紙経済紙スポーツ紙予想紙競馬新聞発行の性格による分類機関紙広報・公報商業紙業界紙学生新聞階層による分類高級紙大衆紙メディア形態による分類壁新聞瓦版回覧板その他無料紙点字新聞新聞と社会[編集]新聞は、取り扱う範囲内で様々な情報を盛り込むことを特徴としており、その対象層の中で広く読まれることや逐次性・速報性が重視されている。情報の伝達を使命としている点で同じ紙メディアでもそれ自体が強い個性を持つ書籍や雑誌とは大きく異なる。そのため、使われる紙の質は悪く保存性は低い。ラジオ・テレビ放送やインターネットが発達した現代社会においては速報性で優位に立てず低迷傾向にありながらも利用者にとって取り扱いが簡便であることや共有性の高さなどから依然情報メディアとしての地位は揺らいでおらず、多くの人々にとって安価で多様な情報を入手するための有力手段の一つとして今なお存在感を保っており、概ねどの国でもある程度の規模の都市であれば鉄道駅や商店・街頭で販売又は掲示されている様子を見ることができる。売店販売現代文明社会では、多くの人々にとって安価で多様な情報を入手するための有力手段。大学図書館前に掲出される新聞市中で「号外」を配布している様子ほとんど場所を選ばず読みやすい（列車内）制作過程[編集]輪転印刷機による印刷の様子概ね下記のようになっている。企画・構想取材・撮影記事執筆原稿チェック校閲 - レイアウト後の場合があるレイアウト - 見出し制作・価値判断も行われる編集・割付・組版校正フィルム・刷版制作印刷梱包・発送歴史[編集]前史[編集]ローマ帝国期のアルバムとも言われた、アクタ・ディウルナ(en:Acta Diurna)[1][2]が手書きの公報として存在した。紙製としては中国の唐時代の713年-734年頃に作られた開元雑報(en:Kai Yuan Za Bao)が存在した。16世紀、活版印刷が可能となり、ドイツで、ニュースを記述した���ラやパンフレット形式の印刷物が出版されていた（「フルークブラット」など）。これらは不定期であった。近代[編集]17世紀、郵便制度が整えられた。1605年、世界初の週刊新聞「Relation」が、ストラスブールでヨハン・カロルス(en: Johann Carolus)によって創刊され[3]、1650年、世界初の日刊紙ライプツィガー・ツァイトゥイング（週6日）が創刊された[2]。17世紀半ばには、ニュース本が定期的に出版されるようになった。特にイギリスでは清教徒革命や名誉革命を通じてニュース出版が発展し、日刊新聞や地方週刊新聞も出版されるようになった。18世紀には、いろいろな新聞を読み放題のコーヒー・ハウスが登場した。裕福な商工業者であるブルジョワジーが新聞を元に政治議論を行い、貴族のサロンと同じように論壇を形成した。19世紀には、日曜新聞のような大衆新聞が成長した。印刷機の発達やロール紙の採用、広告の掲載などにより労働者階級に低価格で販売できるようになった[4]。つまり現在のような新聞の出現は産業革命以降のヨーロッパからであり、産業を支える上で大きな存在となった。これは後にマスマーケティングの手法の一環としても用いられるようになり、企業の広告活動にも一役買うようになった。日本には現在の新聞と似たものとして瓦版が存在し、木製のものが多かった。現存する最古の瓦版は1614年 - 1615年の大坂の役を記事にしたものである。語源[編集]「新聞」という言葉は古来の日本語にはない。この語の初出は、北宋時代に編纂された唐王朝の歴史書『新唐書』だとされている。新唐書の芸文志には、唐時代に書かれた書物の一覧があるが、その中に「尉遲樞に、『南楚新聞』三卷あり」とある。ここでいう「新聞」とは今の日本語でいう「風聞」つまり「news」という意味であった。この定義での「新聞」は、清の時代にも書かれていた。例えば、乾隆帝が編纂させた『四庫全書総目提要』では、清の魏裔介の「資麈新聞」という書物を紹介している。これは現在の週刊誌のように雑説をいろいろな本から寄せ集めたもので、怪奇現象や陰陽道の話、李自成の乱や琉球王国の話などが書かれているが、虚偽の内容、現代でいういわゆる飛ばし記事が多く、『四庫全書総目提要』の編者は「編集方針がメチャクチャで間違いが百出している」と批判している。清朝末期に欧米人が中国で「newspaper」を発刊し、現地の中国人たちもこれを真似て新聞を発刊した際、古来の「新聞」という言葉を当てて「新聞紙」と呼んだ。中国語では、現在も「新聞」をnewsの意味で使い、テレビのニュース番組などのタイトルにも使用される。なお、中国語におけるnewspaperは「報紙」である。明治時代に英語の「news」に相当する訳語として、この中国語が取り入れられ、「news」を「新聞」、「newspaper」を「新聞紙」と呼ぶようになった。夏目漱石の小説の中でもnewspaperは新聞紙であり、昭和初期に書かれたものの中にも、newspaperを新聞紙と呼んでいるものがある。新聞紙条例、新聞紙法などの「新聞紙」は「newspaper」の意味である。その後「新聞紙」を「新聞」と略すようになった。それに伴い「新聞紙」を「newspaper」の意味で使うことは減り、紙自体を指すようになった。一方、「日刊紙」「全国紙」「各紙」など、「新聞」の意味で「紙」という漢字が使われることもある。現代英語では「newspaper」を「paper」と略すことがある（「today's paper」=「今日の新聞」など）。また公民の権利を守るという意味合いから、古代ローマの公職である護民官に由来する「トリビューン」を社名や紙名に入れている新聞社も多い（シカゴ・トリビューンなど）。各国別日刊紙の成人人口1,000人当たりの部数[編集]この節は検証可能な参考文献や出典が全く示されていないか、不十分です。出典を追加して記事の信頼性向上にご協力ください。（2012年8月）アイスランド 1,028.8 　アルバ 931.0デンマーク 766.1リヒテンシュタイン 714.3日本 631.7スウェーデン 624.1ノルウェー 601.2コロンビア 587.8フィンランド 561.0スイス 554.9香港 542.3アンドラ 524.6ケイマン諸島 500.0マカオ 486.8韓国 485.6アラブ首長国連邦 461.1フェロー諸島 447.4オーストリア 435.9シンガポール 434.9イギリス 385.3ベネズエラ 374.2オランダ 357.2バミューダ 351.9ギリシャ 334.8チェコ共和国 319.8ルクセンブルク 304.8マルタ 301.2ドイツ 300.2バーレーン 295.9アイルランド 295.7エストニア 292.5アメリカ合衆国 259.4朝鮮民主主義人民共和国 255.4クウェート 243.5台湾 243.5スペイン 242.3カナダ 232.8リトアニア 231.4マレーシア 228.1ニュージーランド 224.1ジブラルタル 217.4ラトビア 215.4イタリア 214.8バルバドス 214.3スロベニア 203.8クロアチア 203.1日本の新聞[編集]詳細は「日本の新聞」を参照日本では新聞購読率が高く、新聞販売店による新聞の戸別宅配制度が他国に類をみないほど発達している。またその価格に関しても再販制度によって守られてきた。しかしながら、昨今のインターネット等の発達により、若年層のみならず中高年層も含め（世界的な傾向として）新聞離れが進行しつつあることや、新聞を印刷する紙価格の高騰、広告収入の減少などにより、その経営環境は厳しさを増している。各新聞社は日本経済新聞の「日経電子版」など、記事のネット配信に力を入れつつあり、日経電子版のように一定の会員数を確保しているメディアも存在している。新聞の専門家である河内孝は、新聞社は今後携帯電話会社やポータルサイトと連携して、情報産業の問屋として存続するのではないかと予測している。 一部にフリーペーパーに注目する向きもあるが、収益の殆どを広告収入に依存するフリーペーパーの経営は苦しいところが多く、近年廃刊が相次いでおり、新聞に代わる主要メディアとしての地位を得ることは難しいと言われている。インターネット新聞[編集]近年はインターネット上で一部のローカル紙は除いた新聞各社のホームページが開設されているとともに、一般市民が記者となって参加できる「インターネット新聞」が続々と創刊している。また、アメリカの報道大手により携帯型端末iPad専用の有料新聞も発刊されることになった[5]。ウィキニュースや市民メディア・インターネット新聞・JANJANが挙げられる。欧米の新聞社はインターネット新聞の普及に伴い、記事を公開するタイミングについて紙媒体よりもウェブ媒体を優先させるウェブ・ファーストと呼ばれる方針を打ち出してきている。この他、前述のとおり「日経電子版」や「ウォール・ストリート・ジャーナル電子版」など、有料会員を新聞社が募って、記事を配信する仕組みも出来つつある。その他[編集]図書館などの公共施設で新聞が閲覧に供される場合にはクリップホルダー（長い綴じ具）に挟んで「新聞架」と呼ばれる専用ラックに載せることが多い。新聞の創刊号からの通算の号数（あるいは創刊年からの通算年数）を「紙齢（しれい）」という。和文通話表で、「し」を送る際に「新聞のシ」という。脚注[編集][ヘルプ]^ 北岡敬『そこが知りたい【事始め】の物語』雄鶏社^ a b 樺山紘一『図説　本の歴史』^ 朝日新聞2010年9月17日国際面より^ 吉見俊哉『メディア文化論』ISBN 978-4641121904^ 2011年2月3日の朝日新聞朝刊11面関連項目[編集]ウィキペディアの姉妹プロジェクトで「新聞」に関する情報が検索できます。ウィクショナリーで辞書項目ウィキブックスで教科書や解説書ウィキクォートで引用句集ウィキソースで原文コモンズでメディアウィキニュースでニュースウィキバーシティで学習支援新聞一覧号外日本の新聞世界の新聞「http://ja.wikipedia.org/w/index.php?title=新聞&oldid=48198350」から取得 カテゴリ: 新聞紙製品印刷物隠しカテゴリ: 出典を必要とする記事/2010年3月出典を必要とする節のある記事/2012年7月-9月\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f16a"},"body":"印刷出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索印刷（いんさつ）とは、インキにより、紙などの媒体に文字や絵、写真などの画像を再現することを指し、印刷された物を印刷物という。現代では2次元の媒体に限らず、車体など3次元の曲面に直接印刷する技術も多数開発されている。印刷がカバーする範囲は極めて広く、気体以外の全ての物体に対して可能であるとされている（ゲル状の物体にすら印刷が可能な技術がある）。目次1 歴史2 Press と Print3 版式による分類3.1 有版式3.1.1 凸版3.1.2 凹版3.1.3 平版3.1.4 孔版3.2 無版式3.2.1 静電3.2.2 レーザ3.2.3 熱転写（溶融型／昇華型）3.2.4 インクジェット4 主要印刷会社5 主要印刷機械メーカー6 関連項目7 外部リンク歴史[編集]「記録技術の年表」も参照東アジアでは、2世紀頃に中国で紙が発明され、7世紀頃には木版印刷が行われていたといわれ、また11世紀には陶器による活字を使った印刷が行われていた。金属活字による印刷は13〜14世紀の朝鮮（高麗）にあらわれている。現存する印刷物で、製作年代がはっきりと判明している世界最古のものとして、日本の「百万塔陀羅尼」がある。ヨーロッパでは、1450年頃のヨハネス・グーテンベルクによる金属活字を用いた活版印刷技術の発明で、印刷が急速に広まった。グーテンベルクの発明から1500年以前までに印刷された書物はインキュナブラ（揺籃期本、初期刊本）と呼ばれ、どれも貴重書であるため莫大な古書価がつくこともままある。当時の印刷物は、聖書を始めとする宗教書が半数近くを占めており、活版印刷による聖書の普及は、マルティン・ルターらによる宗教改革につながっていく。その後、欧米においては長らく活版による文字、凹版による絵画、挿絵の印刷が行われた。1798年にドイツのセネフェルダーが石版印刷（リトグラフ）を発明。これが平版印刷の始めとなる。現在主流となっている平版オフセット印刷は、1904年にアメリカのルーベルが発明したといわれているが、それ以前にイギリスではブリキ印刷の分野で使用されていた。ルーベルの発明は紙への平版オフセット印刷である。日本では、「百万塔陀羅尼」が作成されて以降二百数十年間、印刷物が出されることはなかったが、平安時代中期になって、摺経供養が盛んに行われるようになった。これが、奈良を中心とする寺院の間に、出版事業を興させるようになる。興福寺などで開版した印刷物を春日版と呼ぶ。鎌倉時代には高野山金剛峰寺でも出版を行うようになった。これは高野版と呼ばれる。13世紀頃からは、宋へ留学した僧がもたらした宋刊版の影響を受け、京都で五山版が出る。安土桃山時代になると、宣教師に日本語を学ばせるため、初めて活字による印刷（キリシタン版）が行われ出す。近世以前は金属活字を用いたキリシタン版や駿河版といった例外を除き、木版印刷が中心だった。江戸時代初期から中期にかけて、美麗な嵯峨本を始め、庶民の読み物である赤本や黄表紙など、一気に出版文化が花開くことになる。これらには、木活字もしくは木版を用いた整版が使われた。木版以外では、1783年に司馬江漢が腐食による彫刻銅版画を製作している。1856年には長崎奉行所内で活版による近代洋式印刷が始まる。明治時代に入り、1870年には本木昌造が長崎に新町活版所を創立、これが日本における民間初の洋式活版の企業化である。1888年には合田清が木口木版（西洋木版）を日本に初めて紹介した。なお、日本初の印刷専門誌『印刷雑誌』の創刊号（1891年）の表紙には、合田清の木口木版画が使われている。1896年、小川一真が日本初の3色版印刷を発表。1918年、築地活版製造所が邦文活字の鋳造を開始。1919年、HBプロセス法が日本に移入される 。1924年、石井茂吉と森澤信夫が邦文写真植字機の試作機を発表1926年、写真植字機研究所を設立1929年、実用機が完成。その後2人は袂を分かち、それぞれ写研、モリサワとして写植オフセットの時代を支えていくことになる。1960年、電子製版機（カラースキャナ）が実用化1970年代、国産4色同時分解スキャナ開発。この頃から電算写植、オフセット印刷が主流となる。1985年、アメリカでDTPが始まる。1989年、日本初のフルDTP出版物『森の書物』が刊行。この頃からデータのデジタル化が加速。オンデマンド印刷、電子出版などが徐々に現実となり始める。Press と Print[編集]パソコンなどのプリンタからの「プリントアウト」と、印刷会社にあるような印刷機による「印刷」は、まったく別のものとも言われるが、ともに「印刷」と訳される。後者はプレスと呼んで区別されるが、これは印刷機が刷版を用紙に対して圧力をかけて（=プレス）画線部を印字するためである。このプレス機構はそもそも近代的な印刷の初発的段階から存在し、グーテンベルクがブドウ絞り器から着想を得て開発したものと言われる。大量印刷（すなわちマスメディア）と「プレス」はその後不可分に結びつき、報道のことをプレスとも言うようになった。版式による分類[編集]有版式[編集]凸版[編集]版の凹凸を利用する印刷法の一つで、非画線部を凹、画線部を凸にして凸部にインクをつけ、紙に転写する方式。活版印刷（活字や写真凸版・線画凸版、罫線などを組み合わせて版とする）はこの版式である。印刷時での圧力により紙に凹凸ができることがある。また、印刷された文字にマージナルゾーン（インクの横漏れにより、実際の活字の線幅以上の余分な太さとなる部分）が見られるなどの特徴がある。版が鉛製で取り扱いにくいこと、オフセット印刷の発達などにより、活版印刷は廃れた。現在主に行われている凸版印刷は、樹脂凸版印刷およびフレキソ印刷である。樹脂凸版印刷とは、活版の代わりに感光性樹脂を刷版に用いるもので、週刊誌のモノクロページ、シール、ラベル印刷などで使用されている。ただし現在では、週刊誌のモノクロページはほとんど平版オフセットで印刷されるようになった。フレキソ印刷は、ゴムや感光性樹脂の版を用い、刷版にインキを供給する部分にアニロックスロールと呼ばれるローラーを用いる方法である。アニロックスロールは、表面に規則正しい配列で凹みを彫刻し、その凹部に詰まったインキを版に供給するもので、用途に合わせて凹部の線数を選択することができる。印圧がほとんどない「キスタッチ」が理想とされ、段ボールライナー、包装フィルムなどの印刷に使用されている。凹版[編集]詳細は「凹版印刷」を参照版の凹凸を利用する印刷法の一つで、非画線部である凸部のインクを掻き取り凹部に付いたインクを紙に転写する方式。現在では電子彫刻された銅製のシリンダーを用いた刷版はが使用されるため耐久性があり、大量の印刷に向いている。微細な線を表現できることから、偽造防止の目的で紙幣や収入印紙などに採用されることが多い。また、グラビア印刷も凹版印刷の仲間と言える。グラビア版は、ほかの印刷方法のような錯覚を利用した濃淡表現と、凹部分の深さの違いによるインクの量の増減による濃淡の変化の双方が可能であるため、写真などの再現性に優れている。雑誌においては本文は凸版で印刷されるが、写真ページはグラビアで印刷されることから、転じて写真ページのことをグラビアページと呼ぶようになった。平版[編集]詳細は「平版印刷」を参照平らな版の上に、化学的な処理により、親油性の画線部と親水性の非画線部を作成し、インキを画線部に乗せて、紙に転写する方式。 一般的にはオフセット印刷と同義で理解されているが、オフセットとはインキが版からゴム版に一度転写されることを指すのであり、本来、平版印刷と言うのが正しい。オフセットする凸版（ドライオフセット印刷など）や凹版（パッド印刷＝タコ印刷など）もまれに存在する。石版印刷（リトグラフ、リソグラフィ）も平版の一種。現代日本の出版物は、多くが平版オフセット印刷で刷られている。直刷りの凸版や凹版と違い、刷版上の画像が反転していないので間違いなどを見つけやすい。また高速、大量の印刷に適している。日本において平版印刷が普及した理由として写真植字が挙げられる。写真植字による版下作成はその後工程として製版フィルム化（集版）が不可欠であり、この工程を経る限り平版印刷が最適であるからである。カラー印刷は殆どすべてこの方式である。孔版[編集]版（油紙など）に微細な孔を多数開け、圧力によってそこを通過したインクを紙などに転写する方式。手軽な設備で実現できる。身近な代表例は理想科学工業のプリントゴッコやリソグラフ（製品名）。複製絵画に使用されるシルクスクリーンや、謄写版（ガリ版）も孔版の一種。文字や画像の印刷に限らず、物体表面に各種の機能性材料の皮膜を形成する技術として広く用いられている。一例では、カラーブラウン管のシャドーマスクや液晶表示装置のカラーフィルターといった部品が、印刷技術を用いて製造されている。別名ステンシル印刷とも称されるが、最近では スクリーン印刷と呼ばれることが多い。無版式[編集]無版印刷とは、製版フィルムや刷版などを作成することなく、直接、用紙にプリントする印刷方式。静電[編集]レーザ[編集]熱転写（溶融型／昇華型）[編集]インクジェット[編集]インクジェットプリンターを参照この節の加筆が望まれています。主要印刷会社[編集]印刷会社の項を参照のこと。主要印刷機械メーカー[編集]小森コーポレーションハイデルベルグ・ジャパン三菱重工印刷紙工機械リョービ東京機械製作所篠原鐵工所ハマダ印刷機械理想科学工業桜井グラフィックシステムズミヤコシ太陽機械製作所浮田工業ミューラー・マルティニアキヤマインターナショナルコモリシャンポンマイクロ・テックゴスジャパンニューロング精密工業関連項目[編集]組版活版文選、ゲラ刷り、紙型、本木昌造、ウィリアム・ガンブル、マージナルゾーン、誤植、約物写植電算写植DTPDTPソフトAdobe Photoshop、Adobe Illustrator、QuarkXPress、Adobe InDesignフォントTrueTypeフォント、PSフォントとATMフォント、OpenTypeフォント製版写真製版、色分解、網点、セッター（タイプセッター、イメージセッター）、CTP、プロセスカラー、カラーチップ校正刷り色校正、青焼き、ファインチェッカー（簡易校正、ケミカル校正）、ストリップ修正、DDCP、カラーマネージメントシステム(CMS)印刷機輪転印刷機、枚葉印刷機、平台印刷機、オンデマンド印刷機、スクリーン印刷機製本・紙工・加工本グーテンベルク聖書版画浮世絵裁ち落としリーフレット印章、円筒印章印刷通販コンニャク版外部リンク[編集]ウィキメディア・コモンズには、印刷に関連するカテゴリがあります。（印刷業界団体）社団法人日本印刷産業連合会全日本印刷工業組合連合会社団法人日本印刷技術協会東京都印刷工業組合社団法人東京グラフィックサービス工業会社団法人日本印刷産業機械工業会印刷インキ工業連合会社団法人日本印刷産業機械工業会印刷工業会「http://ja.wikipedia.org/w/index.php?title=印刷&oldid=46538434」から取得 カテゴリ: 印刷情報技術史隠しカテゴリ: 書きかけの節のある項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f16b"},"body":"月面着陸出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索月面でポーズをとるエドウィン・オルドリン。撮影したニール・アームストロングが、頭部を覆うバイザー部分に反射して見える。写真はNASAより。月面着陸（げつめんちゃくりく、英: Moon landing）は、地球の衛星である月への着陸をいう。英語では他に、lunar landing とも。人類史上初の月面着陸は、アメリカ合衆国のアポロ11号計画における船長ニール・アームストロングと月着陸船操縦士エドウィン・オルドリンによるものだった。1969年7月20日、司令船操縦士マイケル・コリンズが月周回軌道上の司令船コロンビアで待機する中、二人の乗り込んだ月着陸船イーグルは司令船から切り離され、7月20日午後4時17分（東部夏時間）、月面に着陸した。本項では主に、成功へと至った月面着陸について取り上げる。人類初の月面着陸を成し遂げるべく繰り広げられた競争については「宇宙開発競争」を、着陸計画についてのより詳細な情報については「アポロ計画」を参照目次1 計画1.1 無人月探査計画1.1.1 アメリカの戦略1.1.2 ソ連の戦略1.1.3 アポロ11号の初着陸1.1.4 月面着陸の他の側面2 有人月面着陸計画の一覧3 ルナ・ランダー・チャレンジ4 ルネックス計画4.1 詳細4.2 関連する宇宙船4.3 着陸予定地4.4 背景4.5 予定4.6 問題点5 ホライゾン計画6 A119計画7 脚注8 参考文献9 関連項目10 外部リンク計画[編集]無人月探査計画[編集]ソビエト連邦のルナ計画により、1959年1月4日に打ち上げられたルナ1号（E-1）は、月の近隣を通過した史上初の月探査機となった。その後継機であるルナ2号は月面に達した。1959年10月7日には、ルナ3号が月の裏側の写真撮影に成功した。その後1966年2月3日に連邦の打ち上げたルナ9号が初の月面「軟着陸」を成し遂げると、1966年4月3日にはルナ10号が月の衛星となることに成功したのであった。アメリカ合衆国は、月へ無人惑星探査機を送るパイオニア計画を打ち出す。しかしながら、異なった3機の探査機発射ロケットに付随した3種のデザインによる惑星探査機は10回の試み全てが失敗に終わった。サーベイヤー計画は、ロボットを用いて有人月面着陸に向けた月面への安全な着陸を研究するアメリカ合衆国の取り組みの一部である。この計画で5基の探査機による7つの作戦が成功し、アポロ計画の宇宙飛行士達が降り立つに最も好ましい地点を探り当てる一助となった。その後1968年12月27日にアポロ8号が有人による月軌道調査を実行し、月面に人類を上陸させる土台を築いた。アメリカの戦略[編集]探査機ガリレオによる月。アメリカ合衆国の月探査計画は、アメリカ合衆国第34代大統領ドワイト・D・アイゼンハワー政権下より開始された。週刊誌コリアーズの1950年代半ばに連載された記事には、ヴェルナー・フォン・ブラウンが月面における宇宙ステーションを建設するための、有人宇宙探査隊の概念を社会に広めたと報じられていた。ところが有人月面着陸の思想は、アメリカとソビエトの間で技術的挑戦への挫折を引き起こした。加えて、奪格的な過熱状態を伴わない大気圏再突入の方法など、技術指導や重量処理は大きなハードルであった。ソビエト連邦がスプートニクを打ち上げた後、フォン・ブラウンはアメリカ軍部へ、1965年までに月面在外基地を創設する計画をうちだした。しかし、合衆国が科学的・軍事的価値の可能性から見て、そうした軍事行動への出費を正当化することが極めて困難と考えたため、フォン・ブラウンの考えは進展しなかった。ユーリイ・ガガーリンを筆頭とするソビエトの世界初の有人宇宙飛行が成功を収めた後、ジョン・F・ケネディは、国民の心像を掴むような宇宙計画を模索していた。彼は後に副大統領を務めることとなるリンドン・ジョンソンへ、アメリカが世界の指導者であることを証明できる科学的な奮励を勧告するよう求めた。こうしてケネディらが練った計画案には、政治目的からか第三世界の飢饉を終結させる大規模な灌漑計画など、宇宙とは全く関連の無い計画も含まれていた。そしてアメリカは、可能性のある全宇宙計画の中から、有人月面着陸の競争がソビエトを打ち負かす最良の機会になるとの判断を下した。これは当時ソビエト連邦が、アメリカ合衆国よりも更に強力なロケットを保有していたためである。アメリカでは、国内における核兵器技術の発達がミサイル実弾頭のさらなる縮小、軽量化へ至らしめ、結果的により小さな弾頭容量を持つロケットが開発されていた。対照的にソビエトの保有する核兵器はかなり重厚なもので、強力なR-7ロケットは運搬用に発達したものであった。よって月面有人着陸という決断は、月面に着陸せず宇宙船で月の周囲を飛行、及び軌道に宇宙開発研究室を建設する（どちらもケネディがフォン・ブラウンへ提案したもの）といった質素な計画では、開発競争においてソ連側が有利になってしまう理由から下されたものであった。1960年アメリカ合衆国大統領選挙に際し、特にNASAの本拠地があるテキサス州など多くの要所となる州では経済的利益があるとして、ジョンソンはアポロ計画を擁護した。これは、前政権がアメリカ・ソビエト間での「ミサイル・ギャップ」を許す結果となった（後に各報道機関によって、ソビエトの軍事配備はアメリカが予期していたよりも劣っていたことがわかる）、というケネディの主張を後押しし、リチャード・ニクソンを破っての当選へ貢献したのだった。またジョンソンは、有人宇宙飛行を成し遂げなければ確実にソビエトに打ち負かされてしまうだろうとケネディに助言した。その結果ケネディはアメリカにとって宇宙開発に全力を注ぐのが最も理想的であるとして、アポロ計画を推し進めた。ケネディは資金投資を保証し、1963年の減税から宇宙開発への出費を保護し、さらにNASAが着手していた他の事業から資金の使途を転換した。この政策で、それまで他の科学的事業に駆り立てられていた、NASAの指導者ジェイムズ・ウェッブは失望した。その後大統領ケネディは社会全体からの支援を獲得するため、特異な声明を必要としていた。1963年には、ケネディが副大統領になったジョンソンに、月計画の潜在的な技術的・科学的利益を調査してほしいと求めた。するとジョンソンは最先端の医療躍進や宇宙から撮られた地球の写真を引き合いに出し、利益は限られたものであるものの、NASAの科学者達と力を合わせれば強力な実例となると結論付けた。しかし計画が進展するにあたり、社会事業へ更に資金を費やすべきだとする左派の政治家や、軍事費に力を入れたい右派の政治家達からの批判を打破する必要があった。これには、科学的な報いやソビエトによる宇宙支配の恐怖へつけこんだ持論を強調することで、ケネディとジョンソンはなんとか世論を揺れ動かすことができた。1965年までには、58パーセントものアメリカ国民がアポロ計画を支持し、これより2年前から33パーセントも上昇していることがわかった。ジョンソンが大統領に選出された1963年以降も、ケネディがもとより望んでいたように、計画への支援継続が行われ1969年の成功へ結びついたのである。ソ連の戦略[編集]ソビエト連邦のソユーズ。写真のようなロケットが、地球の軌道へ物体を運送する初の確実な輸送手段となった。そのころ、ソビエト連邦は月面着陸を決めかねていた。ソビエトの指導者であったニキータ・フルシチョフは他のいかなる力によっても「敗北」することを好まなかったが、そうした多額の費用を必要とする計画もまた望んでいなかった。1963年10月、彼はソビエト連邦が「宇宙飛行士による宇宙航行は現在は計画していない」と述べた上で、競争から落後したわけではないという主張を付け加えた。同時期に、ケネディがソビエトとアメリカ双方の宇宙飛行士で月面着陸を行い、より良き気象衛星の開発を行うとする種々の共同計画を打診していた。フルシチョフは、この試みでケネディがソビエトの宇宙開発技術を盗もうとする意図があると察したとして、提案を退けた。ロシア連邦宇宙局の主任デザイナーであったコロレフは、宇宙飛行士を搭乗させて月面着陸を行うことができる、ソユーズ宇宙船とN-1発射ロケットの推進を始めた。フルシチョフはコロレフのデザイン局に1966年の月・地球間有人飛行へ向けて、1つ目のチームが現存するボストークの技術を修正する間、2つ目のチームがプロトン発射台とゾンド宇宙船の建設に着工するよう、更なる配備を指示した。1964年、新たなソビエトの指導者がコロレフの月面着陸計画への奮闘を後押しし、全有人宇宙飛行計画を彼の指示の元で実行するよう命じた。しかしコロレフの死や1967年に行われた最初のソユーズ航行の失敗と共に、ソビエト連邦による有人月面着陸計画の協調は破綻をきたすこととなった。ソビエトは月着陸船を建設、アレクセイ・レオーノフらを含む宇宙飛行士を選定したが、1969年にN-1のブースターの発射が失敗に終わり、月着陸計画は遅延に苦しんだ挙句キャンセルとなった。「ソ連の有人月旅行計画」も参照アポロ11号の初着陸[編集]アメリカの探査機より以前にソビエトの無人惑星探査機が月に達していた間、アメリカ人宇宙飛行士ニール・アームストロングが、1969年7月20日の有人月着陸船イーグル着陸の後、月の表面を歩いた史上初の人物となった。アームストロングは宇宙司令船パイロットのマイケル・コリンズと、月着陸船パイロットのエドウィン・オルドリンからの後援を受けたアポロ11号計画の司令官及び船長であった。この人類初の月面着陸という歴史的な瞬間は、全世界5億人を超える人々がテレビなどのメディアを通して視聴したという。時事問題を扱うコメンテーターからは、この出来事が20世紀において最も鮮明な瞬間の一つであると広く理解され、またアームストロングが月面へ足を踏み出した際に最初に発した、「一人の人間にとっては小さな一歩だが、人類にとっては大きな飛躍である（That's one small step for [a] man, one giant leap for mankind）」という名言もまた同様に記憶に残るものである。着陸全体の実際の手記などはウェブサイト、アポロ計画月面日誌も参照されたい。宇宙飛行士達はその後月面にアメリカ合衆国の国旗を立て、それに敬礼するエドウィン・オルドリンは写真に収められた。アームストロングが最初に降り立つ人物になることは、当初の計画から既に重要なものだったはずと人々に信じられているが、実は原案では月着陸船のパイロットであるオルドリンが最初に降り立つよう計画されていた。また、印字した金属板が、未だ月面に残る月着陸船に取り付けられたままである。この銘板は、続く月面着陸へのアメリカの心象を表していた。これにはリチャード・ニクソン大統領による署名と共に、「Here men from the planet earth first set foot upon the Moon July 1969 AD. We came in peace for all mankind（西暦1969年7月、我等惑星地球より来たれり。全人類の平和を希求してここに来れり）[1]」と刻まれている（銘板には船員であるニール・アームストロング、マイケル・コリンズ、エドウィン・オルドリンの署名も入っている）。月から見た地球、1968年12月22日（NASAより）月面着陸の他の側面[編集]他の国際間競争とは違い、宇宙開発競争は領土拡張問題には依然として直接影響を及ぼさないままでいる。月面への着陸に成功後、アメリカは月のいかなる部分も所有する権利を明確に放棄した。1940年代、作家アーサー・C・クラークは専門家[誰?]がナンセンスだとして退けた、「人類は2000年までに月に到達するだろう」とする考えを既に予言していた。ニール・アームストロングが着陸した1969年、アメリカ側[誰?]はクラークを「我々を月へ導く必要不可欠な知的原動力を与えてくれた」と述べている。2006年8月16日、AP通信はNASAがアポロ11号計画で月面を歩いた映像を収録する、低速度走査テレビジョン用のテープ の原物を紛失したと報じた。しかし、2006年11月1日になってコスモス・マガジン誌は、この低速度走査テープが、オーストラリア西部パースにあるカーティン工科大学の、物理学棟にある小さな海洋科学実験室で発見されたと報道した。当時の原物テープのうちの一つは、分析のためNASAへ送られている。有人月面着陸計画の一覧[編集]アポロ11号 ―　1969年7月16日、人類史上初の有人月面着陸、7月20日。アポロ12号 ―　1969年11月14日、人類初の精密な有人月面探査。アポロ14号 ―　1971年1月31日、マーキュリー・レッドストーン3号の単独宇宙飛行士、アラン・シェパードが月面を歩く。アポロ15号 ―　1971年7月26日、月面車ルナ・ローバーによる初の月面探査実施。アポロ16号 ―　1972年4月16日、初めて月面高地へ着陸。アポロ17号 ―　1972年12月7日、最後のアポロ計画。初めて夜間に打ち上げが行われ、地質学者による探査が行われた。ルナ・ランダー・チャレンジ[編集]詳細は「:en:Lunar Lander Challenge」を参照NASAのセンテニアル・チャレンジの一環として行われる。様々な分野の個人や団体が参加する事によって切磋琢磨する。優秀な成績の参加者にはXプライズ財団や航空宇宙関連の企業などから賞金が出る。ルネックス計画[編集]ルネックス計画月種類空軍の地下基地建設1967年以降に予定使用期間計画中止管理者アメリカ駐屯部隊21人ルネックス計画とは1958年にアポロ計画に先がけて立案されたアメリカ空軍による有人の月面着陸の計画である。1961年に立案された最終的な月探査の計画では1968年に総工費750万ドルで21人が滞在する空軍基地を月面の地下に建設するという計画だった。最終的なルネックス計画とアポロの最大の違いの一つとして月面着陸船は分離せずにそのまま宇宙飛行士を乗せて着陸して地球に帰還する方式が決められた事だった。(アポロ計画の原案ではルネックス計画と類似の直接降下、上昇する方式だった。)詳細[編集]関連する宇宙船[編集]ルネックス宇宙船の模式図'ルネックス月着陸船乗員: 3全長: 16.16 m (53.01 ft)最大径: 7.62 m (24.99 ft)全幅: 7.62 m (24.99 ft)重量: 61 000 kg (134 000 lb)機関: アメリカ空軍製造: アメリカ空軍着陸予定地[編集]無人探査機の調査結果に基づいて基地の建設予定地としてケプラークレーターが選定された。背景[編集]ルネックス計画はソビエトを打ち負かし、国際的な技術競争において優位性を示す為に1967年に月面着陸して戻る計画だった。空軍は月面着陸の達成は短期的だけでなく歴史的な意義を必要とすると感じた。着陸船の直接上昇を使用する事で後にアポロ計画で使用されたいくつかの複雑な月軌道ランデブーを廃した事により特に宇宙空間でのランデブー技術の開発が不要になった。欠点としてこれによりルネックス宇宙船は着陸して月面から月軌道へ戻る為の宇宙船の燃料がアポロ宇宙船よりも大幅に増えて重くなり、その結果月へそれらを送る為のロケットも大幅に大型化する必要があった。予定[編集]3段階の予定だった。:1965年: 有人再突入機の回収1966年: 有人月周回飛行1967: 有人月着陸と帰還1968年以降、恒久月面探査が計画された。問題点[編集]主な問題点を以下に示す:大気圏から弾き出されるか過熱を避ける為に再突入時の角度が2°で速度が毎秒37,000フィートである必要があった。後者は直接乗員の死に繋がるわけではないが宇宙船が帰還軌道を外れることによって再び再突入の機会が訪れるまでヴァン・アレン帯の放射線に晒される可能性があった。月着陸船の開発においてこれまで一度も試験されたことがない精密なロケットの噴射が必要とされた。月着陸船の開発においてバックアップ能力を備える事が出来なかったので月面や月の軌道から地球へ帰還させる為に高度に自動化された高信頼性の監視装置を要した。ホライゾン計画[編集]詳細は「:en:Project Horizon」を参照月面前哨基地月面種類前哨基地建設1965年1月に開始される計画だった使用期間計画中止管理者アメリカ駐屯部隊12人ホライゾン計画は月面に基地を建設する実現可能性の調査である。1959年6月8日にアメリカ陸軍へアメリカ陸軍弾道ミサイル局(ABMA)が月の前哨基地を建設する為の調査として報告書を提出した。この計画の概要を以下に示す:\"月の前哨基地は月面における合衆国の潜在的な利益を開発し、守る為に必要である。;月面基地での地球と宇宙の監視技術や通信の中継や月面での運用技術を開発し、月面探査の為の基地として機能し、さらに必要とあらば月面での作戦行動に備える為に月面での科学支援へ投資が必要である。\"[1]1966年12月の時点において12人が滞在する恒久的な前哨基地の建設と運用には60億ドルかかると予想された。 計画では147機のサターンIとサターンIIで宇宙船の部材を低軌道へ打ち上げてから低軌道上で組み立てる予定だった。基地への月着陸と帰還は最大16人の宇宙飛行士が同時に往復する予定だった。ホライゾン計画は公式には可能性を検討する段階までは進んでいなかった。A119計画[編集]詳細は「:en:Project A119」を参照A119計画または\"月探査飛行の調査\"は1950年代にアメリカ空軍によって極秘で計画された月に原子爆弾を投下する計画である。この計画の目的は冷戦期にソビエトと他の国々に対してアメリカの優位性を示すことにあったと推定される。計画は実行には移されず、よりアメリカ国民に受け入れられる可能性の高い月着陸計画になった。脚注[編集][ヘルプ]^ http://www.history.army.mil/faq/horizon/Horizon_V2.pdf Project proposal参考文献[編集]この節の加筆が望まれています。関連項目[編集]宇宙開発競争アポロ計画月面基地アポロ計画陰謀論外部リンク[編集]以下は翻訳元である英語版（w:en:Moon landing）からの外部リンクである。ギャラップ調査よりロイター通信よりクアドリックスより他参考サイト日本惑星協会より、アポロ11号計画のページほかアポロ計画（英語）「http://ja.wikipedia.org/w/index.php?title=月面着陸&oldid=47146676」から取得 カテゴリ: 月探査隠しカテゴリ: 言葉を濁した記述のある記事 (誰)/2011年7月-12月書きかけの節のある項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f16c"},"body":"段ボール出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索束ねられた段ボール箱段ボール（だんボール）とは板紙を多層構造で強靭にし、包装資材などに使用できるよう加工した板状の紙製品。素材としての段ボールシートのほか、再加工した段ボール箱、その他の段ボール製品を指すこともある。「ダンボール」という表記をされる。「ダン」は「段」、「ボール」は「ボール紙」の意味である。目次1 概要2 歴史3 段ボールシート4 段ボール箱5 シートの製造方法5.1 段ボール原紙5.1.1 ライナー5.1.2 中芯6 段ボール製品7 プラスチック段ボール8 強化段ボール9 出典・脚注10 関連項目11 外部リンク概要[編集]一般には、波状に加工した紙を表裏の紙で挟んで接着し、強度を持たせた構造をしている。さらに多層に加工したものや、波状の紙が表面にでている片面段ボールもある。段ボールの名は、原紙にボール紙（ボールは英語のboardに由来）を用いていたことと、断面の波型が階段状に見えることによる。 段ボウルともいう。段ボール箱からは腐食性ガスがわずかながら発生するので、電子部品などの長期保存には向かない。歴史[編集]段ボールは19世紀のイギリスにおいて当時流行していたシルクハットの内側の汗を吸い取るために開発された。のちに包装資材として利用されるようになったのは、アメリカ合衆国においてガラス製品の包装に使用されたのが始まりである。現在用いられている段ボールを作成し、日本において「段ボール」という言葉を作ったのは井上貞治郎である。段ボールシート[編集]狭義で、本来の意味である段ボールはこれのことを指す。様々な段ボール製品の素材。ライナーにフルーテッド（波型に加工）した中芯を貼り付け、さらに裏側にライナーで補強したシート（板状のもの）。中芯の山の密度を指すフルート[1]には、Aフルート・Bフルート・Cフルート・Eフルート・Fフルート・Gフルートまでが現在使用されており、Gに近づくほど細かい波形となる（CフルートだけはAとBの中間の厚み）。一般に使用されるのは、Aフルート、Bフルート、E/F/Gフルート（マイクロフルート）である。また、表にBフルート裏にAフルートを貼り合わせたシートはBAフルート・ABフルートまたはWフルートと呼ばれる。段ボールシートの用途は一般的に製函用途が多いが、緩衝材やコンクリートパネルなどにも使用される。輸出梱包にはAAAフルート（トリプルウォール等）、AAフルート（バイウォール等）など特殊な段ボールが木箱や鉄枠のかわりに使用されることがある。Wフルートについては、BCフルート、BBフルート、EBフルートもまたWフルートであり、これらBC・BB・EBフルートは日本国内では使用量も少なく、取り扱う企業も少ない。近年、AフルートからCフルートへの変更を勧める企業が見受けられるが、薄くなるため強度的には若干落ちる。しかし、海外工場（中国工場等）との包装設計の共有化を進める場合には、効果がある。段ボール箱[編集]段ボール箱段ボール箱は、段ボールシートを素材とする箱である。軽さと強度、構造に由来する衝撃吸収性、何度も折りたたんでは組み立てられる利便性などから、宅配便、引越し等の運輸業、または貯蔵の分野で、従来の木箱に取って代わるようになった。通常折りたたむと一枚の平坦な板状になる。日常的に「段ボール」という言葉を使う場合、この段ボール箱を指すことが多い。蓋を折り込むことで段ボール箱だけでも組み立てられるが、ガムテープ、クラフトテープ、OPPテープなどの粘着テープを使うことが多い。機械などの重量物を入れる場合は、接着剤や両面テープを使い、さらに金具またはバンドで固定する。A式（A形）・B式（B形）・C式（C形）などの形状がある。最も普及しているのはA式（A形）と呼ばれる形状で、箱の上下に開閉可能な蓋がついている（俗に言う蜜柑箱）。 JISのコード番号で箱の形式をいう場合もあるが、実務ではあまり使用されていない（JIS Z 1507）。段ボール箱の応用で、内側にポリエチレンなどの合成樹脂で作った袋を取り付け、液体包装に用いる容器も製造されている（バッグ・イン・カートン、バッグ・イン・ボックス）。シートの製造方法[編集]段ボールはコルゲータ（コルゲートマシン）を通して製造される。コルゲータはシングルフェーサ・ダブルバッカー・カッターによって構成される。また、ライナーと中芯を接着するための製糊装置、さらに糊を溶かすための熱を発生させるためにボイラが必要である。完成された段ボールは、プリスロ（プリンタースロッタ）によって印刷され、グルア（糊付機）またはステッチャ（段ボールを平線（針金）で接合する機械）によって段ボール箱へと加工されてゆく。箱の形状によってはダイカッタ（型抜機）によって型抜きして加工される。加工されて不要になった部分は裁ち落とし（裁落）として回収され、再び段ボール原紙として利用される。段ボール原紙[編集]段原紙ともいう。段ボール原紙はライナーと中芯（なかしん）に大別される。両方とも最初はロール紙の形をとっており、それをコルゲータにかけることによって両者を貼り合わせ、段ボールとなる。中国広東省東莞市には、多くの段ボール原紙工場が集中しており、世界有数の産地となっている。ナイン・ドラゴンズ・ペーパー（玖龍紙業）、リー＆マン・ペーパー（理文造紙）等。ライナー[編集]ライナー (liner) とは、段ボールの外側を形成する紙のことをいう。ライナーは多層抄きの板紙で、通常4層抄きである。原料は主に古紙・クラフトパルプを用いるが、日本では古紙を使用することが多い。別抄きのグレード等例外はあるが、Kライナー（クラフトライナー）は古紙50％以上、Cライナー（ジュートライナー）は古紙90％以上を使用する。また、輸入原紙にはこれは当て嵌まらない。主にK7・K6・K5・C6・C5・D4・D3の種類があり、K7が最も硬く、D3が最も柔らかい。なお、C6・D3は需要が少ないため使用されなくなりつつある。C6はK5で、D3は普通芯で代用する。また、表面に漂白パルプを流したもの(OPB6・OPC5)、撥水・耐水原紙、純白、赤、黄色、木目調などの色ライナー、プレプリント原紙など多種多様である。OPB6はOyster Pearl B級 6(匁)、OPC5はOyster Pearl C級 5(匁)の略。乳白色をしているので、こう呼ばれている。坪量（米坪）は120gsmから469gsm程度まで幅広い（輸入原紙を含む）。K7等の表記に関しては段ボール業界の慣習的表記であり、正式な包装設計図面等にはK280またはK280gと表記されることが多い。Kライナーには各種グレードが存在し、原紙単位の数量の発注が可能であれば、グレード及びgsm単位で原紙を指定して製紙会社にライナー・中芯原紙を抄造してもらうことも可能である（色ライナー、プレプリントも可）。ライナーには、強度が求められるため、ポリアクリルアミドや変性でん粉などの紙力増強剤が添加され、また、吸湿防止のためのサイズ剤が使用されることもある。必要に応じて、撥水剤が塗布されることもある。また、D3の下のグレードとして、普通芯を段ボールシートの表裏に貼合する場合がある。通常、撥水・耐水原紙を使用する場合、ライナーに限らず中芯及び貼合用糊、グルア用糊、印刷インキも撥水・耐水用が使用される。中芯[編集]段ボールの断面。波状になっている部分が中芯中芯とは段ボールの内側、つまり波状部分を形成する紙である。中芯は多層抄きの板紙で、通常4層抄きである。原料は主に古紙を使用する。V20・V19・V18・V16・V12・S18・S16・S14・S13・S12・S11・S10の種類があり、V20が最も硬くS10が最も柔らかい。なお、Vと付く種類の紙は紙力増強剤を使用してより強度が上げられている強化芯である。一般的に「普通芯」あるいは「中芯表示は無表記・Sのみ表記」の場合は、S12(scp115gsm～scp125gsm)が使用されている。ライナーほど種類は多くないが耐水性を向上させたものなどがある。S16等の表記もまたライナー表記と同様に業界の慣習的表記であり、それぞれの企業によって異なる。例えば、強化芯180gsm(kscp180gsm)の場合V18・HP18・P18・MM18・HP8・P8・M8等表記し、各企業によってまちまちである。段ボール製品[編集]包装、保管容器としての段ボール箱の利用がもっとも一般的である。また、ピザなど、ファーストフードのパッケージなどにも使用される。書籍などを夾んで、封筒状にして用いる包装材料もある。変わったものでは段ボール製の葬儀用祭壇・棺桶があるが、日本国内ではあまり使用されていない。段ボールシートを加工し、家具・ノートなどの文具などに使用する例もある。地震などの避難所で、衝立や小部屋状に組み立てて使う例もある。災害用簡易トイレも作られている。波打った断面部を表面にすることで吸音・遮音性もある程度あり、手作りの防音部屋用の素材としても使える。段ボールシートを加工し、自作パソコンのケースとして販売されている製品もある。プラスチック段ボール[編集]詳細は「プラダン」を参照通称「プラダン（プラ段）」または「ダンプラ（段プラ）」と呼ばれる、プラスチック（主にポリプロピレン）製の段ボールに類似した中空構造のシート。紙でできた段ボール板に比べて耐水性、耐久性に勝るので、強度が必要な用途や、長期利用もしくは再利用を前提としたケース類などに使用される。不織布や高発泡ポリエチレンシートを貼ったプラダンや、黒色の導電性プラダン（静電気に弱い精密電子部品の輸送用）もある。プラダンの場合、輸送箱として使われるだけではなく、建設業や引越し業で使用される養生シートとしての使用も多い。寸法は通常の段ボールシートとは幅と長さ（流れ）が逆になる。プラダンは材料にポリプロピレンを使用しているため、加工には専用の接着剤を使用する。あるいは、専用の熱溶着機を使用して、接合及び組上げを行う。これが、最近の主流となっている。印刷する場合のインクも特殊なものを使用する。強化段ボール[編集]通常の段ボールを二重もしくは三重構造にし、また耐水性を持たせて、高い強度を持つように造られた段ボールのこと。通常の段ボールの約10倍の強度を持つといわれ、木材梱包の代替資材として物流に使用される。また、焼却や断裁による速やかな廃棄を前提とした簡易家具類等にも活用されている。出典・脚注[編集][ヘルプ]^ 段目とも言う。「Aフルート」などは「A段」との言い換えが可能関連項目[編集]ウィキメディア・コモンズには、段ボールに関連するカテゴリがあります。製紙業紙加工業レンゴー外部リンク[編集]国際段ボール協会（ICCA）英語全国段ボール工業組合連合会段ボールリサイクル協議会「段ボール箱のできるまで」 - 原料からダンボール箱ができるまで。取材先日本板紙 草加工場・松戸工場（全15分） 1998年 サイエンスチャンネル段ボールのひみつ まんがひみつ文庫「http://ja.wikipedia.org/w/index.php?title=段ボール&oldid=48476360」から取得 カテゴリ: 紙製品箱包装\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f16d"},"body":"Perl6出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Perl6パラダイムマルチパラダイム登場時期2000年設計者ラリー・ウォール最新リリース実装による型付け動的型付け, 静的型付け主な処理系Rakudo, Pugs影響を受けた言語Perl 5, Smalltalk, Haskell, RubyライセンスArtistic License 2ウェブサイトPerl6.orgテンプレートを表示プログラミング言語>>他のプログラミング言語■カテゴリ / ■テンプレートPerl6（パールシックス）は、ラリー・ウォールにより設計されたオブジェクト指向スクリプト言語である。Perl6は、2000年にPerlの次期メジャーバージョンとして設計が始められた。しかし、言語仕様は現在のPerl(Perl5)と互換性がなく、既存のPerl5のソフトウェアをPerl6用に「アップグレード」するのは極めて困難である。したがって現在はPerl5とPerl6は別の言語であると考えられており、Perl6はPerl5の次期バージョンではないとされている。換言すれば、Perl6はPerl5から移行対象とはみなされていない。Perl6は言語仕様であり、言語仕様と処理系は別のプロジェクトとして管理されている。これは言語の作者自身が開発した処理系が言語仕様に準ずるものとされてきたPerl5やRubyとは異なっている。公式の処理系としてはRakudoがあり、2010年8月に最初の「使用可能な」バージョンがリリースされた。Perl5は動的型付け言語であったのに対し、Perl6は静的な型指定も行える言語となった（動的な型付けも可能）。また、Perl6では仮引数定義も可能となっている（Perl5でも可能ではあったが不完全であった）。さらに、Perl5の様に展開を行うことも可能であり、例えばJavaであればReflectionクラスを必要とする仮引数の取得をいわゆるマジックを用いずとも可能な設計となっている。Perl6ではPerl5と比較してさらに柔軟かつ強力な記法を可能としている。例えば、配列要素毎の演算や、Lisp等に代表されるポーランド記法も可能にするなどPerl5をより一層強力にした記述である。関連項目[編集]Parrot外部リンク[編集]Perl 6Official Perl 6 DocumentationPlanet Perl 6Perl 5 to Perl 6Perl 6 and Parrot linksPerl6::Perl5::DifferencesPerl 6 at WikiaRakudo.org表・話・編・歴フリーソフトウェアとオープンソースソフトウェア全般コピーレフトフリーソフトウェアフリーソフトウェアの定義無料と自由（英語版）オープンソースソフトウェアパッケージの一覧（英語版）オープンソースのアンドロイドアプリケーションの一覧（英語版）フリーのウェブアプリケーションの一覧（英語版）フリーソフトウェアプロジェクトの一覧（英語版）/OSSホスティングサービスの比較以前はプロプライエタリだったソフトの一覧（英語版）オープンソースソフトウェアOS（英語版）AROSBSDDarwineCosFreeDOSGNUHaikuInfernoLinuxMachMINIXOpenSolarisSymbianPlan 9ReactOS開発（英語版）Basic For Qt（英語版）EclipseFreeBASICFree PascalGCCGambasJavaLLVMLuaNetBeansOpen64（英語版）PerlPHPPythonROSE（英語版）RubyTcl/Tk歴史（英語版）GNUHaiku（英語版）Linux（英語版）MozillaApplication Suite（英語版）Firefox（英語版）Thunderbird（英語版）団体Apacheソフトウェア財団Android Open Source ProjectBlender Foundation（英語版）Eclipse Foundationfreedesktop.orgフリーソフトウェア財団ヨーロッパインドラテンアメリカFSMI（英語版）GNOME FoundationGNU Project（英語版）Google CodeKDE e.V.（英語版）Linux FoundationMozilla FoundationOpen Source Geospatial Foundation（英語版）Open Source InitiativeSoftware Freedom ConservancySourceForgeSymbian FoundationThe Document FoundationXiph.Org FoundationXMPP Standards Foundation（英語版）X.Org FoundationライセンスApacheArtisticBeerware（英語版）Boost（英語版）BSDGNU GPLGNU LGPLISCMITMPLMs-PL/RLzlibパブリックドメイン/CC0（英語版）WTFPLフリーソフトウェア財団が承認したライセンス（英語版）ライセンス標準オープンソースの定義フリーソフトウェアの定義Debianフリーソフトウェアガイドライン課題バイナリ・ブロブデジタル著作権管理 (DRM)グラフィックハードウェアとの互換性（英語版）ライセンスの氾濫Mozilla関連ソフトウェアのブランド変更プロプライエタリ・ソフトウェアSCO-Linux論争（英語版）セキュリティ（英語版）ソフトウェア特許ハードウェア制限（英語版）Trusted Computing（英語版）ウィルス性ライセンスTiVo化その他代替用語（英語版）コミュニティ（英語版）Linuxディストリビューションフォーキング運動Microsoft Open Specification Promise（英語版）Revolution OSオープンソースとクローズドソースの比較（英語版）Portal:FLOSS「http://ja.wikipedia.org/w/index.php?title=Perl6&oldid=46777780」から取得 カテゴリ: プログラミング言語オブジェクト指向言語オープンソーススクリプト言語Perl\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f167"},"body":"ペーパークラフト出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索ペーパークラフトとは、紙を素材としてつくる模型で、「カードモデル」とも呼ばれる。ただし、折り紙と区別するために、一枚の紙からさまざまな大きさ、色、形の部品を切り出して組み立てるものと定義することもある。ペーパークラフトの大聖堂概要[編集]印刷された平面の紙を加工し、作り上げる。パソコンが一般的になる前は書籍等で流通していたが、現在ではデータでの販売も進んでいる。 また、アマチュアが作成したものや会社のプロモーションとして制作されたものがインターネット上で無料で配布されることも多くなっている。 子供用として配布されている簡単なものから制作に数日を要する複雑なもの、A4用紙一枚に満たない部品で完成する小型のものから同じ用紙十数枚を使う大型のものまでいろいろのものが配布されている。ペーパークラフトのプロも存在し、彼らの中にはコンピューターを使用せずに定規等の器具による作図で複雑な作品を製作するものもいる。ペーパークラフトでは、実現したい曲面を紙で実現可能な可展面で近似する必要があり、その設計は従来、手作業でのトライ＆エラーしか手段が無く、かなりの技術と熟練を必要としたが、近年は3DCGソフトで製作したポリゴンモデルから展開図を生成する市販ソフト「ペパクラデザイナー」などの登場により、比較的容易に設計が出来る様になっている。ペーパークラフトが登場する作品[編集]エレファント・マン (映画)関連項目[編集]折り紙PaperChildシャドーボックスカッティングプロッタクラフトロボグラフィグ「http://ja.wikipedia.org/w/index.php?title=ペーパークラフト&oldid=46567278」から取得 カテゴリ: 模型紙細工\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f16e"},"body":"宇宙開発出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索宇宙開発（うちゅうかいはつ、英: space development）は、宇宙空間を人間の社会的な営みに役立てるため、あるいは人間の探求心を満たすために、宇宙に各種機器を送り出したり、さらには人間自身が宇宙に出て行くための活動全般をいう。目次1 宇宙開発の歴史2 国別衛星打上げ個数3 各国の宇宙開発機関4 脚注5 参考文献6 関連項目7 外部リンク宇宙開発の歴史[編集]「宇宙開発競争」、「アメリカ合衆国の宇宙開発」、「ソビエト連邦の宇宙開発」、「中国の宇宙開発」、および「日本の宇宙開発」を参照人類が宇宙空間へ進出する宇宙開発の構想としては、19世紀にはSF作家のジュール・ヴェルヌの小説に描かれた砲弾宇宙旅行などがあるが、実現化を目指した研究として、1903年にはロシアのコンスタンチン・ツィオルコフスキーが、液体燃料型多段式ロケットや人工衛星、惑星への殖民など宇宙開発の基礎技術を提言した。アメリカでは1926年に、ロバート・ゴダードによる液体燃料ロケット打ち上げが成功している。ドイツでは、1923年にヘルマン・オーベルトがロケット推進に関する実証的理論を提言し、1927年には財団法人としてVfR（宇宙旅行協会）が設立される。その後、世界恐慌などの影響で宇宙開発の研究は資金不足に陥る。宇宙旅行協会も1934年には散会するが、ドイツでは1929年に陸軍兵器局がロケット兵器の開発に着手し、協会にも所属していたヴェルナー・フォン・ブラウンやオーベルトらが中心となり、1942年には液体燃料を使ったロケット兵器の開発に成功。第二次世界大戦においてはV2ロケットなどが実戦でも使用された。大戦におけるドイツの敗色が濃厚になると、フォン・ブラウンらロケット技術者はアメリカへ投降し、原子爆弾の開発でアメリカに遅れをとっていたソ連も科学者やロケットの実物や資料などを接収し、ドイツで培われたロケット技術は戦勝国へ引き継がれた。第二次大戦後には、米ソ両国が冷戦状態になると、国家的プロジェクトとして弾道ミサイルや人工衛星など、軍事的利用が可能な技術の研究が競われる宇宙開発競争となる。人工衛星の実現による通信網の拡大は民間事業においても期待されており、アメリカは海軍主導のヴァンガード計画に基づき1955年7月に、ソ連は8月にそれぞれ人工衛星の打ち上げを宣言。アメリカが技術的問題に直面しているなか、ソ連は1957年10月に人工衛星スプートニク1号、11月には犬を乗せたスプートニク2号に成功し、アメリカに対して技術的優位を見せ付ける。アメリカは12月にヴァンガード1号の打ち上げを実行するが失敗し、ソ連の衛星打ち上げの成功はアメリカの安全保障を脅かすと懸念され、スプートニク・ショックが走った。アメリカではヴァンガード計画を改め、1958年にはNASAが設立され、1月にはジュノーI型の打ち上げに成功した。それから米ソは、世界初の成果を上げるために激しく争うことになる。宇宙開発競争では、当初はソ連が大きくリードし、有人宇宙飛行や月・惑星への探査機着陸など、世界初の偉業をことごとく独占した。しかし、有人月面着陸ではアメリカのアポロ計画が先行した。アポロ計画は巨額の資金が必要であり、政治家などから多くの反対を受けたが、世論の強い支持を得て計画は推進された。1969年7月20日にはアポロ11号が世界初の有人月面着陸に成功し、宇宙開発競争は頂点を迎えた。以後は米ソデタント、米ソ以外の宇宙開発参入、世論の注目の薄れなどから米ソ間の競争は緩やかになっていき、1975年の米ソ共同によるアポロ・ソユーズテスト計画で終結を迎えた。宇宙の軍事利用、SDI構想宇宙食の開発宇宙ステーションでの長期滞在フランスなどのヨーロッパ、日本、中華人民共和国の宇宙参入各国による人工衛星の広範な利用ロケット打ち上げの商業化スペースデブリ問題国別衛星打上げ個数[編集]世界の衛星等打上げ累計個数は、2006年12月末時点で5736個。CISと米国だけで約88%を占める。日本は119個で世界第3位に付ける[1]。国・地域・国際機関・多国籍企業別累計衛星打上げ個数（2006年12月末。括弧内は05年12月末）順位打上げ国個数1ソビエト連邦 /  独立国家共同体3228 (3212)2アメリカ合衆国1815 (1781)3日本119 (111)4中華人民共和国99 (92)〇インテルサット70 (69)〇ESRO（英語版） / ESA64 (63)5フランス54 (52) 他に独との共同保有26ドイツ38 (37) 他に仏との共同保有27インド388イギリス359カナダ27 (26)10イタリア20 (19)注記：共同保有は含めず。ただし2006年の米国の34機の内6機は台湾と、1機はフランスとの共同開発。各国の宇宙開発機関[編集]詳細は「宇宙機関の一覧」を参照アメリカ航空宇宙局（NASA）ロシア連邦宇宙局（Roscosmos)宇宙航空研究開発機構（JAXA）欧州宇宙機関 （ESA）中国国家航天局（CNSA）インド宇宙研究機関（ISRO）脚注[編集][ヘルプ]^ http://www.sjac.or.jp/sjac_gaiyo/info/sekai_h19.pdf[リンク切れ]参考文献[編集]この節の加筆が望まれています。関連項目[編集]要素宇宙機宇宙探査機人工衛星ロケットローンチ・ヴィークルロケット発射場ロケットエンジンミッションコントロールセンター地上局有人開発有人宇宙飛行宇宙飛行士宇宙食宇宙服宇宙旅行宇宙移民テラフォーミング国別アメリカ合衆国の宇宙開発ソビエト連邦の宇宙開発日本の宇宙開発中国の宇宙開発イギリスの宇宙開発ブラジルの宇宙開発タイ王国の宇宙開発学問分野宇宙工学制御工学空気力学構造力学軌道力学問題ケスラーシンドローム宇宙開発における事故外部リンク[編集]ポータル 宇宙開発プロジェクト 宇宙開発ウィキメディア・コモンズには、宇宙開発に関連するカテゴリがあります。ウィキニュースには宇宙に関連するニュースのカテゴリがあります。SpaceRef - スペースレフNASA Human Space Flight - アメリカ航空宇宙局America's Space Program:Exploring a New Frontier - アメリカ合衆国国立公園局The 21 Greatest Space Photos Ever - ライフ宇宙開発の歴史 - 宇宙航空研究開発機構 宇宙情報センター宇宙システム (技術者Web学習システム)表・話・編・歴宇宙飛行主要項目歴史（英語版）（競争、事故） · 軌道力学応用地球観測衛星（偵察衛星、気象衛星） · 宇宙開発 · 宇宙旅行 · 衛星測位システム · 宇宙建築（英語版） · 宇宙移民有人宇宙飛行主要項目宇宙飛行士 · 生命維持装置危険性無重量状態（宇宙酔い） · 宇宙線主な計画ボストーク · マーキュリー · ボスホート · ジェミニ · ソユーズ · アポロ · スペースシャトル · 神舟 · ミール · ISS · コンステレーションその他宇宙遊泳宇宙機／宇宙船スペースシャトル · 無人宇宙船（英語版） · 宇宙機の推進方法 · スペースプレーン目的弾道 · 軌道（英語版）（対地同期軌道、地球周回軌道） · 惑星間（英語版） · 恒星間航行 · 銀河間航行打ち上げローンチ・ヴィークル · 使い捨て · 再利用 · 宇宙速度 · 直接上昇（英語版） · 非ロケット式宇宙到達（英語版） · 射場 · 発射台主な機関ESA · NASA · RKA · CNES · CNSA · ISRO · JAXAその他民間宇宙飛行 · 宇宙天気予報 · ラグランジュ点 · 宇宙空間と生存（英語版）表・話・編・歴各国の宇宙開発アメリカの宇宙開発・ロシアの宇宙開発・中国の宇宙開発・欧州の宇宙開発・日本の宇宙開発・ インドの宇宙開発（フランス語版）・イギリスの宇宙開発・ フランスの宇宙開発（フランス語版）・ドイツの宇宙開発（ドイツ語版）・ソビエト連邦の宇宙開発・ブラジルの宇宙開発・タイ王国の宇宙開発この項目は、宇宙開発に関連した書きかけの項目です。この項目を加筆・訂正などしてくださる協力者を求めています（プロジェクト:宇宙開発／Portal:宇宙開発）。「http://ja.wikipedia.org/w/index.php?title=宇宙開発&oldid=47469130」から取得 カテゴリ: 宇宙開発宇宙空間隠しカテゴリ: 外部リンクがリンク切れになっている記事/2011年3月書きかけの節のある項目宇宙開発関連のスタブ項目\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f16f"},"body":"Apache ZooKeeper出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索ZooKeeper開発元Apacheソフトウェア財団最新版3.3.5 / 2012年3月20日（15か月前） （2012-03-20）プログラミング言語Java対応OSCross-platform種別Distributed computingライセンスApache License 2.0公式サイトhttp://hadoop.apache.org/zookeeper/テンプレートを表示Apache ZooKeeperは Apacheソフトウェア財団のオープンソースプロジェクトで、大規模分散システムでよく利用される、設定情報の集中管理や名前付けなどのサービスを提供するソフトウェアである。Hadoopのサブプロジェクトの一つである。ZooKeeperのアーキテクチャでは、高可用性を冗長サービスにより提供している。つまり、クライアントはあるZooKeeperノードへの問い合わせが失敗したら、他のノードに問い合わせることができる。データの更新は一つのマスターノードだけが行うようになっているので、データがノード間で矛盾した内容になることはない（ただし、最新のデータでない可能性はある）。更新を担当するマスターノードが何らかの理由で停止した場合には、各ノード間で選挙を行い、新たな更新ノードが選ばれる。ZooKeeperはデータを階層的な名前空間に保存しているが、これはファイルシステムやトライ木のデータ構造によく似ている。クライアントはこのノードに読み書きを行うことによって、設定情報共有などのサービスを提供する。[1]ZooKeeperはen:Rackspaceやen:Yahoo!などの企業で[2]、またSolrのようなオープンソースのエンタープライズサーチシステムで使用されている。目次1 典型的な用途2 関連項目3 参考文献4 外部リンク典型的な用途[編集]ディレクトリ・サービス構成管理同期_(計算機科学)リーダー選出メッセージキューen:Notification関連項目[編集]ポータル JavaHadoop参考文献[編集]^ ZooKeeper docs^ http://hadoop.apache.org/zookeeper/docs/current/zookeeperOver.html ZooKeeper Overview: A Distributed Coordination Service for Distributed Applications外部リンク[編集]ZooKeeper homepage日本語訳(あしたのオープンソース研究所)Article in highscalability.comYahoo! developer network videoSoftware Development Times article of ZooKeeper moving to ApacheEclipse ECF Discovery based on Apache ZooKeeper表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Apache_ZooKeeper&oldid=46767620」から取得 カテゴリ: Apacheソフトウェア財団オープンソースJava\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f170"},"body":"Rust (プログラミング言語)出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Rust拡張子.rs .rcパラダイム並列計算、関数型、オブジェクト指向、命令型プログラミング、構造化、静的型付け登場時期2010設計者グレイドン・ホアレ開発者モジラ評価版リリース0.6[1] / 2013-04-03型付け静的型付け、強い型付け、型推論、構造化データ主な処理系rustc影響を受けた言語Alef、 C++、 Camlp4、 Common Lisp、 Erlang、 Haskell、 Hermes、 Limbo、 Napier、 Napier88、 Newsqueak、 NIL、 Sather、 Standard MLプラットフォームFreeBSD、Linux、Mac OS X、WindowsライセンスMITウェブサイトrust-lang.orgテンプレートを表示Rust は実験的な並列かつマルチパラダイムのプログラミング言語である。モジラによって開発中である[2]。純関数型プログラミング、並列アクターモデル、手続き型プログラミング、オブジェクト指向プログラミングをサポートする実用的な言語を目指し開発中である。目次1 概要2 特徴3 プログラム例3.1 Hello World3.2 階乗4 言語の発展5 脚注6 外部リンク概要[編集]主任開発者はグレイドン・ホアレ[3]である。彼は2006年にこの言語の開発に着手し、モジラが関わりはじめたのは2009年で[4]、2010年のモジラ・サミットで公に姿を表した[5]。初期のコンパイラーは OCaml 言語で作られていたが、2010年にはコンパイラーをRust言語自身で作る作業が開始された[6]。翌年には最初の完動品が作成された[7]。このコンパイラーはLLVMで構築された。Rust コンパイラーの第 0.1 版は2012年1月に完成している[8]。モジラはこれを新しいモノ好みの人やプログラミング言語愛好家のためのアルファ版と位置づけている。2013年4月3日時点での最新版は2013年4月3日に公開された第 0.6 版である[1]。モジラの理念を守り[9]、Rust 言語は社会に開かれており、開発者たちは利用者からの感想や提言を求めている。Rust言語のウェブサイトには「このアルファ版のソフトウェアにはたくさんのバグや不完全なところがあるのは分かっており、それらは将来変更されます。しばらくの間は不安定な仕様や廃止される仕様があり、後の版でのソースコードの互換性も保証されていません。ご自身の責任でお使いください。」[10]と述べられている。実験的な取り組みであるという性質上、言語にもコンパイラーにもベータ版が公開される予定日は決められていない。特徴[編集]Rust言語はインターネット上で動作する大きなクライアントとサーバープログラムを作成するのに都合が良い言語を目指したものである。結果として、安全性、メモリ管理、並列性が、この言語の目立った特徴となっている。性能はC++言語に匹敵するものになるはずである[11]。Rust言語の文法はC言語やC++言語に類似しており、ブロックは中括弧で区切られ、制御文にはif、else、do、while、forの予約語が使われる。C言語やC++言語にある予約語のすべてが存在するわけではない一方、多方向分岐に使われるmatch文など、C、C++言語のプログラマーには馴染みがない予約語が含まれる。Rust言語はC言語やC++言語と文法的には類似点があるにもかかわらず、意味論（セマンティクス）の点でははとても異なっている。このシステムの設計はメモリー・セーフであり、ヌルポインターや不正なメモリ域を指すポインターは許容されていない。データの値は決まったフォームのみで初期化され、それらの全ての入力は既に初期化さている必要がある[12]。この言語の型システムでは Haskell 言語に倣い「型クラス」を用いることができる。これはアドホックな多相性を容易にするものであり、可変型宣言により実現されるものである。高類多相性[13]など、Haskell 言語にある他の特徴はサポートされていない。Rust言語では予約語「let」で宣言された変数に対して型推論が行われる。これらの変数は型を決定するための値を必要としない。コード中のどこかでそれらの変数への値の代入[14]が失敗した場合にはコンパイル時エラーが発生する[15]。型が明示された関数の引数に対しては型推論は行われない。fn fib(n: int) -> int { }なお、これをfn fib(n) -> { }のように、型を省いて記述することはできない。並列性の機構は軽量タスクとして提供される。これと類似の仕組みは Erlang言語などのアクターモデルの言語にも見られるものである。それらのシステムにおいて、複数のタスク同士は直接にデータを共有するのではなく、メッセージ・パッシングによってデータのやり取りを行う。性能上の理由から、データのやり取りには固有の箱[16]を使って行われ、データの複製はされない。それらの箱は所有者が一人であることが保証されたもので、送信タスクから受信タスクに向けて開放することができる。Rust言語が備えるオブジェクトシステムはクラス、インターフェース、トレイトにより構成される。継承と多相性はそれぞれトレイトとインターフェースによって提供され、クラスは他のクラスから継承することはできない。トレイトの仕組みは複数のクラスに混入させることのできる再利用可能なメソッド実装を提供する。それらのメソッドは実行に必要なフィールド群を規定するものの、それ自身はそれらのフィールドを定義することは出来ない。この特徴によって C++ 言語でおきる菱形継承問題が回避されている。（クラスとトレイトの仕組みは実験的なものであり、現時点の予定として、インターフェースは Rust 第 0.4 版でトレイトと統合されて削除されることになっている。）プログラム例[編集]以下のコードは Rust 第 0.4 版において正しいプログラムである。文法や意味論は後の版で改変される可能性がある。Hello World[編集]fn main() {io::println(\"hello, world\");}階乗[編集]階乗を求めるプログラム。再帰呼び出しによるものと、繰り返し処理によるもの。/* return文なしに暗黙に値を返す Rust言語の機能を示す例である。関数型様式のプログラムを作成する際に、この特徴は便利である。C言語やC++言語とは異なり、Rust言語の if は文ではなく式である。そのため、返し値を伴わなければならない。 */fn fac_recur(n: int) -> int {if n <= 1 { 1 }else { n * fac_recur(n-1) }}fn fac_iter(n: int) -> int {// 変数は予約語「mut[17]」で宣言することで可変になる。let mut i = 1,result = 1;while i <= n {result *= i;i += 1;}return result;  // 明示的なreturn文。関数型の例と対照的。}言語の発展[編集]この言語の開発の初期の頃、変数名や関数名など識別子としてASCII文字以外の文字を使うことは禁じられていた。言語についてのある質疑応答の中で、現場の非英語圏のプログラマーのほとんどが識別子にはASCII文字を使っていると述べられていた。しかしその制限は反論を引き出すことになった[18]。それで、2011年2月に言語に変更が行われ、この制限は削除された[19]。脚注[編集]^ a b rust/RELEASES.txt^ “The Rust Language”.  Lambda the Ultimate (2010年7月8日). 2010年10月30日閲覧。^ 英: Graydon Hoare^ “Project FAQ” (2010年9月14日). 2012年1月11日閲覧。^ “Future Tense” (2011年4月29日). 2012年2月6日閲覧。 “At Mozilla Summit 2010, we launched Rust, a new programming language motivated by safety and concurrency for parallel hardware, the “manycore” future which is upon us.”^ Hoare, Graydon (2010年10月2日). “Rust Progress”. 2010年10月30日閲覧。^ Hoare, Graydon (2011年4月20日). “rust-dev] stage1/rustc builds”. 2011年4月20日閲覧。 “After that last change fixing the logging scope context bug, looks like stage1/rustc builds. Just shy of midnight :)”^ catamorphism (2012年1月20日). “Mozilla and the Rust community release Rust 0.1 (a strongly-typed systems programming language with a focus on memory safety and concurrency)”. 2012年2月6日閲覧。^ “The Mozilla Manifesto”. 2012年4月9日閲覧。^ 英: This is alpha-level software with many known bugs, incomplete features and planned future changes. Use at your own risk, expect some instability, disruption and source-level incompatibility for a while yet.^ Walton, Patrick (2010年12月5日). “C++ Design Goals in the Context of Rust”. 2011年1月21日閲覧。 “… It’s impossible to be “as fast as C” in all cases while remaining safe… C++ allows all sorts of low-level tricks, mostly involving circumventing the type system, that offer practically unlimited avenues for optimization. In practice, though, C++ programmers restrict themselves to a few tools for the vast majority of the code they write, including stack-allocated variables owned by one function and passed by alias, uniquely owned objects (often used with auto_ptr or the C++0x unique_ptr), and reference counting via shared_ptr or COM. One of the goals of Rust’s type system is to support these patterns exactly as C++ does, but to enforce their safe usage. In this way, the goal is to be competitive with the vast majority of idiomatic C++ in performance, while remaining memory-safe…”^ “Doc language FAQ” (2010年9月14日). 2012年1月11日閲覧。^ 英: higher-kinded polymorphism^ 英: assign^ Walton, Patrick (2010年10月1日). “Rust Features I: Type Inference”. 2011年1月21日閲覧。^ 英: unique box^ 「可変の」を意味する英語「mutable」に由来^ Jelliffe, Rick (2010年11月8日). “Vale Java? Scala Vala palava”. 2012年3月29日閲覧。 “… It is just plain ignorant to say that non-English programmers always write with ASCII. (Just as it would be ignorant to say that they never do.) It is that kind of rather blithe dismissal that foreign cultures and languages need to be supported that creates extra unnecessary barriers. That argument ran out of legs in the early 1990s: all platforms have well -established Unicode libraries with serviceable properties for this…”^ “Commit dabccadd3202513ab0bcb424e2c62c90ab23062d” (2011年2月26日). 2012年1月11日閲覧。外部リンク[編集]Rust 公式サイトRust Language WikiThe Rust-dev Archives (electronic mailing list)Primary source code repository and bug tracker「http://ja.wikipedia.org/w/index.php?title=Rust_(プログラミング言語)&oldid=47934554」から取得 カテゴリ: プログラミング言語Mozilla\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f171"},"body":"log4j出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Apache log4j開発元Apacheソフトウェア財団最新版1.2.17 / 2012年5月6日（13か月前） （2012-05-06）プラットフォームクロスプラットフォーム種別ロギングツールライセンスApache 2.0 ライセンス公式サイトhttp://logging.apache.org/log4jテンプレートを表示Apache log4jは、Javaのロギングユーティリティ。元々はCeki Gülcüにより開発されていたが、現在はApacheソフトウェア財団のプロジェクトの一つとなっている。主にデバッグ用ツールとして使用されている。log4jは、Java Logging Frameworksの一つである。Ceki Gülcüはその後、log4j互換の後継として、SLF4J[1]とLogbackの開発プロジェクトを立ち上げている。目次1 機能1.1 ログレベル1.2 設定ファイル1.3 設定例2 ログビューア3 外部リンク3.1 ポート機能[編集]ログレベル[編集]log4jは、6つのログレベルを標準提供する。この他に利用者が任意のログレベルを追加することも可能である。ログレベルが高い（情報量が少ない）ものから低い（情報量が多い）ものへと順に並べると下表の通り。FATAL致命的なエラー。プログラムの異常終了を伴うようなもの。コンソール等に即時出力することを想定ERRORエラー。予期しないその他の実行時エラー。コンソール等に即時出力することを想定WARN警告。廃要素となったAPIの使用、APIの不適切な使用、エラーに近い事象など、実行時に生じた異常とは言い切れないが正常とも異なる何らかの予期しない問題。コンソール等に即時出力することを想定INFO情報。実行時の何らかの注目すべき事象（開始や終了など）。コンソール等に即時出力することを想定。従ってメッセージ内容は簡潔に止めるべきDEBUGデバッグ用の情報。システムの動作状況に関する詳細な情報。コンソールではなくログ上にだけ出力することを想定TRACEトレース情報。更に詳細な情報。コンソールではなくログ上にだけ出力することを想定設定ファイル[編集]log4jは、二つの方法で設定が可能である。一つはプロパティファイル、もう一つはXMLファイルである。両者とも、3つの主要なコンポーネント（ロガー、アペンダ、レイアウト）について定義することができる。ファイルにより設定を行うため、log4jを使用しているアプリケーションを変更することなく、ロギングをon/offできるという利点がある。たとえば、問題が発生するまではロギングをoffで動作させておき、設定ファイルを変更することで簡単にロギングを再開する、という使い方ができる。ロガー(Loggers)は論理的なログファイル名であり、Javaアプリケーションはこれらの名前を意識する。個々のロガーにて取得するログのレベル（FATAL、ERROR等々）はロガー毎に独立に設定できる。古いバージョンのlog4jでは、これらは「カテゴリ」と「優先度」と呼ばれていたが、現バージョンではそれぞれ「ロガー」と「レベル」と呼んでいる。アペンダ(Appenders)は具体的な出力処理を行う。アペンダには様々な種類があり、それぞれ内容を表す名前が付いている。例えばFileAppender、ConsoleAppender、SocketAppender、SyslogAppender、NTEventLogAppenderなどがあり、SMTPAppenderというものさえある。任意のロガーには複数のアペンダを付与できるので、同じログ情報を例えばローカルのファイルと他のコンピュータ上のソケット(en)リスナに同時に出力する、などという使い方が可能。レイアウト(Layouts)は一件ずつのログを整形するためにアペンダによって参照される。例えば行単位に出力するログを整形する方法としてPatternLayoutというものがあり、これはC言語のprintf関数によく似た書式指定子を使える。他にもHTMLLayoutやXMLLayoutなどがあり、これらはそれぞれHTMLやXMLの書式に整形したい場合に使える。設定例[編集]<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE log4j:configuration PUBLIC\"http://logging.apache.org/log4j/docs/api/org/apache/log4j/xml/log4j.dtd\"><log4j:configuration><!-- アペンダとは出力先のことであり、例えばコンソールやファイルを指す。アペンダの名前は好きに決めてよい。--><appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\"><layout class=\"org.apache.log4j.PatternLayout\"><param name=\"ConversionPattern\"value=\"%d{ABSOLUTE} %5p %c{1}:%L - %m%n\" /></layout></appender><!-- 'org.springframework'カテゴリのロガーは、infoレベル以上のメッセージのみロギングする。もしロガーをクラス名で検索し（例：Logger.getLogger(AClass.class)）AClassがspringframework.orgパッケージに属するなら、そのロガーはこのカテゴリに属する。--><logger name=\"org.springframework\"><level value=\"info\"/></logger><!-- springは原則としてinfo以上のログしか取らないが、PropertyEditorRegistrySupportクラスについてはデバッグログも欲しい--><logger name=\"org.springframework.beans.PropertyEditorRegistrySupport\"><level value=\"debug\"/></logger><logger name=\"org.acegisecurity\"><level value=\"info\"/></logger><root><!-- rootカテゴリ --><!-- 別途定義が無い限り、デバッグレベル以上の全てのメッセージをロギングする。--><!-- 別途定義が無い限り、全てのログは「stdout」アペンダにてロギングされる。 --><level value=\"debug\" /><appender-ref ref=\"stdout\" /></root></log4j:configuration>（訳注：この設定例中に出現する「カテゴリ」という用語と、「ロガー」の旧称としての「カテゴリ」との関係は不詳。）ログビューア[編集]ApacheにはChainsaw（en)という別プロジェクトが存在しており、これはlog4jにて生成されたログファイルを利用する。ChainsawはJavaベースのGUIビューアであり、豊富な機能を持つ。Chainsawもlog4jに類似した設定ファイルを使用する。log4j向けのビューアは他にもあるが（例：log2webオープンソースかつウェブベース）、Chainsawに比較して機能が少ない。外部リンク[編集]ポータル FLOSSLog4j日本語公式サイトLog4j 1.1.3 Javadocs 日本語訳杉浦ホームページ - Log4J徹底解説ポート[編集]Log4cxx - C++用apache portLog4plsql - Oracle PL/SQL用portLog4c - C言語用portLog4perl - Perl用portLog4js - JavaScript用portlogging - log4jの影響を受けたPython公式ロギングモジュールLog4r - log4jの影響を受けたRubyロギングモジュールLog4net - Microsoft .NET Framework用portlog4php PHP用portlog4sh Unixシェル（sh, bash, dash, kshなど）用port表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Log4j&oldid=47254914」から取得 カテゴリ: Apacheソフトウェア財団オープンソース\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f173"},"body":"板紙出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索板紙（いたがみ）とは、紙の中でも厚いものを指す。一般には多層抄き（積層紙）のものに限定するが、単層抄きのものも含めることもある。以下は多層抄きの場合である。目次1 種類2 用途3 製法4 板紙メーカー一覧5 脚注種類[編集]経済産業省が実施する「生産動態統計調査」の品種分類では、板紙は「段ボール原紙」「紙器用板紙」「雑板紙」の3種類に大別されている。さらに詳細な分類は以下の通り[1]。段ボール原紙ライナー : 段ボールシートの表裏に使用される板紙。中芯と組み合わせて段ボールシートに加工され、段ボール箱の素材となる。中芯原紙 : 段ボールシートの内側（波状部分）に使用される板紙。紙器用板紙白板紙 : 表面が白い板紙。表裏の白色度が同程度のもの（マニラボール）と表裏差があるもの（白ボール）がある。黄板紙 : 稲藁や麦藁を原料とした黄色い板紙。チップボール : 雑誌古紙や新聞古紙を原料としたネズミ色をした板紙。色板紙 : 染料で着色された板紙。雑板紙建材原紙防水原紙 : 建築物の屋根や床で使用される、アスファルトやタールを含ませた防水材の原紙。石膏ボード原紙 : 石膏ボードに使用される板紙。石膏ボードの芯材である石膏を被覆するために使用。紙管原紙 : 紙管の原紙。その他板紙 : 紙パルプ用の包装紙（ワンプ）など。用途[編集]用途としては包装用が圧倒的に多い。以下代表的な用途を示す。段ボール箱箱（菓子、日用品、部品、ティッシュなどの個包装）＝化粧箱、パッケージ貼箱（化粧箱の一種であるが箱芯材に和紙や印刷紙を貼った物）紙管・ボイド管（巻取紙の芯棒、トイレットペーパーの芯、コンクリート型枠）出版表紙、美術全集本文、貼合絵本、商業印刷物（パンフレット等）玩具（ジグソーパズル、仕掛け絵本、ゲームカード等）伝票類の裏表紙、裏表紙兼ノーカーボン紙用下敷き文房具（フラットファイル等ファイル・バインダー）キャリアテープ - コンデンサーやICチップなど、微細な電子部品を運送・保管・使用する際に使用する紙のテープ製法[編集]紙が長網であるのに対して、丸網多筒或いは短網多筒のマシンが用いられることが多い。代表的なものとしては、ウルトラフォーマー（小林製作所）がある。板紙メーカー一覧[編集]日本レンゴー王子製紙王子マテリア王子エフテックス日本大昭和板紙北越製紙立山製紙加賀製紙 伊予製紙大王製紙中越パルプ工業三菱製紙大豊製紙大和板紙岡山製紙丸井製紙アテナ製紙山恭製紙所世界INTERNATIONAL PAPER（アメリカ）GEORGIA PACIFIC PAPER（アメリカ）SMARFIT STONE CONTAINE（アメリカ）ハンソル製紙（韓国）大韓パルプ（韓国）INDERKIAT PAPER（インドネシア）寧波中華紙業（中国）華泰紙業（中国）永豊余（台湾）脚注[編集][ヘルプ]^ 経済産業省大臣官房調査統計グループ「平成23年紙・印刷・プラスチック・ゴム製品統計年報 (PDF)」、p158「http://ja.wikipedia.org/w/index.php?title=板紙&oldid=47592749」から取得 カテゴリ: 紙\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f172"},"body":"折り紙出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索この項目では、紙を折る遊びについて記述しています。\"折紙\"、\"折り紙\"の他の用法については「おりがみ」をご覧ください。折鶴 （一辺75mmの和紙の折り紙）折り紙（おりがみ、折紙）とは、紙を折って動植物や生活道具などの形を作る日本伝統かつ、日本起源の遊び。また、折り上げられた作品そのものや、折り紙用に作られた正方形の専用紙のことも指す。近年では折り紙の芸術的側面が再評価され、昔にはなかった複雑で優れた作品が生み出され、各国に伝承する折り方に加えて、新しい折り方も考案され続けている（各種の折り方は伝承折り紙の一覧を参照）。また、折り紙の持つ幾何学的な性質から、数学の一分野としても研究されている。目次1 概要2 折り紙の種類2.1 不切正方形一枚折り2.2 複合折り紙2.3 切り込み折り紙2.4 ユニット折り紙2.5 仕掛け折り紙3 基本形4 用紙5 折り図6 主な折り方7 歴史7.1 日本7.1.1 儀礼折り紙7.1.2 遊戯折り紙7.2 ヨーロッパの折り紙7.3 近代・現代の折り紙7.4 商業玩具化8 折紙の数学と応用9 折り紙に関連する人物一覧10 参考文献11 関連項目11.1 折り紙の起源11.2 折り紙の折り方と学術11.3 折り紙からの派生11.4 紙を使った工作12 外部リンク概要[編集]古くは千代紙（ちよがみ）と呼ばれる彩色豊かな和紙を使用した。この為、折り紙の紙を千代紙という場合もある。また、近年では伝統工芸品としても千代紙が販売されている。現在の折り紙は、多くの場合、使用する紙は一枚で、はさみや糊などは使用しないが、2枚の紙を使うもの（例: 手裏剣）やはさみで切り込みを入れるものもある。また、複雑な作品や折り目がつきにくい場合などにはヘラを用いることもある。折鶴（下は同じ大きさの紙）緻密に、折ったり、折り目の間の空間に折り目の一端を挟み込むなどして、形を作り上���ていく。折り続けていくため、折り始める前の紙の大きさに比べ、出来上がった形はかなり小さなものになることもある。代表的な折り紙には、鶴（折鶴、連鶴）、風船、紙飛行機、手裏剣、兜、奴さんなどがある。ヨーロッパでは、スペイン語でパハリータ、フランス語でココットと呼ばれる小鳥（または鶏）の形をした折り紙が代表的である。また、洋食のときに折られているナプキンも、広義の折り紙の一種である。折り紙の種類[編集]不切正方形一枚折り[編集]「ふせつせいほうけいいちまいおり」と読む。折り紙のうち、はさみを使用せず、正方形の紙一枚だけを用いた折り紙をこう呼ぶ。原理主義的な折り紙であり、この折り紙を好む人は多いようである。複合折り紙[編集]対象をいくつかの部分に分けて折り、それを組み合わせて作品を作る折り方。伝承的なものでは、『奴さん』と『袴』を組み合わせたもの。紙に切り込みを入れなくても比較的簡単に複雑な形を表現でき、また色違いの紙を使うことでカラフルな作品に仕上げることもできる。組み立てる際に糊や針金などを使う場合がある。切り込み折り紙[編集]紙に切り込みを入れてカドの数を増やしたり、一部を切り取ったりすることによって複雑な形を折りやすくする折り方。折り紙愛好者からは邪道扱いされることも多いが、「不切正方形一枚折りにこだわって折り方が複雑になりすぎるより良い」という意見もある。『秘伝千羽鶴折型』に見られるようなつなぎ折り鶴は、はさみを利用して作る。ユニット折り紙[編集]ユニット折り紙詳細は「ユニット折り紙」を参照何枚もの紙を同じ形に折って、それらを組み合わせ、一つの作品を作りあげる折り紙作品をユニット折り紙と呼ぶ。ユニット折り紙の対象には対称性の高い多面体（一般に「くすだま」と呼ばれるものなど）、箱などが多い。枚数としては2枚から数十枚、多いものでは1万枚以上もの紙を組み合わせることがある。ユニットを組み合わせるときには、紙の摩擦のみで全体を支えるものが理想であるが、場合により糊付けや糸で綴じるケースもある。ユニット折り紙作家としては、笠原邦彦、川村みゆき、布施知子などが有名。類似のものに、折り紙細工がある。伝承の「手裏剣」もまたユニット折り紙の一つである。仕掛け折り紙[編集]上記の折り紙に加えて、動かせる玩具として作られたもの。古くは『カメラ』（シャッターが開く）や『羽ばたく鳥』（首としっぽを持って羽根を動かせる）など。近年には神谷哲史の『黒い森の魔女』（魔女<=>ドラゴンに変身する）などの複雑なものもある。基本形[編集]詳細は「基本形」を参照折り紙には、基本形というものがいくつかある。例えば、鶴の基本形は4つのとがった「カド」を持っており、動物を折る場合ならこれらを頭や足に当てることで創作が容易になる。以下に、その代表的なものを記述する。鶴の基本形伝承作品の折り鶴を作る途中までの形で止めたもの。あやめの基本形伝承作品のあやめを作る途中までの形で止めたもの。かえるの基本形ともいう。さかなの基本形さかなを作る途中の形で止めたもの。とびらの基本形折り紙を、長方形になるように半分に折ってから、「とびら」の形にしたもの。ユニット折り紙のユニットを折る際にも使用される。用紙[編集]一般的には折り紙専用の正方形の紙を使う。しかし、作品によっては長方形（主に辺の比が1:√2のもの）その他の紙を使う場合もある。新聞紙などを用いる作品（帽子、ミット、紙鉄砲など）もある。紙幣を折り紙の素材とし、人物などの図柄を完成作品のデザインの一部に取り込むような試みさえある。五角形や六角形や八角形など多角形の特殊な紙を用いる作品もあるが、こうした場合は自分で必要に応じ正方形の紙から切り出すとよい。通常店でもっとも普通に売られている折り紙は15cm角であるが、それ以下・それ以上（5cm角、7.5cm角、24cm角、35cm角等）の折り紙も市販されている。また、稀ではあるが円形の折り紙なども存在する。彩色に関しても、両面カラーのもの、透明なもの、グラデーションや水玉など特殊な模様の入ったもの、表面が2等分や4等分に色分けされているものなどがあり、現在1000種以上の折り紙用紙が入手可能といわれている。複雑な作品を折る場合には、金属箔を利用したホイル紙や、薄い和紙（破れにくい）の裏に金属箔（例えばアルミホイル。形が崩れにくくなる）を裏打ちした自作の用紙が用いられることが多い。展示用の作品には、見栄えの関係で選定した洋紙や和紙を正方形（あるいは作品に応じた形）に裁断して使うことが多い。厚手の紙（洋紙など）を随時、適度に湿らせてから折る、ウェットフォールディングという技法も使われる。この技法を用いると、厚い紙を簡単に折ったり、皺を大幅に減らすことができる。また、曲がった形を固定したり、紙を\"伸ばして\"（歪ませて）折ることもできる。周りに正方形の紙がなくとも、例えば目の前にあるいらない書類などを工夫して正方形に整えれば、予め用紙を用意してなくとも折り紙を十分に楽しむことが出来る。市販のものは単色のほか模様入りのものもある。折り図[編集]折り紙の折り方を人に伝えるため、その工程を絵（しばしば写真）で示す折り図が存在する。折り図では、慣例的に、山折り線を一点鎖線（「―・―・―・―・―」）、谷折り線を破線（「― ― ― ― ―」）で表すことが多い。また、理解を容易にするため文章が添えられることも多い。主な折り方[編集]詳細は「折りの技法」を参照折り紙では、基本的な折り方に以下がある。山折り谷折り中割り折りかぶせ折りまたその他にも、特別な折り方がたくさんある。蛇腹折りミウラ折り平織りぜんまい折り歴史[編集]折り紙の起源は明らかになっていない。中国起源説、日本起源説、スペイン起源説等があるが、いずれも推測の域を出ない。中国起源説は製紙の起源が中国であることから、折り紙の起源も中国であろうとの説で根拠は乏しい。日本の折り紙は下記のように他から伝わったものではなく独自に発達したもののようである。19世紀にはヨーロッパにも独立した折り紙の伝統があり、日本の開国と共に両者が融合した。現在では日本語の「折り紙」という言葉が世界に浸透しており、欧米をはじめ多くの国で「origami」という言葉が通用する。現代の折り紙は日本やヨーロッパを起源とするものである。日本[編集]日本の折り紙は大きく2種類に分けることができる。一般に知られている折り鶴などの折り紙は遊戯折り紙と呼ばれ、熨斗などの折り紙は儀礼折り紙（または礼法折り紙）と呼ばれる。平安時代の『清輔朝臣集』（藤原清輔）にカエルの折り紙について記述されている。江戸時代において、平織りの木綿の反物が庶民にまで普及し、手拭が日常的に使われるようになると、ただ単に折りたたんで収納するのではなく、折り紙のように奴（やっこ）やカエルを模しての折り方が工夫され、日常の家事仕事に彩りを加えるようになった。その後、遊びや趣味として「折り手拭」という技法になり、中でも財布は折りたたんだ手拭で作ったもので代用する人も多かった。儀礼折り紙[編集]文献で確認できる限り、1680年（延宝8年）に井原西鶴が「一昼夜独吟四千句」の中の一句「廬斉が夢の蝶はおりすえ」に詠んだ、雄蝶・雌蝶が最古の記録である。雄蝶・雌蝶は銚子の口に付けるもので、銚子の包みが様式化したものである。また、今日見られる熨斗も、熨斗鮑の包みが様式化したもので、儀礼折り紙の一例である。儀礼折り紙は武家の礼法に含まれるもので、1764年（明和元年）に伊勢貞丈が著した『包之記』に右の折形どもは、京都将軍の御代に用いられし折形也— 包之記という記述があるから、足利義満の時代、小笠原氏・伊勢氏・今川氏を中心に整えられたと考えられる。遊戯折り紙[編集]井原西鶴の『好色一代男』（1682年（天和2年））に或時はおり居をあそばし、比翼の鳥のかたちは是ぞと、給はりける。花つくりて、梢にとりつけ、連理は是、我にとらすると、よろづにつけて此事をのみ忘れず— 好色一代男とあるのが、最も古い記録である。1797年（寛政9年）に出版された『秘傳千羽鶴折形』は、49種の折鶴を紹介しており、明らかに大人向けに書かれており、当時から子供だけでなく大人にも折り紙を楽しむ人がいたことが分かる。これが現存する世界最古の折り紙の文献とされている。他に『嬉遊笑覧』、『折形仮名手本忠臣蔵』などがあり当時約70種程度の折り紙があったことがうかがえる。現存する折り紙でもっとも古いものとしては、森脇家旧蔵の作品群がある。これには儀礼折り紙と遊戯折り紙の両方が含まれているが、遊戯折り紙については、19世紀前半に折られたものと推定されている。ヨーロッパの折り紙[編集]ドイツのゲルマン国立博物館（Germanisches Nationalmuseum）およびザクセンフォークアート美術館（ザクセン民芸博物館、Museum für Sächsische Volkskunst）に、19世紀前半に折られたものと推定されている作品群が所蔵されている。ヨーロッパの折り紙は、フリードリヒ・フレーベルの幼児教育法に取り入れられ、日本の開国にともない日本に伝わった。ヨーロッパの伝承作品として代表的なものに、パハリータ（ココット）、帆掛船（だまし船）、風船、紙飛行機（ダーツ）などが挙げられる。近代・現代の折り紙[編集]1950年代には、日本の吉澤章、高濱利恵、イギリスのロバート・ハービン、アメリカのリリアン・オッペンハイマー、サミュエル・ランドレットらを中心とする国際的な折り紙サークルが形成され、折り紙が世界的に普及した。1983年（昭和58年）に発売となった、『ビバ!おりがみ』（前川淳・笠原邦彦 著、ISBN 4387891165）、および1989年（平成元年）に発売となったFolding the Universe（ピーター・エンゲル著）が皮切りとなり、近年複雑な作品も作られるようになった。前川淳によって創始された「折り紙設計」の技法は特に大きな影響を与えており、これにより初めて複雑な作品を合理的にデザインできるようになった。現在日本国内では日本折紙協会・日本折紙学会の両団体が存在する他、アメリカ・イギリスなど各国にも折り紙団体が結成されており、愛好者間の交流を深めている。インターネットの普及などにもよって情報伝達の速度はいっそう上昇し、以前では考えられなかった速度で技術開発が進められるようになっている。商業玩具化[編集]ビー玉に対するビーダマン、けん玉に対するデジケン、ベーゴマに対するキャラコバッチ等と同様に、伝統玩具を商業玩具とする手法は折り紙に対しても実行された。タカラトミーからはオリガミウォーズ、コナミからはオリグライドが発売されている。折紙戦士という漫画作品が台湾でかかれ、これを原作にアニメも製作された。折紙の数学と応用[編集]びゅんびゅんバネ（Spring Into Action） - Jeff Beynon作。一枚の長方形の用紙から折られている。[1][2]詳細は「折紙の数学」を参照折り紙の応用、または研究にはいくつもの数学的課題が含まれている。例えば、展開図を二次元の作品へと平らに折りたためるかどうかの問題（flat-foldability）はそういった数学的課題のうちの一つである。平らな紙は表面のどの点においてもガウス曲率が0である。よって折り目は本来曲率0の直線である。しかし濡れた紙や指の爪でしわをつけた紙など、平らでなくなった紙においては最早この曲率の条件はあてはまらない。剛体折り紙の問題（即ち、折り目の位置で蝶番でつないだ板金を用いて、紙と同様に作品を折ることができるかどうか）は重要な実用上の問題である。たとえば、ミウラ折りは剛体でも折ることができ、人工衛星の太陽電池パネルを折り畳むために用いられている。またそれ以外にも、折り紙はエアバッグの折り畳みや医療用のステントグラフトの折り畳みにも応用されている[3]。折り紙に関連する人物一覧[編集]折り紙作家は幾人もいるが、プロとして活躍しているものは一握りしかいない。プロの折り紙作家は折り図を収録した本を執筆し、生計を立てているものが多い。エリック・ジョワゼル岡村昌夫笠原邦彦加瀬三郎河合豊彰神谷哲史木村良寿川崎敏和川畑文昭ジョセフ・ウーデビッド・ブリル中野獨王亭西川誠司布施知子北條高史西田シャトナー前川淳松尾貴史（折り顔）桃谷好英山口真吉澤章吉野一生新宮文明ロバート・J・ラング萩原優参考文献[編集]^ The World of Geometric Toy（英語） , Origami Spring（英語）, August, 2007.^ 布施知子著「らせんを折ろう」（筑摩書房、1992年（平成4年）1月）ISBN 978-4480872029^ 「Origami」を、医療器具や望遠鏡の折り畳みに応用山口真『たのしい折り紙全集』主婦と生活社、1997年 ISBN 4-391-12031-3川村みゆき『はじめての多面体おりがみ-考える頭をつくろう』日本ヴォーグ社、2001年 ISBN 4-529-03547-6川村みゆき『多面体のおりがみ-正多面体・準正多面体および双対』日本評論社、1995年 ISBN 4-535-78224-5関連項目[編集]折り紙の起源[編集]熨斗折り紙の折り方と学術[編集]ミウラ折り伝承折り紙の一覧折紙の数学 - 折り紙公理折り紙の科学国際会議折り紙からの派生[編集]手拭（折り手拭）紙飛行機（折り紙飛行機）紙を使った工作[編集]ペーパークラフト紙切りくす玉外部リンク[編集]ウィキメディア・コモンズには、折り紙に関連するメディアがあります。Origami Video（英語）日本折紙協会日本折紙学会日本折紙博物館義の作Papyromania（英語、オランダ語）折り紙の折り方と折り紙の作り方ORILAND - What Origami Can Be!（英語）Origami Now! ピーバディ・エセックス・ミュージアムによる展示。折り紙の折り方をビデオで紹介。おりがみ庵 岡村昌夫折り顔 松尾貴史折り紙と折る文化MEMORO「記憶の銀行」千羽鶴（オリガミ：折鶴の折り方）「http://ja.wikipedia.org/w/index.php?title=折り紙&oldid=48140980」から取得 カテゴリ: 折り紙紙細工\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f175"},"body":"Riak出典: フリー百科事典『ウィキペディア（Wikipedia）』移動: 案内、\t\t\t\t\t検索Riak開発元Basho Technologies初版2009最新版1.3.0 / 2013年2月21日（4か月前） （2013-02-21）プログラミング言語Erlang, C, C++, some JavaScript対応OSLinux, BSD, Mac OS X, SolarisプラットフォームIA-32, x86-64サポート状況Active種別DatabaseライセンスApache License 2.0公式サイトwiki.basho.comテンプレートを表示Riak[1] は Amazon Dynamo の論文 [2] に基づいて実装されている NoSQL データベース。Riak はバックエンドとなるシャードパーティションストレージが差し替え可能な構成であり、デフォルトのバックエンドストレージは Bitcask である[3]。また MapReduce 機構を持ちネイティブで JavaScript (SpiderMonkey ランタイム) と Erlang、言語ドライバの追加で Python, Java, PHP, Ruby のような様々な言語をサポートしている[4]。2012年2月21日、Basho は Riak v1.1 をアナウンス。Riak 1.1 では Riaknostic、エラーのロギングとレポートの強化、大規模クラスタに対する弾性の改善、Riak Control と呼ばれる新しい GUI とモニタリングインターフェースが導入された。2012年3月27日、Basho は Riak CS (Cloud Storage) をリリース。Riak CS は Riak 上でのマルチテナンシー、パフォーマンス計測、LOB のサポート、S3 互換 API を提供。Basho は 2013年2月21日に Riak 1.3 の一般的な有用性をアナウンス [5]。Riak はフォーチュン 50 カンパニーのうち 25% 以上を含む世界中の数千社で導入されている[6]。採用企業には Symantec, Best Buy, Workday, Yahoo! JAPAN, Voxer, Braintree, Bump, Boeing, Comcast, AOL, Ask.com, Yammer, Yandex, AT&T, Datapipe[7] などがある。References[編集]^ “Riak: An Open Source Scalable Data Store” (2010年11月28日). 2011年10月13日閲覧。^ Dynamo: Amazon’s Highly Available Key-value Store, SOSP 2007^ “Basho: Bitcask”. Riak Wiki. 2013年3月9日閲覧。^ “Riak Client Libraries and Community Code”. 2011年3月19日閲覧。^ “Riak Amps Up Multi-Data Center Replication with version 1.2”. 2013年2月21日閲覧。^ “GigaOM: Basho takes aim at more enterprises with upgrades”. 2013年3月9日閲覧。^ “Riak Customers”. Riak. 2013年2月21日閲覧。External links[編集]公式ウェブサイトOfficial wikiBasho websiteBashoジャパン株式会社 WebサイトGigaOM: Basho arms would-be Amazon killers with AWS-compatible storageNetCircle: Using Riak at NetCircleRiak at AOLRiak at Temetra for Smart MeteringUsing Riak for Ranking Collection at SEOmozUsing Riak at Github on Rackspace CloudSearching with RiakSearch at inagist.comRiak and Scala at YammerRiak in Production at VoxerRiak Benchmarks on Joyent CloudAirbrake migration from MongoDB to Riakこの項目は、ソフトウェアに関連した書きかけの項目です。この項目を加筆・訂正などしてくださる協力者を求めています（プロジェクト:コンピュータ/Portal:コンピュータ）。「http://ja.wikipedia.org/w/index.php?title=Riak&oldid=47500121」から取得 カテゴリ: クラウドコンピューティングNoSQLデータベースJavaScript隠しカテゴリ: ソフトウェア関連のスタブ\t\t\t\t\t\t\t\t\t\t\t\t"}
{"_id":{"$oid":"51e4d391c507ed1f43d1f174"},"body":"Apache HBase出典: フリー百科事典『ウィキペディア（Wikipedia）』（HBaseから転送）移動: 案内、\t\t\t\t\t検索Apache HBase開発元Apache Software Foundation最新版0.94.1 / 2012年8月8日（10か月前） （2012-08-08）プログラミング言語Java対応OSクロスプラットフォームサポート状況Active種別列指向データベースマネジメントシステムライセンスApache License 2.0公式サイトhttp://hadoop.apache.org/hbase/テンプレートを表示Apache HBaseはオープンソースの、列指向、分散データベースであり、 GoogleのBigTableをモデルとし、Javaにより書かれている。Apacheソフトウェア財団のHadoopプロジェクトの一部として開発され、HDFS (Hadoop Distributed File System)の上で実行され、Hadoopに対しBigTableのような機能を提供する。HBaseはBigTable論文に従い圧縮、インメモリ処理の機能、および各列ごとにブルームフィルタを持っている。 [1] HBaseにおけるテーブルはHadoop上のMapReduceジョブの入出力として機能し、Java APIのほか、REST、Avro、ThriftといったゲートウェイAPIを通じアクセスが可能である。HBaseは、古典的なSQLデータベースを直接置き換えるものではないが、近年ではパフォーマンスが向上し、FacebookのMessaging Platformなど、データ駆動型のWebサイトでも使用されている。目次1 歴史2 参考文献3 関連項目4 外部リンク歴史[編集]HBaseはPowerset社において自然言語処理を行うため、大規模データの処理を行う必要があり、プロジェクトとして始まった。今はApacheのトップレベルプロジェクトであり、注目を集めている。[2]参考文献[編集]^ Chang, et al. (2006). Bigtable: A Distributed Storage System for Structured Data^ Powerset Blog関連項目[編集]BigTableHypertable - C++実装 [1]外部リンク[編集]HBase公式サイト日本語訳(あしたのオープンソース研究所)Hadoop公式サイト日本語訳(あしたのオープンソース研究所)Hbase解説表・話・編・歴Apacheソフトウェア財団Top level ProjectsApache HTTP Server - ActiveMQ - Ant - APR - Axis - Axis2 - Cassandra - Cayenne - Cocoon - Commons - CouchDB - CXF - Directory - DB - Felix - Forrest - Geronimo - Gump - Hadoop - HttpComponents - Jackrabbit - James - JMeter - Lenya - Maven - Mina - MyFaces - ODE - OFBiz - OpenEJB - OpenJPA - Pivot - POI - mod_perl - Roller - Santuario - ServiceMix - SpamAssassin - STDCXX - Struts - Subversion - Synapse - Tapestry - Tcl - Tiles - Tomcat - Turbine - Velocity - WebWork 2 - Wicket - WSIF - XMLBeansApache CommonsAttributes - BSF - BCEL - BeanUtils - Betwixt - Chain - CLI - Codec - Collections - Configuration - Daemon - DBCP - DBUtils - Digester - Discovery - EL - Email - FileUpload - IO - JCI - JCS - Jelly - Jexl - JXPath - Lang - Launcher - Logging - Math - Modeler - Net - Pool - Primitives - Proxy - SCXML - Transaction - Validator - VFSApache DBDerby - Torque - DdlUtils - JDOApache PortalsJetspeed 1 - Jetspeed 2 - Graffito - Pluto - WSRP4JApache LuceneLucene Java - Solr - Nutch - Lucene4c - LucyApache XMLXalan - XercesApache XML GraphicsBatik - FOP - XMLGraphicsCommonsApache LoggingLog4j - Log4Cxx - Log4Perl - Log4PLSQLApache HadoopHadoop - HDFS - Avro -ZooKeeperApache IncubatorXAP - River - Graffito - Tuscany - Log4Net - Abdera - CeltiXfire - FtpServer - Heraldry - Ivy - JuiCE - Kabuki - Lokahi - Lucene.Net - mod_ftp - NMaven - Woden - WSRP4J - Yoko - Hama - Log4PHP - Qpid - TripleSoup - UIMA - wadi - OpenOfficeApache Attic開発終了Harmony - AxKit - iBATIS - ORO - Jakarta ProjectLicense: Apache License - Website: www.apache.org「http://ja.wikipedia.org/w/index.php?title=Apache_HBase&oldid=46782727」から取得 カテゴリ: NoSQLデータベースデータベース管理システムApacheソフトウェア財団\t\t\t\t\t\t\t\t\t\t\t\t"}
