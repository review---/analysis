// initial cluster
function kmeans(_db,ns,locs) {
	var fin_cluster_collection_name  = 'kmeans.'+ns+'.fin.cluster';
	var fin_data_collection_name     = 'kmeans.'+ns+'.fin.data';
	function iterate(n,cs_history) {
		var prev_cluster_collection_name = 'kmeans.'+ns+'.it'+n+'.cluster';
		var prev_data_collection_name    = 'kmeans.'+ns+'.it'+n+'.data';
		var cluster_collection_name      = 'kmeans.'+ns+'.it'+(n+1)+'.cluster';
		var data_collection_name         = 'kmeans.'+ns+'.it'+(n+1)+'.data';

		if ( n == 0 ) {
			utils.cleanCollections('^kmeans\.'+ns+'\.');
			var cluster_collection = _db.getCollection(cluster_collection_name);
			for ( var l in locs ){
				cluster_collection.save({ value : { name : l , s : 0, loc : locs[l] } })
			}

			var _src = _db.getCollection(ns);

			var data_collection = _db.getCollection(data_collection_name);
			var _c_src = _src.find();
			while(_c_src.hasNext()){
				var data = _c_src.next();
				var loc  = utils.getField(data,_VFIELD);
				if ( loc ) {
					data_collection.save({
							_id:data._id,
						value:{loc:loc}
					});					
				}
			}

//			_src.mapReduce (
//  			function(){
//					var loc = utils.getField(this,VFIELD);
//					if ( loc ) {
//  					emit(this._id,{loc:loc,c:''} );
//					}
//  			},
//  			function(key,vals){
//					// Maybe skip;
//  				return vals[0]; 
//  			},
//     		{ 
//					out: data_collection_name,
//					scope: {
//						utils:utils,
//						VFIELD: _VFIELD
//					}
//				}
//  		);
			return [false,cluster_collection_name,data_collection_name];
		}

		var prev_cluster_collection = _db.getCollection(prev_cluster_collection_name);
		var prev_data_collection = _db.getCollection(prev_data_collection_name);

		var _c_prev_cluster_collection = prev_cluster_collection.find();
		var cs = [];
		while (_c_prev_cluster_collection.hasNext()){
			var cluster = _c_prev_cluster_collection.next();
			cs.push(cluster.value);
		}
		var md5sum = hex_md5(JSON.stringify(cs));

		if ( cs_history[md5sum] ) {
			return [true,prev_cluster_collection_name,prev_data_collection_name];
		}
		cs_history[md5sum] = n;

		var data_collection = _db.getCollection(data_collection_name);

		data_collection.ensureIndex({'value.c':1});
		var _c_prev_data_collection = prev_data_collection.find();
		var newcs = {};
		while(_c_prev_data_collection.hasNext()){
			var data = _c_prev_data_collection.next();
			var cur = null;
			var min = null;
			var cssum     = 0;
			data.value.cs = [];
			for ( var c in cs ){
				var diff = utils.diffVector(cs[c].loc , data.value.loc);
				if ( min === null || min > diff ) {
					cur = cs[c].name;
					min = diff;
				}
				var score = Number.MAX_VALUE;
				if ( diff ) {
					score = 1/diff;
				}
				data.value.cs.push({c:c,s:score});
				cssum += score;
			}
			// data
			data.value.c  = cur;
			for ( var i in data.value.cs ){
				data.value.cs[i].s /= cssum;
				data.value.cs[i].s = (data.value.cs[i].s<0.00000000001)?0:data.value.cs[i].s;
			}
			data.value.cs = utils.sort(data.value.cs,function(a,b){ return a.s > b.s;});
			data_collection.save(data);
			// cluster
			if ( ! ( cur in newcs) ) {
				newcs[cur] = { name: cur, s:0, loc:{}, tmp:{}};
			}
			newcs[cur].tmp = utils.addVector(newcs[cur].tmp,data.value.loc);
			newcs[cur].s++;
		}
		var cluster_collection = _db.getCollection(cluster_collection_name);
		for ( var i in newcs ) {
			var cluster = newcs[i];
			var keys = Object.keys(cluster.tmp).sort();
  		for ( var k in keys ) {
				var d = keys[k];
				cluster.loc[d] = (cluster.tmp[d] / cluster.s).toPrecision(15);
			}
			delete(cluster.tmp);
			cluster_collection.save({
				_id:newcs[i].name,
				value:cluster
			});
		}

//		var cluster_collection = _db.getCollection(cluster_collection_name);
//		for ( var i in cs ) {
//			var key = cs[i].name;
//			var _c_data_collection = data_collection.find({'value.c' : key });
//			var s = _c_data_collection.count();
// 			var cluster = { name: key,s:s, loc:{} };
//			var loc = {};
//			while ( _c_data_collection.hasNext() ){
//				var data = _c_data_collection.next();
//				loc = utils.addVector(loc,data.value.loc);
//			}
//			var keys = Object.keys(loc).sort();
//  		for ( var k in keys ) {
//				var d = keys[k];
//				cluster.loc[d] = loc[d]/s;
//			}
//			cluster_collection.save({
//				_id:key,
//				value:cluster
//			});
//		}

//		prev_data_collection.mapReduce (
//		function(){
//			var cur = null;
//			var min = null;
//			for ( var c in cs ){
//				var diff = utils.diffVector(cs[c].loc , this.value.loc);
//				if ( min === null || min > diff ) {
//					cur = cs[c].name;
//					min = diff;
//				}
//			}
//			emit(this._id,{loc:this.value.loc,c:cur} ); // emit key is unique so reduce will be skiped.
//		},
//		function(key,vals){
//			return vals[0]; // Maybe skip;
//		},
// 		{ 
//			out: data_collection_name,
//			scope:{
//				cs:cs,
//				utils:utils
//			}
//		});
//
//		data_collection.mapReduce (
//			function(){
//				emit(this.value.c,{name:this.value.c ,s:1,loc:this.value.loc});
//			},
//			function(key,vals){
// 				var ret = { name: key,s:0,loc:{} };
//				for ( var v in vals ) {
//					ret.s += vals[v].s;
//					for ( var d in vals[v].loc ) {
//						if ( ! ret.loc[d] ){
//							ret.loc[d] = 0;
//						}
//						ret.loc[d] += vals[v].loc[d];
//					}
//				}
//				return ret;
//			},
//		  { out: cluster_collection_name,
//				scope:{cs:cs},
//				finalize: function(key,val){
//  				for ( var d in val.loc ) {
//						val.loc[d] /= val.s;
//					}
//					return val;
//				}
//			});
		return [false,cluster_collection_name,data_collection_name];
	}

	var ret;
	var cs_history = {};
	for (var i = 0 ; i <= 99 ; i++ ) {
		print(' - ' + i);
		ret = iterate(i,cs_history);
		if ( ret[0] ) {
			break;
		}
	}
		_db.getCollection(ret[1]).renameCollection(fin_cluster_collection_name);
		_db.getCollection(ret[2]).renameCollection(fin_data_collection_name);

	return [fin_cluster_collection_name,fin_data_collection_name];
}

print('== KMEANS ==');
var _c_cluster = utils.getCollection(_CLUSTER).find({_id:{'$ne':'.meta'}});
var clusters = [];
while (_c_cluster.hasNext()){
	clusters.push(utils.getField(_c_cluster.next(),_CFIELD));
}

var _src_split  = _SRC.split('\.');
var _DB         = _src_split.shift();
var _db         = _pmongo.getDB(_DB);
var SRC         = _src_split.join('\.');

var kmeans_cluster = kmeans(_db,SRC,clusters);
var meta = _db.getCollection(SRC).findOne({_id:'.meta'},{_id:0});
if ( ! meta ){
	meta = {};
}
meta.vector = _SRC;
meta.data   = _DB + '.' + kmeans_cluster[1];
meta.cluster= _DB + '.' + kmeans_cluster[0];

_db.getCollection(kmeans_cluster[0]).findAndModify({
	query: {_id:'.meta'},
	update:{ $setOnInsert:meta},
	upsert:true
});
_db.getCollection(kmeans_cluster[1]).findAndModify({
	query: {_id:'.meta'},
	update:{ $setOnInsert:meta},
	upsert:true
});
printjson(meta);
